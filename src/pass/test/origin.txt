@a = dso_local global i32 10

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @starttime()
declare void @stoptime()

define dso_local void @foo(){
entry:     
  %0 = load i32, i32* @a     
  %1 = add i32 %0, 1     ; a+1
  store i32 %1, i32* @a     ; a=a+1
  br label %ret     

ret:     
  ret void     
}

define dso_local i32 @bar(i32 %0){
entry:     
  %1 = alloca i32     ; i32 c
  ret = alloca i32     
  store i32 %0, i32* %1     
  %2 = load i32, i32* %1     
  %3= icmp eq i32 %2, 1     ; c==1
  br i1 %3, label %4, label %5     ; judge c==1

4:     ; if Body
  store i32 10, i32* ret     
  br label %ret     

5:     ; else Body
  store i32 5, i32* ret     
  br label %ret     

6:     
  br label %ret     

ret:     
  %7 = load i32, i32* ret     
  ret i32 %7     
}

define dso_local i32 @main(){
entry:     
  %0 = alloca i32     ; i32 b=5
  ret = alloca i32     
  store i32 5, i32* %0     ; b=i32 5
  call void @foo()     ; call foo()
  call void @foo()     ; call foo()
  %1 = load i32, i32* @a     
  %2 = call i32 @bar(i32 2)     ; call bar(2)
  %3 = add i32 %1, %2     ; a+bar(2)
  store i32 %3, i32* %0     ; b=a+bar(2)
  %4 = load i32, i32* %0     
  store i32 %4, i32* ret     
  br label %ret     

ret:     
  %5 = load i32, i32* ret     
  ret i32 %5     
}

