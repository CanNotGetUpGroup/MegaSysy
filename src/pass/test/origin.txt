declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime(i32)
declare void @_sysy_stoptime(i32)

define dso_local i32 @get_one(i32 %0){
entry:     
  %1 = alloca i32     ; i32 a
  %ret = alloca i32     
  store i32 %0, i32* %1     
  store i32 1, i32* %ret     
  br label %retBB     

retBB:     
  %2 = load i32, i32* %ret     
  ret i32 %2     
}

define dso_local i32 @deepWhileBr(i32 %0,i32 %1){
entry:     
  %2 = alloca i32     ; i32 d
  %3 = alloca i32     ; i32 c
  %4 = alloca i32     ; i32 b
  %5 = alloca i32     ; i32 a
  %ret = alloca i32     
  store i32 %0, i32* %5     
  store i32 %1, i32* %4     
  %6 = load i32, i32* %5     
  %7 = load i32, i32* %4     
  %8 = add i32 %6, %7     ; a+b
  store i32 %8, i32* %3     ; c=a+b
  br label %9     

9:     ; judge c<75
  %10 = load i32, i32* %3     
  %11= icmp slt i32 %10, 75     ; c<75
  br i1 %11, label %12, label %29     

12:     ; while Body
  store i32 2, i32* %2     ; d=2
  %13 = load i32, i32* %3     
  %14= icmp slt i32 %13, 100     ; c<100
  br i1 %14, label %15, label %27     ; judge c<100

15:     ; if Body
  %16 = load i32, i32* %3     
  %17 = load i32, i32* %2     
  %18 = add i32 %16, %17     ; c+d
  store i32 %18, i32* %3     ; c=c+d
  %19 = load i32, i32* %3     
  %20= icmp sgt i32 %19, 60     ; c>60
  br i1 %20, label %21, label %22     ; judge c>60

21:     ; if Body
  br label %28     

22:     ; else Body
  %23 = load i32, i32* %3     
  %24 = load i32, i32* %2     
  %25 = add i32 %23, %24     ; c+d
  store i32 %25, i32* %3     ; c=c+d
  br label %26     

26:     
  br label %27     

27:     
  br label %28     

28:     ; jump to head
  br label %9     

29:     ; exit while
  %30 = load i32, i32* %3     
  store i32 %30, i32* %ret     
  br label %retBB     

retBB:     
  %31 = load i32, i32* %ret     
  ret i32 %31     
}

define dso_local i32 @main(){
entry:     
  %0 = alloca i32     ; i32 p
  %ret = alloca i32     
  store i32 2, i32* %0     ; p=2
  %1 = load i32, i32* %0     
  %2 = load i32, i32* %0     
  %3 = call i32 @deepWhileBr(i32 %1,i32 %2)     ; call deepWhileBr(p,p)
  store i32 %3, i32* %0     ; p=deepWhileBr(p,p)
  %4 = load i32, i32* %0     
  call void @putint(i32 %4)     ; call putint(p)
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %5 = load i32, i32* %ret     
  ret i32 %5     
}

