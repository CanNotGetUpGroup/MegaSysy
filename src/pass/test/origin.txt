declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime(i32)
declare void @_sysy_stoptime(i32)

define dso_local i32 @main(){
entry:     
  %0 = alloca i32     ; i32 n=0
  %1 = alloca i32     ; i32 m=0
  %2 = alloca i32     ; i32 k=0
  %3 = alloca i32     ; i32 j=0
  %4 = alloca i32     ; i32 i=0
  %5 = alloca i32     ; i32 sum=0
  %ret = alloca i32     
  store i32 0, i32* %5     ; sum=i32 0
  store i32 0, i32* %4     ; i=i32 0
  br label %6     

6:     ; judge i<20
  %7 = load i32, i32* %4     
  %8= icmp slt i32 %7, 20     ; i<20
  br i1 %8, label %9, label %69     

9:     ; while Body
  store i32 0, i32* %3     ; j=i32 0
  br label %10     

10:     ; judge j<10
  %11 = load i32, i32* %3     
  %12= icmp slt i32 %11, 10     ; j<10
  br i1 %12, label %13, label %66     

13:     ; while Body
  store i32 0, i32* %2     ; k=i32 0
  br label %14     

14:     ; judge k<5
  %15 = load i32, i32* %2     
  %16= icmp slt i32 %15, 5     ; k<5
  br i1 %16, label %17, label %63     

17:     ; while Body
  store i32 0, i32* %1     ; m=i32 0
  br label %18     

18:     ; judge m<3
  %19 = load i32, i32* %1     
  %20= icmp slt i32 %19, 3     ; m<3
  br i1 %20, label %21, label %54     

21:     ; while Body
  %22 = load i32, i32* %1     
  %23 = add i32 %22, 1     ; m+1
  %24= icmp sge i32 %23, 3     ; m+1>=3
  br i1 %24, label %25, label %42     ; judge m+1>=3

25:     ; if Body
  %26 = load i32, i32* %1     
  %27= icmp ne i32 %26, 0     
  br i1 %27, label %28, label %41     ; judge m

28:     ; if Body
  %29 = load i32, i32* %1     
  %30= icmp ne i32 %29, 0     
  br i1 %30, label %34, label %31     

31:     
  %32 = load i32, i32* %1     ; !m
  %33= icmp eq i32 %32, 0     ; m || !m
  br i1 %33, label %34, label %40     ; judge m||!m

34:     ; if Body
  %35 = load i32, i32* %1     
  %36 = sub i32 %35, -1     ; m--1
  %37= icmp sge i32 %36, 3     ; m--1>=3
  br i1 %37, label %38, label %39     ; judge m--1>=3

38:     ; if Body
  br label %54     

39:     
  br label %40     

40:     
  br label %41     

41:     
  br label %42     

42:     
  store i32 0, i32* %0     ; n=i32 0
  br label %43     

43:     ; judge n<2
  %44 = load i32, i32* %0     
  %45= icmp slt i32 %44, 2     ; n<2
  br i1 %45, label %46, label %49     

46:     ; while Body
  %47 = load i32, i32* %0     
  %48 = add i32 %47, 1     ; n+1
  store i32 %48, i32* %0     ; n=n+1
  br label %43     

49:     ; exit while
  %50 = load i32, i32* %1     
  %51 = add i32 %50, 1     ; m+1
  store i32 %51, i32* %1     ; m=m+1
  %52 = load i32, i32* %5     
  %53 = add i32 %52, 1     ; sum+1
  store i32 %53, i32* %5     ; sum=sum+1
  br label %18     

54:     ; exit while
  br label %55     

55:     ; judge 1
  br i1 1, label %56, label %60     

56:     ; while Body
  br label %57     

57:     ; judge 1
  br i1 1, label %58, label %59     

58:     ; while Body
  br label %59     

59:     ; exit while
  br label %60     

60:     ; exit while
  %61 = load i32, i32* %2     
  %62 = add i32 %61, 1     ; k+1
  store i32 %62, i32* %2     ; k=k+1
  br label %14     

63:     ; exit while
  %64 = load i32, i32* %3     
  %65 = add i32 %64, 1     ; j+1
  store i32 %65, i32* %3     ; j=j+1
  br label %10     

66:     ; exit while
  %67 = load i32, i32* %4     
  %68 = add i32 %67, 1     ; i+1
  store i32 %68, i32* %4     ; i=i+1
  br label %6     

69:     ; exit while
  %70 = load i32, i32* %5     
  store i32 %70, i32* %ret     
  br label %retBB     

retBB:     
  %71 = load i32, i32* %ret     
  ret i32 %71     
}

