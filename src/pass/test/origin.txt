@size = dso_local global [10 x i32] zeroinitializer
@to = dso_local global [10 x [10 x i32]] zeroinitializer
@cap = dso_local global [10 x [10 x i32]] zeroinitializer
@rev = dso_local global [10 x [10 x i32]] zeroinitializer
@used = dso_local global [10 x i32] zeroinitializer

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime(i32)
declare void @_sysy_stoptime(i32)

define dso_local void @my_memset(i32* %0,i32 %1,i32 %2){
entry:     
  %3 = alloca i32     ; i32 i=0
  %4 = alloca i32     ; i32 n
  %5 = alloca i32     ; i32 val
  %6 = alloca i32*     ; i32* arr
  store i32* %0, i32** %6     
  store i32 %1, i32* %5     
  store i32 %2, i32* %4     
  store i32 0, i32* %3     ; i=i32 0
  br label %7     

7:     ; judge i<n
  %8 = load i32, i32* %3     
  %9 = load i32, i32* %4     
  %10= icmp slt i32 %8, %9     ; i<n
  br i1 %10, label %11, label %18     

11:     ; while Body
  %12 = load i32*, i32** %6     
  %13 = load i32, i32* %3     
  %14= getelementptr i32,i32* %12 , i32 %13     
  %15 = load i32, i32* %5     
  store i32 %15, i32* %14     ; arr[i]=val
  %16 = load i32, i32* %3     
  %17 = add i32 %16, 1     ; i+1
  store i32 %17, i32* %3     ; i=i+1
  br label %7     

18:     ; exit while
  br label %retBB     

retBB:     
  ret void     
}

define dso_local void @add_node(i32 %0,i32 %1,i32 %2){
entry:     
  %3 = alloca i32     ; i32 c
  %4 = alloca i32     ; i32 v
  %5 = alloca i32     ; i32 u
  store i32 %0, i32* %5     
  store i32 %1, i32* %4     
  store i32 %2, i32* %3     
  %6 = load i32, i32* %5     
  %7 = mul i32 %6, 10     
  %8= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @to , i32 0, i32 0     
  %9 = load i32, i32* %5     
  %10= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %11= getelementptr i32,i32* %10 , i32 %9     
  %12 = load i32, i32* %11     
  %13 = add i32 %7, %12     
  %14= getelementptr [10 x i32],[10 x i32]* %8 , i32 0, i32 0     
  %15= getelementptr i32,i32* %14 , i32 %13     
  %16 = load i32, i32* %4     
  store i32 %16, i32* %15     ; to[u][size[u]]=v
  %17 = load i32, i32* %5     
  %18 = mul i32 %17, 10     
  %19= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @cap , i32 0, i32 0     
  %20 = load i32, i32* %5     
  %21= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %22= getelementptr i32,i32* %21 , i32 %20     
  %23 = load i32, i32* %22     
  %24 = add i32 %18, %23     
  %25= getelementptr [10 x i32],[10 x i32]* %19 , i32 0, i32 0     
  %26= getelementptr i32,i32* %25 , i32 %24     
  %27 = load i32, i32* %3     
  store i32 %27, i32* %26     ; cap[u][size[u]]=c
  %28 = load i32, i32* %5     
  %29 = mul i32 %28, 10     
  %30= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @rev , i32 0, i32 0     
  %31 = load i32, i32* %5     
  %32= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %33= getelementptr i32,i32* %32 , i32 %31     
  %34 = load i32, i32* %33     
  %35 = add i32 %29, %34     
  %36= getelementptr [10 x i32],[10 x i32]* %30 , i32 0, i32 0     
  %37= getelementptr i32,i32* %36 , i32 %35     
  %38 = load i32, i32* %4     
  %39= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %40= getelementptr i32,i32* %39 , i32 %38     
  %41 = load i32, i32* %40     
  store i32 %41, i32* %37     ; rev[u][size[u]]=size[v]
  %42 = load i32, i32* %4     
  %43 = mul i32 %42, 10     
  %44= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @to , i32 0, i32 0     
  %45 = load i32, i32* %4     
  %46= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %47= getelementptr i32,i32* %46 , i32 %45     
  %48 = load i32, i32* %47     
  %49 = add i32 %43, %48     
  %50= getelementptr [10 x i32],[10 x i32]* %44 , i32 0, i32 0     
  %51= getelementptr i32,i32* %50 , i32 %49     
  %52 = load i32, i32* %5     
  store i32 %52, i32* %51     ; to[v][size[v]]=u
  %53 = load i32, i32* %4     
  %54 = mul i32 %53, 10     
  %55= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @cap , i32 0, i32 0     
  %56 = load i32, i32* %4     
  %57= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %58= getelementptr i32,i32* %57 , i32 %56     
  %59 = load i32, i32* %58     
  %60 = add i32 %54, %59     
  %61= getelementptr [10 x i32],[10 x i32]* %55 , i32 0, i32 0     
  %62= getelementptr i32,i32* %61 , i32 %60     
  store i32 0, i32* %62     ; cap[v][size[v]]=0
  %63 = load i32, i32* %4     
  %64 = mul i32 %63, 10     
  %65= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @rev , i32 0, i32 0     
  %66 = load i32, i32* %4     
  %67= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %68= getelementptr i32,i32* %67 , i32 %66     
  %69 = load i32, i32* %68     
  %70 = add i32 %64, %69     
  %71= getelementptr [10 x i32],[10 x i32]* %65 , i32 0, i32 0     
  %72= getelementptr i32,i32* %71 , i32 %70     
  %73 = load i32, i32* %5     
  %74= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %75= getelementptr i32,i32* %74 , i32 %73     
  %76 = load i32, i32* %75     
  store i32 %76, i32* %72     ; rev[v][size[v]]=size[u]
  %77 = load i32, i32* %5     
  %78= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %79= getelementptr i32,i32* %78 , i32 %77     
  %80 = load i32, i32* %5     
  %81= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %82= getelementptr i32,i32* %81 , i32 %80     
  %83 = load i32, i32* %82     
  %84 = add i32 %83, 1     ; size[u]+1
  store i32 %84, i32* %79     ; size[u]=size[u]+1
  %85 = load i32, i32* %4     
  %86= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %87= getelementptr i32,i32* %86 , i32 %85     
  %88 = load i32, i32* %4     
  %89= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %90= getelementptr i32,i32* %89 , i32 %88     
  %91 = load i32, i32* %90     
  %92 = add i32 %91, 1     ; size[v]+1
  store i32 %92, i32* %87     ; size[v]=size[v]+1
  br label %retBB     

retBB:     
  ret void     
}

define dso_local i32 @dfs(i32 %0,i32 %1,i32 %2){
entry:     
  %3 = alloca i32     ; i32 d=dfs(to[s][i],t,min_f)
  %4 = alloca i32     ; i32 min_f
  %5 = alloca i32     ; i32 i=0
  %6 = alloca i32     ; i32 f
  %7 = alloca i32     ; i32 t
  %8 = alloca i32     ; i32 s
  %ret = alloca i32     
  store i32 %0, i32* %8     
  store i32 %1, i32* %7     
  store i32 %2, i32* %6     
  %9 = load i32, i32* %8     
  %10 = load i32, i32* %7     
  %11= icmp eq i32 %9, %10     ; s==t
  br i1 %11, label %12, label %14     ; judge s==t

12:     ; if Body
  %13 = load i32, i32* %6     
  store i32 %13, i32* %ret     
  br label %retBB     

14:     
  %15 = load i32, i32* %8     
  %16= getelementptr [10 x i32],[10 x i32]* @used , i32 0, i32 0     
  %17= getelementptr i32,i32* %16 , i32 %15     
  store i32 1, i32* %17     ; used[s]=1
  store i32 0, i32* %5     ; i=i32 0
  br label %18     

18:     ; judge i<size[s]
  %19 = load i32, i32* %5     
  %20 = load i32, i32* %8     
  %21= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  %22= getelementptr i32,i32* %21 , i32 %20     
  %23 = load i32, i32* %22     
  %24= icmp slt i32 %19, %23     ; i<size[s]
  br i1 %24, label %25, label %157     

25:     ; while Body
  %26 = load i32, i32* %8     
  %27 = mul i32 %26, 10     
  %28= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @to , i32 0, i32 0     
  %29 = load i32, i32* %5     
  %30 = add i32 %27, %29     
  %31= getelementptr [10 x i32],[10 x i32]* %28 , i32 0, i32 0     
  %32= getelementptr i32,i32* %31 , i32 %30     
  %33 = load i32, i32* %32     
  %34= getelementptr [10 x i32],[10 x i32]* @used , i32 0, i32 0     
  %35= getelementptr i32,i32* %34 , i32 %33     
  %36 = load i32, i32* %35     
  %37= icmp ne i32 %36, 0     
  br i1 %37, label %38, label %41     ; judge used[to[s][i]]

38:     ; if Body
  %39 = load i32, i32* %5     
  %40 = add i32 %39, 1     ; i+1
  store i32 %40, i32* %5     ; i=i+1
  br label %18     

41:     
  %42 = load i32, i32* %8     
  %43 = mul i32 %42, 10     
  %44= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @cap , i32 0, i32 0     
  %45 = load i32, i32* %5     
  %46 = add i32 %43, %45     
  %47= getelementptr [10 x i32],[10 x i32]* %44 , i32 0, i32 0     
  %48= getelementptr i32,i32* %47 , i32 %46     
  %49 = load i32, i32* %48     
  %50= icmp sle i32 %49, 0     ; cap[s][i]<=0
  br i1 %50, label %51, label %54     ; judge cap[s][i]<=0

51:     ; if Body
  %52 = load i32, i32* %5     
  %53 = add i32 %52, 1     ; i+1
  store i32 %53, i32* %5     ; i=i+1
  br label %18     

54:     
  %55 = load i32, i32* %6     
  %56 = load i32, i32* %8     
  %57 = mul i32 %56, 10     
  %58= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @cap , i32 0, i32 0     
  %59 = load i32, i32* %5     
  %60 = add i32 %57, %59     
  %61= getelementptr [10 x i32],[10 x i32]* %58 , i32 0, i32 0     
  %62= getelementptr i32,i32* %61 , i32 %60     
  %63 = load i32, i32* %62     
  %64= icmp slt i32 %55, %63     ; f<cap[s][i]
  br i1 %64, label %65, label %67     ; judge f<cap[s][i]

65:     ; if Body
  %66 = load i32, i32* %6     
  store i32 %66, i32* %4     ; min_f=f
  br label %76     

67:     ; else Body
  %68 = load i32, i32* %8     
  %69 = mul i32 %68, 10     
  %70= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @cap , i32 0, i32 0     
  %71 = load i32, i32* %5     
  %72 = add i32 %69, %71     
  %73= getelementptr [10 x i32],[10 x i32]* %70 , i32 0, i32 0     
  %74= getelementptr i32,i32* %73 , i32 %72     
  %75 = load i32, i32* %74     
  store i32 %75, i32* %4     ; min_f=cap[s][i]
  br label %76     

76:     
  %77 = load i32, i32* %8     
  %78 = mul i32 %77, 10     
  %79= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @to , i32 0, i32 0     
  %80 = load i32, i32* %5     
  %81 = add i32 %78, %80     
  %82= getelementptr [10 x i32],[10 x i32]* %79 , i32 0, i32 0     
  %83= getelementptr i32,i32* %82 , i32 %81     
  %84 = load i32, i32* %83     
  %85 = load i32, i32* %7     
  %86 = load i32, i32* %4     
  %87 = call i32 @dfs(i32 %84,i32 %85,i32 %86)     ; call dfs(to[s][i],t,min_f)
  store i32 %87, i32* %3     ; d= = call i32 @dfs(i32 ,i32 ,i32 )
  %88 = load i32, i32* %3     
  %89= icmp sgt i32 %88, 0     ; d>0
  br i1 %89, label %90, label %154     ; judge d>0

90:     ; if Body
  %91 = load i32, i32* %8     
  %92 = mul i32 %91, 10     
  %93= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @cap , i32 0, i32 0     
  %94 = load i32, i32* %5     
  %95 = add i32 %92, %94     
  %96= getelementptr [10 x i32],[10 x i32]* %93 , i32 0, i32 0     
  %97= getelementptr i32,i32* %96 , i32 %95     
  %98 = load i32, i32* %8     
  %99 = mul i32 %98, 10     
  %100= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @cap , i32 0, i32 0     
  %101 = load i32, i32* %5     
  %102 = add i32 %99, %101     
  %103= getelementptr [10 x i32],[10 x i32]* %100 , i32 0, i32 0     
  %104= getelementptr i32,i32* %103 , i32 %102     
  %105 = load i32, i32* %104     
  %106 = load i32, i32* %3     
  %107 = sub i32 %105, %106     ; cap[s][i]-d
  store i32 %107, i32* %97     ; cap[s][i]=cap[s][i]-d
  %108 = load i32, i32* %8     
  %109 = mul i32 %108, 10     
  %110= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @to , i32 0, i32 0     
  %111 = load i32, i32* %5     
  %112 = add i32 %109, %111     
  %113= getelementptr [10 x i32],[10 x i32]* %110 , i32 0, i32 0     
  %114= getelementptr i32,i32* %113 , i32 %112     
  %115 = load i32, i32* %114     
  %116 = mul i32 %115, 10     
  %117= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @cap , i32 0, i32 0     
  %118 = load i32, i32* %8     
  %119 = mul i32 %118, 10     
  %120= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @rev , i32 0, i32 0     
  %121 = load i32, i32* %5     
  %122 = add i32 %119, %121     
  %123= getelementptr [10 x i32],[10 x i32]* %120 , i32 0, i32 0     
  %124= getelementptr i32,i32* %123 , i32 %122     
  %125 = load i32, i32* %124     
  %126 = add i32 %116, %125     
  %127= getelementptr [10 x i32],[10 x i32]* %117 , i32 0, i32 0     
  %128= getelementptr i32,i32* %127 , i32 %126     
  %129 = load i32, i32* %8     
  %130 = mul i32 %129, 10     
  %131= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @to , i32 0, i32 0     
  %132 = load i32, i32* %5     
  %133 = add i32 %130, %132     
  %134= getelementptr [10 x i32],[10 x i32]* %131 , i32 0, i32 0     
  %135= getelementptr i32,i32* %134 , i32 %133     
  %136 = load i32, i32* %135     
  %137 = mul i32 %136, 10     
  %138= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @cap , i32 0, i32 0     
  %139 = load i32, i32* %8     
  %140 = mul i32 %139, 10     
  %141= getelementptr [10 x [10 x i32]],[10 x [10 x i32]]* @rev , i32 0, i32 0     
  %142 = load i32, i32* %5     
  %143 = add i32 %140, %142     
  %144= getelementptr [10 x i32],[10 x i32]* %141 , i32 0, i32 0     
  %145= getelementptr i32,i32* %144 , i32 %143     
  %146 = load i32, i32* %145     
  %147 = add i32 %137, %146     
  %148= getelementptr [10 x i32],[10 x i32]* %138 , i32 0, i32 0     
  %149= getelementptr i32,i32* %148 , i32 %147     
  %150 = load i32, i32* %149     
  %151 = load i32, i32* %3     
  %152 = add i32 %150, %151     ; cap[to[s][i]][rev[s][i]]+d
  store i32 %152, i32* %128     ; cap[to[s][i]][rev[s][i]]=cap[to[s][i]][rev[s][i]]+d
  %153 = load i32, i32* %3     
  store i32 %153, i32* %ret     
  br label %retBB     

154:     
  %155 = load i32, i32* %5     
  %156 = add i32 %155, 1     ; i+1
  store i32 %156, i32* %5     ; i=i+1
  br label %18     

157:     ; exit while
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %158 = load i32, i32* %ret     
  ret i32 %158     
}

define dso_local i32 @max_flow(i32 %0,i32 %1){
entry:     
  %2 = alloca i32     ; i32 f=dfs(s,t,INF)
  %3 = alloca i32     ; i32 flow=0
  %4 = alloca i32     ; i32 t
  %5 = alloca i32     ; i32 s
  %ret = alloca i32     
  store i32 %0, i32* %5     
  store i32 %1, i32* %4     
  store i32 0, i32* %3     ; flow=i32 0
  br label %6     

6:     ; judge 1
  br i1 1, label %7, label %20     

7:     ; while Body
  %8= getelementptr [10 x i32],[10 x i32]* @used , i32 0, i32 0     
  call void @my_memset(i32* %8,i32 0,i32 10)     ; call my_memset(used,0,10)
  %9 = load i32, i32* %5     
  %10 = load i32, i32* %4     
  %11 = call i32 @dfs(i32 %9,i32 %10,i32 1879048192)     ; call dfs(s,t,INF)
  store i32 %11, i32* %2     ; f= = call i32 @dfs(i32 ,i32 ,i32 1879048192)
  %12 = load i32, i32* %2     
  %13= icmp eq i32 %12, 0     ; f==0
  br i1 %13, label %14, label %16     ; judge f==0

14:     ; if Body
  %15 = load i32, i32* %3     
  store i32 %15, i32* %ret     
  br label %retBB     

16:     
  %17 = load i32, i32* %3     
  %18 = load i32, i32* %2     
  %19 = add i32 %17, %18     ; flow+f
  store i32 %19, i32* %3     ; flow=flow+f
  br label %6     

20:     ; exit while
  br label %retBB     

retBB:     
  %21 = load i32, i32* %ret     
  ret i32 %21     
}

define dso_local i32 @main(){
entry:     
  %0 = alloca i32     ; i32 c=getint()
  %1 = alloca i32     ; i32 v
  %2 = alloca i32     ; i32 u
  %3 = alloca i32     ; i32 E
  %4 = alloca i32     ; i32 V
  %ret = alloca i32     
  %5 = call i32 @getint()     ; call getint()
  store i32 %5, i32* %4     ; V=getint()
  %6 = call i32 @getint()     ; call getint()
  store i32 %6, i32* %3     ; E=getint()
  %7= getelementptr [10 x i32],[10 x i32]* @size , i32 0, i32 0     
  call void @my_memset(i32* %7,i32 0,i32 10)     ; call my_memset(size,0,10)
  br label %8     

8:     ; judge E>0
  %9 = load i32, i32* %3     
  %10= icmp sgt i32 %9, 0     ; E>0
  br i1 %10, label %11, label %20     

11:     ; while Body
  %12 = call i32 @getint()     ; call getint()
  store i32 %12, i32* %2     ; u=getint()
  %13 = call i32 @getint()     ; call getint()
  store i32 %13, i32* %1     ; v=getint()
  %14 = call i32 @getint()     ; call getint()
  store i32 %14, i32* %0     ; c= = call i32 @getint()
  %15 = load i32, i32* %2     
  %16 = load i32, i32* %1     
  %17 = load i32, i32* %0     
  call void @add_node(i32 %15,i32 %16,i32 %17)     ; call add_node(u,v,c)
  %18 = load i32, i32* %3     
  %19 = sub i32 %18, 1     ; E-1
  store i32 %19, i32* %3     ; E=E-1
  br label %8     

20:     ; exit while
  %21 = load i32, i32* %4     
  %22 = call i32 @max_flow(i32 1,i32 %21)     ; call max_flow(1,V)
  call void @putint(i32 %22)     ; call putint(max_flow(1,V))
  call void @putch(i32 10)     ; call putch(10)
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %23 = load i32, i32* %ret     
  ret i32 %23     
}

