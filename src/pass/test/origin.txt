declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime(i32)
declare void @_sysy_stoptime(i32)

define dso_local void @reverse(i32 %0){
entry:     
  %1 = alloca i32     ; i32 next
  %2 = alloca i32     ; i32 n
  store i32 %0, i32* %2     
  %3 = load i32, i32* %2     
  %4= icmp sle i32 %3, 1     ; n<=1
  br i1 %4, label %5, label %8     ; judge n<=1

5:     ; if Body
  %6 = call i32 @getint()     ; call getint()
  store i32 %6, i32* %1     ; next=getint()
  %7 = load i32, i32* %1     
  call void @putint(i32 %7)     ; call putint(next)
  br label %13     

8:     ; else Body
  %9 = call i32 @getint()     ; call getint()
  store i32 %9, i32* %1     ; next=getint()
  %10 = load i32, i32* %2     
  %11 = sub i32 %10, 1     ; n-1
  call void @reverse(i32 %11)     ; call reverse(n-1)
  %12 = load i32, i32* %1     
  call void @putint(i32 %12)     ; call putint(next)
  br label %13     

13:     
  br label %retBB     

retBB:     
  ret void     
}

define dso_local i32 @main(){
entry:     
  %0 = alloca i32     ; i32 i=200
  %ret = alloca i32     
  store i32 200, i32* %0     ; i=i32 200
  %1 = load i32, i32* %0     
  call void @reverse(i32 %1)     ; call reverse(i)
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %2 = load i32, i32* %ret     
  ret i32 %2     
}

