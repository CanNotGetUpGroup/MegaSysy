@SHIFT_TABLE = dso_local constant [16 x i32] [i32 1,i32 2,i32 4,i32 8,i32 16,i32 32,i32 64,i32 128,i32 256,i32 512,i32 1024,i32 2048,i32 4096,i32 8192,i32 16384,i32 32768]

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime(i32)
declare void @_sysy_stoptime(i32)

define dso_local i32 @long_func(){
entry:     
  %0 = alloca i32     ; i32 sum
  %1 = alloca i32     ; i32 c=ml
  %2 = alloca i32     ; i32 al=ml
  %3 = alloca i32     ; i32 sum
  %4 = alloca i32     ; i32 c=ml
  %5 = alloca i32     ; i32 al=mres
  %6 = alloca i32     ; i32 mres=0
  %7 = alloca i32     ; i32 mr=pl
  %8 = alloca i32     ; i32 ml=pl
  %9 = alloca i32     ; i32 sum
  %10 = alloca i32     ; i32 c=ml
  %11 = alloca i32     ; i32 al=ml
  %12 = alloca i32     ; i32 sum
  %13 = alloca i32     ; i32 c=ml
  %14 = alloca i32     ; i32 al=mres
  %15 = alloca i32     ; i32 mres=0
  %16 = alloca i32     ; i32 mr=pl
  %17 = alloca i32     ; i32 ml=pres
  %18 = alloca i32     ; i32 pres=1
  %19 = alloca i32     ; i32 pr=cur
  %20 = alloca i32     ; i32 pl=2
  %21 = alloca i32     ; i32 sum
  %22 = alloca i32     ; i32 c=ml
  %23 = alloca i32     ; i32 al=ml
  %24 = alloca i32     ; i32 sum
  %25 = alloca i32     ; i32 c=ml
  %26 = alloca i32     ; i32 al=mres
  %27 = alloca i32     ; i32 mres=0
  %28 = alloca i32     ; i32 mr=pl
  %29 = alloca i32     ; i32 ml=pl
  %30 = alloca i32     ; i32 sum
  %31 = alloca i32     ; i32 c=ml
  %32 = alloca i32     ; i32 al=ml
  %33 = alloca i32     ; i32 sum
  %34 = alloca i32     ; i32 c=ml
  %35 = alloca i32     ; i32 al=mres
  %36 = alloca i32     ; i32 mres=0
  %37 = alloca i32     ; i32 mr=pl
  %38 = alloca i32     ; i32 ml=pres
  %39 = alloca i32     ; i32 pres=1
  %40 = alloca i32     ; i32 pr=cur
  %41 = alloca i32     ; i32 pl=2
  %42 = alloca i32     ; i32 sum
  %43 = alloca i32     ; i32 c=ml
  %44 = alloca i32     ; i32 al=ml
  %45 = alloca i32     ; i32 sum
  %46 = alloca i32     ; i32 c=ml
  %47 = alloca i32     ; i32 al=mres
  %48 = alloca i32     ; i32 mres=0
  %49 = alloca i32     ; i32 mr=pl
  %50 = alloca i32     ; i32 ml=pl
  %51 = alloca i32     ; i32 sum
  %52 = alloca i32     ; i32 c=ml
  %53 = alloca i32     ; i32 al=ml
  %54 = alloca i32     ; i32 sum
  %55 = alloca i32     ; i32 c=ml
  %56 = alloca i32     ; i32 al=mres
  %57 = alloca i32     ; i32 mres=0
  %58 = alloca i32     ; i32 mr=pl
  %59 = alloca i32     ; i32 ml=pres
  %60 = alloca i32     ; i32 pres=1
  %61 = alloca i32     ; i32 pr=1
  %62 = alloca i32     ; i32 pl=2
  %63 = alloca i32     ; i32 sum
  %64 = alloca i32     ; i32 c=ml
  %65 = alloca i32     ; i32 al=ml
  %66 = alloca i32     ; i32 sum
  %67 = alloca i32     ; i32 c=ml
  %68 = alloca i32     ; i32 al=mres
  %69 = alloca i32     ; i32 mres=0
  %70 = alloca i32     ; i32 mr=pl
  %71 = alloca i32     ; i32 ml=pl
  %72 = alloca i32     ; i32 sum
  %73 = alloca i32     ; i32 c=ml
  %74 = alloca i32     ; i32 al=ml
  %75 = alloca i32     ; i32 sum
  %76 = alloca i32     ; i32 c=ml
  %77 = alloca i32     ; i32 al=mres
  %78 = alloca i32     ; i32 mres=0
  %79 = alloca i32     ; i32 mr=pl
  %80 = alloca i32     ; i32 ml=pres
  %81 = alloca i32     ; i32 pres=1
  %82 = alloca i32     ; i32 pr=0
  %83 = alloca i32     ; i32 pl=2
  %84 = alloca i32     ; i32 cur
  %85 = alloca i32     ; i32 y
  %86 = alloca i32     ; i32 x
  %87 = alloca i32     ; i32 i
  %88 = alloca i32     ; i32 ans
  %ret = alloca i32     
  store i32 2, i32* %83     ; pl=i32 2
  store i32 0, i32* %82     ; pr=i32 0
  store i32 1, i32* %81     ; pres=i32 1
  br label %89     

89:     ; judge pr>0
  %90 = load i32, i32* %82     
  %91= icmp sgt i32 %90, 0     ; pr>0
  br i1 %91, label %92, label %822     

92:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %93 = load i32, i32* %82     
  store i32 %93, i32* %86     ; x=pr
  store i32 1, i32* %85     ; y=1
  br label %94     

94:     ; judge i<16
  %95 = load i32, i32* %87     
  %96= icmp slt i32 %95, 16     ; i<16
  br i1 %96, label %97, label %120     

97:     ; while Body
  %98 = load i32, i32* %86     
  %99 = srem i32 %98, 2     ; x%2
  %100= icmp ne i32 %99, 0     
  br i1 %100, label %101, label %113     

101:     
  %102 = load i32, i32* %85     
  %103 = srem i32 %102, 2     ; x%2 && y%2
  %104= icmp ne i32 %103, 0     
  br i1 %104, label %105, label %113     ; judge x%2&&y%2

105:     ; if Body
  %106 = load i32, i32* %88     
  %107 = load i32, i32* %87     
  %108 = load i32, i32* %87     
  %109= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %110= getelementptr i32,i32* %109 , i32 %108     
  %111 = load i32, i32* %110     ; 1*SHIFT_TABLE[i]
  %112 = add i32 %106, %111     ; ans+1*SHIFT_TABLE[i]
  store i32 %112, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %113     

113:     
  %114 = load i32, i32* %86     
  %115 = sdiv i32 %114, 2     ; x/2
  store i32 %115, i32* %86     ; x=x/2
  %116 = load i32, i32* %85     
  %117 = sdiv i32 %116, 2     ; y/2
  store i32 %117, i32* %85     ; y=y/2
  %118 = load i32, i32* %87     
  %119 = add i32 %118, 1     ; i+1
  store i32 %119, i32* %87     ; i=i+1
  br label %94     

120:     ; exit while
  %121 = load i32, i32* %88     
  %122= icmp ne i32 %121, 0     
  br i1 %122, label %123, label %448     ; judge ans

123:     ; if Body
  %124 = load i32, i32* %81     
  store i32 %124, i32* %80     ; ml= = load i32, i32* 
  %125 = load i32, i32* %83     
  store i32 %125, i32* %79     ; mr= = load i32, i32* 
  store i32 0, i32* %78     ; mres=i32 0
  br label %126     

126:     ; judge mr
  %127 = load i32, i32* %79     
  %128= icmp ne i32 %127, 0     
  br i1 %128, label %129, label %445     

129:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %130 = load i32, i32* %79     
  store i32 %130, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  br label %131     

131:     ; judge i<16
  %132 = load i32, i32* %87     
  %133= icmp slt i32 %132, 16     ; i<16
  br i1 %133, label %134, label %157     

134:     ; while Body
  %135 = load i32, i32* %86     
  %136 = srem i32 %135, 2     ; x%2
  %137= icmp ne i32 %136, 0     
  br i1 %137, label %138, label %150     

138:     
  %139 = load i32, i32* %85     
  %140 = srem i32 %139, 2     ; x%2 && y%2
  %141= icmp ne i32 %140, 0     
  br i1 %141, label %142, label %150     ; judge x%2&&y%2

142:     ; if Body
  %143 = load i32, i32* %88     
  %144 = load i32, i32* %87     
  %145 = load i32, i32* %87     
  %146= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %147= getelementptr i32,i32* %146 , i32 %145     
  %148 = load i32, i32* %147     ; 1*SHIFT_TABLE[i]
  %149 = add i32 %143, %148     ; ans+1*SHIFT_TABLE[i]
  store i32 %149, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %150     

150:     
  %151 = load i32, i32* %86     
  %152 = sdiv i32 %151, 2     ; x/2
  store i32 %152, i32* %86     ; x=x/2
  %153 = load i32, i32* %85     
  %154 = sdiv i32 %153, 2     ; y/2
  store i32 %154, i32* %85     ; y=y/2
  %155 = load i32, i32* %87     
  %156 = add i32 %155, 1     ; i+1
  store i32 %156, i32* %87     ; i=i+1
  br label %131     

157:     ; exit while
  %158 = load i32, i32* %88     
  %159= icmp ne i32 %158, 0     
  br i1 %159, label %160, label %278     ; judge ans

160:     ; if Body
  %161 = load i32, i32* %78     
  store i32 %161, i32* %77     ; al= = load i32, i32* 
  %162 = load i32, i32* %80     
  store i32 %162, i32* %76     ; c= = load i32, i32* 
  br label %163     

163:     ; judge c
  %164 = load i32, i32* %76     
  %165= icmp ne i32 %164, 0     
  br i1 %165, label %166, label %275     

166:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %167 = load i32, i32* %77     
  store i32 %167, i32* %86     ; x=al
  %168 = load i32, i32* %76     
  store i32 %168, i32* %85     ; y=c
  br label %169     

169:     ; judge i<16
  %170 = load i32, i32* %87     
  %171= icmp slt i32 %170, 16     ; i<16
  br i1 %171, label %172, label %209     

172:     ; while Body
  %173 = load i32, i32* %86     
  %174 = srem i32 %173, 2     ; x%2
  %175= icmp ne i32 %174, 0     
  br i1 %175, label %176, label %189     ; judge x%2

176:     ; if Body
  %177 = load i32, i32* %85     
  %178 = srem i32 %177, 2     ; y%2
  %179= icmp eq i32 %178, 0     ; y%2==0
  br i1 %179, label %180, label %188     ; judge y%2==0

180:     ; if Body
  %181 = load i32, i32* %88     
  %182 = load i32, i32* %87     
  %183 = load i32, i32* %87     
  %184= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %185= getelementptr i32,i32* %184 , i32 %183     
  %186 = load i32, i32* %185     ; 1*SHIFT_TABLE[i]
  %187 = add i32 %181, %186     ; ans+1*SHIFT_TABLE[i]
  store i32 %187, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %188     

188:     
  br label %202     

189:     ; else Body
  %190 = load i32, i32* %85     
  %191 = srem i32 %190, 2     ; y%2
  %192= icmp ne i32 %191, 0     
  br i1 %192, label %193, label %201     ; judge y%2

193:     ; if Body
  %194 = load i32, i32* %88     
  %195 = load i32, i32* %87     
  %196 = load i32, i32* %87     
  %197= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %198= getelementptr i32,i32* %197 , i32 %196     
  %199 = load i32, i32* %198     ; 1*SHIFT_TABLE[i]
  %200 = add i32 %194, %199     ; ans+1*SHIFT_TABLE[i]
  store i32 %200, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %201     

201:     
  br label %202     

202:     
  %203 = load i32, i32* %86     
  %204 = sdiv i32 %203, 2     ; x/2
  store i32 %204, i32* %86     ; x=x/2
  %205 = load i32, i32* %85     
  %206 = sdiv i32 %205, 2     ; y/2
  store i32 %206, i32* %85     ; y=y/2
  %207 = load i32, i32* %87     
  %208 = add i32 %207, 1     ; i+1
  store i32 %208, i32* %87     ; i=i+1
  br label %169     

209:     ; exit while
  %210 = load i32, i32* %88     
  store i32 %210, i32* %75     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %211 = load i32, i32* %77     
  store i32 %211, i32* %86     ; x=al
  %212 = load i32, i32* %76     
  store i32 %212, i32* %85     ; y=c
  br label %213     

213:     ; judge i<16
  %214 = load i32, i32* %87     
  %215= icmp slt i32 %214, 16     ; i<16
  br i1 %215, label %216, label %239     

216:     ; while Body
  %217 = load i32, i32* %86     
  %218 = srem i32 %217, 2     ; x%2
  %219= icmp ne i32 %218, 0     
  br i1 %219, label %220, label %232     

220:     
  %221 = load i32, i32* %85     
  %222 = srem i32 %221, 2     ; x%2 && y%2
  %223= icmp ne i32 %222, 0     
  br i1 %223, label %224, label %232     ; judge x%2&&y%2

224:     ; if Body
  %225 = load i32, i32* %88     
  %226 = load i32, i32* %87     
  %227 = load i32, i32* %87     
  %228= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %229= getelementptr i32,i32* %228 , i32 %227     
  %230 = load i32, i32* %229     ; 1*SHIFT_TABLE[i]
  %231 = add i32 %225, %230     ; ans+1*SHIFT_TABLE[i]
  store i32 %231, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %232     

232:     
  %233 = load i32, i32* %86     
  %234 = sdiv i32 %233, 2     ; x/2
  store i32 %234, i32* %86     ; x=x/2
  %235 = load i32, i32* %85     
  %236 = sdiv i32 %235, 2     ; y/2
  store i32 %236, i32* %85     ; y=y/2
  %237 = load i32, i32* %87     
  %238 = add i32 %237, 1     ; i+1
  store i32 %238, i32* %87     ; i=i+1
  br label %213     

239:     ; exit while
  %240 = load i32, i32* %88     
  store i32 %240, i32* %76     ; c=ans
  br i1 0, label %241, label %242     ; judge (1)>15

241:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %272     

242:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %243 = load i32, i32* %76     
  %244 = mul i32 %243, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %244, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %245     

245:     ; judge i<16
  %246 = load i32, i32* %87     
  %247= icmp slt i32 %246, 16     ; i<16
  br i1 %247, label %248, label %271     

248:     ; while Body
  %249 = load i32, i32* %86     
  %250 = srem i32 %249, 2     ; x%2
  %251= icmp ne i32 %250, 0     
  br i1 %251, label %252, label %264     

252:     
  %253 = load i32, i32* %85     
  %254 = srem i32 %253, 2     ; x%2 && y%2
  %255= icmp ne i32 %254, 0     
  br i1 %255, label %256, label %264     ; judge x%2&&y%2

256:     ; if Body
  %257 = load i32, i32* %88     
  %258 = load i32, i32* %87     
  %259 = load i32, i32* %87     
  %260= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %261= getelementptr i32,i32* %260 , i32 %259     
  %262 = load i32, i32* %261     ; 1*SHIFT_TABLE[i]
  %263 = add i32 %257, %262     ; ans+1*SHIFT_TABLE[i]
  store i32 %263, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %264     

264:     
  %265 = load i32, i32* %86     
  %266 = sdiv i32 %265, 2     ; x/2
  store i32 %266, i32* %86     ; x=x/2
  %267 = load i32, i32* %85     
  %268 = sdiv i32 %267, 2     ; y/2
  store i32 %268, i32* %85     ; y=y/2
  %269 = load i32, i32* %87     
  %270 = add i32 %269, 1     ; i+1
  store i32 %270, i32* %87     ; i=i+1
  br label %245     

271:     ; exit while
  br label %272     

272:     
  %273 = load i32, i32* %88     
  store i32 %273, i32* %76     ; c=ans
  %274 = load i32, i32* %75     
  store i32 %274, i32* %77     ; al=sum
  br label %163     

275:     ; exit while
  %276 = load i32, i32* %77     
  store i32 %276, i32* %88     ; ans=al
  %277 = load i32, i32* %88     
  store i32 %277, i32* %78     ; mres=ans
  br label %278     

278:     
  %279 = load i32, i32* %80     
  store i32 %279, i32* %74     ; al= = load i32, i32* 
  %280 = load i32, i32* %80     
  store i32 %280, i32* %73     ; c= = load i32, i32* 
  br label %281     

281:     ; judge c
  %282 = load i32, i32* %73     
  %283= icmp ne i32 %282, 0     
  br i1 %283, label %284, label %393     

284:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %285 = load i32, i32* %74     
  store i32 %285, i32* %86     ; x=al
  %286 = load i32, i32* %73     
  store i32 %286, i32* %85     ; y=c
  br label %287     

287:     ; judge i<16
  %288 = load i32, i32* %87     
  %289= icmp slt i32 %288, 16     ; i<16
  br i1 %289, label %290, label %327     

290:     ; while Body
  %291 = load i32, i32* %86     
  %292 = srem i32 %291, 2     ; x%2
  %293= icmp ne i32 %292, 0     
  br i1 %293, label %294, label %307     ; judge x%2

294:     ; if Body
  %295 = load i32, i32* %85     
  %296 = srem i32 %295, 2     ; y%2
  %297= icmp eq i32 %296, 0     ; y%2==0
  br i1 %297, label %298, label %306     ; judge y%2==0

298:     ; if Body
  %299 = load i32, i32* %88     
  %300 = load i32, i32* %87     
  %301 = load i32, i32* %87     
  %302= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %303= getelementptr i32,i32* %302 , i32 %301     
  %304 = load i32, i32* %303     ; 1*SHIFT_TABLE[i]
  %305 = add i32 %299, %304     ; ans+1*SHIFT_TABLE[i]
  store i32 %305, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %306     

306:     
  br label %320     

307:     ; else Body
  %308 = load i32, i32* %85     
  %309 = srem i32 %308, 2     ; y%2
  %310= icmp ne i32 %309, 0     
  br i1 %310, label %311, label %319     ; judge y%2

311:     ; if Body
  %312 = load i32, i32* %88     
  %313 = load i32, i32* %87     
  %314 = load i32, i32* %87     
  %315= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %316= getelementptr i32,i32* %315 , i32 %314     
  %317 = load i32, i32* %316     ; 1*SHIFT_TABLE[i]
  %318 = add i32 %312, %317     ; ans+1*SHIFT_TABLE[i]
  store i32 %318, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %319     

319:     
  br label %320     

320:     
  %321 = load i32, i32* %86     
  %322 = sdiv i32 %321, 2     ; x/2
  store i32 %322, i32* %86     ; x=x/2
  %323 = load i32, i32* %85     
  %324 = sdiv i32 %323, 2     ; y/2
  store i32 %324, i32* %85     ; y=y/2
  %325 = load i32, i32* %87     
  %326 = add i32 %325, 1     ; i+1
  store i32 %326, i32* %87     ; i=i+1
  br label %287     

327:     ; exit while
  %328 = load i32, i32* %88     
  store i32 %328, i32* %72     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %329 = load i32, i32* %74     
  store i32 %329, i32* %86     ; x=al
  %330 = load i32, i32* %73     
  store i32 %330, i32* %85     ; y=c
  br label %331     

331:     ; judge i<16
  %332 = load i32, i32* %87     
  %333= icmp slt i32 %332, 16     ; i<16
  br i1 %333, label %334, label %357     

334:     ; while Body
  %335 = load i32, i32* %86     
  %336 = srem i32 %335, 2     ; x%2
  %337= icmp ne i32 %336, 0     
  br i1 %337, label %338, label %350     

338:     
  %339 = load i32, i32* %85     
  %340 = srem i32 %339, 2     ; x%2 && y%2
  %341= icmp ne i32 %340, 0     
  br i1 %341, label %342, label %350     ; judge x%2&&y%2

342:     ; if Body
  %343 = load i32, i32* %88     
  %344 = load i32, i32* %87     
  %345 = load i32, i32* %87     
  %346= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %347= getelementptr i32,i32* %346 , i32 %345     
  %348 = load i32, i32* %347     ; 1*SHIFT_TABLE[i]
  %349 = add i32 %343, %348     ; ans+1*SHIFT_TABLE[i]
  store i32 %349, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %350     

350:     
  %351 = load i32, i32* %86     
  %352 = sdiv i32 %351, 2     ; x/2
  store i32 %352, i32* %86     ; x=x/2
  %353 = load i32, i32* %85     
  %354 = sdiv i32 %353, 2     ; y/2
  store i32 %354, i32* %85     ; y=y/2
  %355 = load i32, i32* %87     
  %356 = add i32 %355, 1     ; i+1
  store i32 %356, i32* %87     ; i=i+1
  br label %331     

357:     ; exit while
  %358 = load i32, i32* %88     
  store i32 %358, i32* %73     ; c=ans
  br i1 0, label %359, label %360     ; judge (1)>15

359:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %390     

360:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %361 = load i32, i32* %73     
  %362 = mul i32 %361, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %362, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %363     

363:     ; judge i<16
  %364 = load i32, i32* %87     
  %365= icmp slt i32 %364, 16     ; i<16
  br i1 %365, label %366, label %389     

366:     ; while Body
  %367 = load i32, i32* %86     
  %368 = srem i32 %367, 2     ; x%2
  %369= icmp ne i32 %368, 0     
  br i1 %369, label %370, label %382     

370:     
  %371 = load i32, i32* %85     
  %372 = srem i32 %371, 2     ; x%2 && y%2
  %373= icmp ne i32 %372, 0     
  br i1 %373, label %374, label %382     ; judge x%2&&y%2

374:     ; if Body
  %375 = load i32, i32* %88     
  %376 = load i32, i32* %87     
  %377 = load i32, i32* %87     
  %378= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %379= getelementptr i32,i32* %378 , i32 %377     
  %380 = load i32, i32* %379     ; 1*SHIFT_TABLE[i]
  %381 = add i32 %375, %380     ; ans+1*SHIFT_TABLE[i]
  store i32 %381, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %382     

382:     
  %383 = load i32, i32* %86     
  %384 = sdiv i32 %383, 2     ; x/2
  store i32 %384, i32* %86     ; x=x/2
  %385 = load i32, i32* %85     
  %386 = sdiv i32 %385, 2     ; y/2
  store i32 %386, i32* %85     ; y=y/2
  %387 = load i32, i32* %87     
  %388 = add i32 %387, 1     ; i+1
  store i32 %388, i32* %87     ; i=i+1
  br label %363     

389:     ; exit while
  br label %390     

390:     
  %391 = load i32, i32* %88     
  store i32 %391, i32* %73     ; c=ans
  %392 = load i32, i32* %72     
  store i32 %392, i32* %74     ; al=sum
  br label %281     

393:     ; exit while
  %394 = load i32, i32* %74     
  store i32 %394, i32* %88     ; ans=al
  %395 = load i32, i32* %88     
  store i32 %395, i32* %80     ; ml=ans
  %396 = load i32, i32* %79     
  store i32 %396, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  %397 = load i32, i32* %85     
  %398= icmp sge i32 %397, 15     ; y>=15
  br i1 %398, label %399, label %405     ; judge y>=15

399:     ; if Body
  %400 = load i32, i32* %86     
  %401= icmp slt i32 %400, 0     ; x<0
  br i1 %401, label %402, label %403     ; judge x<0

402:     ; if Body
  store i32 65535, i32* %88     ; ans=0xffff
  br label %404     

403:     ; else Body
  store i32 0, i32* %88     ; ans=0
  br label %404     

404:     
  br label %443     

405:     ; else Body
  %406 = load i32, i32* %85     
  %407= icmp sgt i32 %406, 0     ; y>0
  br i1 %407, label %408, label %440     ; judge y>0

408:     ; if Body
  %409 = load i32, i32* %86     
  %410= icmp sgt i32 %409, 32767     ; x>0x7fff
  br i1 %410, label %411, label %431     ; judge x>0x7fff

411:     ; if Body
  %412 = load i32, i32* %86     
  %413 = load i32, i32* %85     
  %414 = load i32, i32* %85     
  %415= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %416= getelementptr i32,i32* %415 , i32 %414     
  %417 = load i32, i32* %416     
  %418 = sdiv i32 %412, %417     ; x/SHIFT_TABLE[y]
  store i32 %418, i32* %86     ; x=x/SHIFT_TABLE[y]
  %419 = load i32, i32* %86     
  %420 = add i32 %419, 65536     ; x+65536
  %421 = load i32, i32* %85     
  %422 = sub i32 15, %421     ; 15-y
  %423 = add i32 %422, 1     ; 15-y+1
  %424 = load i32, i32* %85     
  %425 = sub i32 15, %424     ; 15-y
  %426 = add i32 %425, 1     ; 15-y+1
  %427= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %428= getelementptr i32,i32* %427 , i32 %426     
  %429 = load i32, i32* %428     
  %430 = sub i32 %420, %429     ; x+65536-SHIFT_TABLE[15-y+1]
  store i32 %430, i32* %88     ; ans=x+65536-SHIFT_TABLE[15-y+1]
  br label %439     

431:     ; else Body
  %432 = load i32, i32* %86     
  %433 = load i32, i32* %85     
  %434 = load i32, i32* %85     
  %435= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %436= getelementptr i32,i32* %435 , i32 %434     
  %437 = load i32, i32* %436     
  %438 = sdiv i32 %432, %437     ; x/SHIFT_TABLE[y]
  store i32 %438, i32* %88     ; ans=x/SHIFT_TABLE[y]
  br label %439     

439:     
  br label %442     

440:     ; else Body
  %441 = load i32, i32* %86     
  store i32 %441, i32* %88     ; ans=x
  br label %442     

442:     
  br label %443     

443:     
  %444 = load i32, i32* %88     
  store i32 %444, i32* %79     ; mr=ans
  br label %126     

445:     ; exit while
  %446 = load i32, i32* %78     
  store i32 %446, i32* %88     ; ans=mres
  %447 = load i32, i32* %88     
  store i32 %447, i32* %81     ; pres=ans
  br label %448     

448:     
  %449 = load i32, i32* %83     
  store i32 %449, i32* %71     ; ml= = load i32, i32* 
  %450 = load i32, i32* %83     
  store i32 %450, i32* %70     ; mr= = load i32, i32* 
  store i32 0, i32* %69     ; mres=i32 0
  br label %451     

451:     ; judge mr
  %452 = load i32, i32* %70     
  %453= icmp ne i32 %452, 0     
  br i1 %453, label %454, label %770     

454:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %455 = load i32, i32* %70     
  store i32 %455, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  br label %456     

456:     ; judge i<16
  %457 = load i32, i32* %87     
  %458= icmp slt i32 %457, 16     ; i<16
  br i1 %458, label %459, label %482     

459:     ; while Body
  %460 = load i32, i32* %86     
  %461 = srem i32 %460, 2     ; x%2
  %462= icmp ne i32 %461, 0     
  br i1 %462, label %463, label %475     

463:     
  %464 = load i32, i32* %85     
  %465 = srem i32 %464, 2     ; x%2 && y%2
  %466= icmp ne i32 %465, 0     
  br i1 %466, label %467, label %475     ; judge x%2&&y%2

467:     ; if Body
  %468 = load i32, i32* %88     
  %469 = load i32, i32* %87     
  %470 = load i32, i32* %87     
  %471= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %472= getelementptr i32,i32* %471 , i32 %470     
  %473 = load i32, i32* %472     ; 1*SHIFT_TABLE[i]
  %474 = add i32 %468, %473     ; ans+1*SHIFT_TABLE[i]
  store i32 %474, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %475     

475:     
  %476 = load i32, i32* %86     
  %477 = sdiv i32 %476, 2     ; x/2
  store i32 %477, i32* %86     ; x=x/2
  %478 = load i32, i32* %85     
  %479 = sdiv i32 %478, 2     ; y/2
  store i32 %479, i32* %85     ; y=y/2
  %480 = load i32, i32* %87     
  %481 = add i32 %480, 1     ; i+1
  store i32 %481, i32* %87     ; i=i+1
  br label %456     

482:     ; exit while
  %483 = load i32, i32* %88     
  %484= icmp ne i32 %483, 0     
  br i1 %484, label %485, label %603     ; judge ans

485:     ; if Body
  %486 = load i32, i32* %69     
  store i32 %486, i32* %68     ; al= = load i32, i32* 
  %487 = load i32, i32* %71     
  store i32 %487, i32* %67     ; c= = load i32, i32* 
  br label %488     

488:     ; judge c
  %489 = load i32, i32* %67     
  %490= icmp ne i32 %489, 0     
  br i1 %490, label %491, label %600     

491:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %492 = load i32, i32* %68     
  store i32 %492, i32* %86     ; x=al
  %493 = load i32, i32* %67     
  store i32 %493, i32* %85     ; y=c
  br label %494     

494:     ; judge i<16
  %495 = load i32, i32* %87     
  %496= icmp slt i32 %495, 16     ; i<16
  br i1 %496, label %497, label %534     

497:     ; while Body
  %498 = load i32, i32* %86     
  %499 = srem i32 %498, 2     ; x%2
  %500= icmp ne i32 %499, 0     
  br i1 %500, label %501, label %514     ; judge x%2

501:     ; if Body
  %502 = load i32, i32* %85     
  %503 = srem i32 %502, 2     ; y%2
  %504= icmp eq i32 %503, 0     ; y%2==0
  br i1 %504, label %505, label %513     ; judge y%2==0

505:     ; if Body
  %506 = load i32, i32* %88     
  %507 = load i32, i32* %87     
  %508 = load i32, i32* %87     
  %509= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %510= getelementptr i32,i32* %509 , i32 %508     
  %511 = load i32, i32* %510     ; 1*SHIFT_TABLE[i]
  %512 = add i32 %506, %511     ; ans+1*SHIFT_TABLE[i]
  store i32 %512, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %513     

513:     
  br label %527     

514:     ; else Body
  %515 = load i32, i32* %85     
  %516 = srem i32 %515, 2     ; y%2
  %517= icmp ne i32 %516, 0     
  br i1 %517, label %518, label %526     ; judge y%2

518:     ; if Body
  %519 = load i32, i32* %88     
  %520 = load i32, i32* %87     
  %521 = load i32, i32* %87     
  %522= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %523= getelementptr i32,i32* %522 , i32 %521     
  %524 = load i32, i32* %523     ; 1*SHIFT_TABLE[i]
  %525 = add i32 %519, %524     ; ans+1*SHIFT_TABLE[i]
  store i32 %525, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %526     

526:     
  br label %527     

527:     
  %528 = load i32, i32* %86     
  %529 = sdiv i32 %528, 2     ; x/2
  store i32 %529, i32* %86     ; x=x/2
  %530 = load i32, i32* %85     
  %531 = sdiv i32 %530, 2     ; y/2
  store i32 %531, i32* %85     ; y=y/2
  %532 = load i32, i32* %87     
  %533 = add i32 %532, 1     ; i+1
  store i32 %533, i32* %87     ; i=i+1
  br label %494     

534:     ; exit while
  %535 = load i32, i32* %88     
  store i32 %535, i32* %66     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %536 = load i32, i32* %68     
  store i32 %536, i32* %86     ; x=al
  %537 = load i32, i32* %67     
  store i32 %537, i32* %85     ; y=c
  br label %538     

538:     ; judge i<16
  %539 = load i32, i32* %87     
  %540= icmp slt i32 %539, 16     ; i<16
  br i1 %540, label %541, label %564     

541:     ; while Body
  %542 = load i32, i32* %86     
  %543 = srem i32 %542, 2     ; x%2
  %544= icmp ne i32 %543, 0     
  br i1 %544, label %545, label %557     

545:     
  %546 = load i32, i32* %85     
  %547 = srem i32 %546, 2     ; x%2 && y%2
  %548= icmp ne i32 %547, 0     
  br i1 %548, label %549, label %557     ; judge x%2&&y%2

549:     ; if Body
  %550 = load i32, i32* %88     
  %551 = load i32, i32* %87     
  %552 = load i32, i32* %87     
  %553= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %554= getelementptr i32,i32* %553 , i32 %552     
  %555 = load i32, i32* %554     ; 1*SHIFT_TABLE[i]
  %556 = add i32 %550, %555     ; ans+1*SHIFT_TABLE[i]
  store i32 %556, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %557     

557:     
  %558 = load i32, i32* %86     
  %559 = sdiv i32 %558, 2     ; x/2
  store i32 %559, i32* %86     ; x=x/2
  %560 = load i32, i32* %85     
  %561 = sdiv i32 %560, 2     ; y/2
  store i32 %561, i32* %85     ; y=y/2
  %562 = load i32, i32* %87     
  %563 = add i32 %562, 1     ; i+1
  store i32 %563, i32* %87     ; i=i+1
  br label %538     

564:     ; exit while
  %565 = load i32, i32* %88     
  store i32 %565, i32* %67     ; c=ans
  br i1 0, label %566, label %567     ; judge (1)>15

566:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %597     

567:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %568 = load i32, i32* %67     
  %569 = mul i32 %568, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %569, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %570     

570:     ; judge i<16
  %571 = load i32, i32* %87     
  %572= icmp slt i32 %571, 16     ; i<16
  br i1 %572, label %573, label %596     

573:     ; while Body
  %574 = load i32, i32* %86     
  %575 = srem i32 %574, 2     ; x%2
  %576= icmp ne i32 %575, 0     
  br i1 %576, label %577, label %589     

577:     
  %578 = load i32, i32* %85     
  %579 = srem i32 %578, 2     ; x%2 && y%2
  %580= icmp ne i32 %579, 0     
  br i1 %580, label %581, label %589     ; judge x%2&&y%2

581:     ; if Body
  %582 = load i32, i32* %88     
  %583 = load i32, i32* %87     
  %584 = load i32, i32* %87     
  %585= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %586= getelementptr i32,i32* %585 , i32 %584     
  %587 = load i32, i32* %586     ; 1*SHIFT_TABLE[i]
  %588 = add i32 %582, %587     ; ans+1*SHIFT_TABLE[i]
  store i32 %588, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %589     

589:     
  %590 = load i32, i32* %86     
  %591 = sdiv i32 %590, 2     ; x/2
  store i32 %591, i32* %86     ; x=x/2
  %592 = load i32, i32* %85     
  %593 = sdiv i32 %592, 2     ; y/2
  store i32 %593, i32* %85     ; y=y/2
  %594 = load i32, i32* %87     
  %595 = add i32 %594, 1     ; i+1
  store i32 %595, i32* %87     ; i=i+1
  br label %570     

596:     ; exit while
  br label %597     

597:     
  %598 = load i32, i32* %88     
  store i32 %598, i32* %67     ; c=ans
  %599 = load i32, i32* %66     
  store i32 %599, i32* %68     ; al=sum
  br label %488     

600:     ; exit while
  %601 = load i32, i32* %68     
  store i32 %601, i32* %88     ; ans=al
  %602 = load i32, i32* %88     
  store i32 %602, i32* %69     ; mres=ans
  br label %603     

603:     
  %604 = load i32, i32* %71     
  store i32 %604, i32* %65     ; al= = load i32, i32* 
  %605 = load i32, i32* %71     
  store i32 %605, i32* %64     ; c= = load i32, i32* 
  br label %606     

606:     ; judge c
  %607 = load i32, i32* %64     
  %608= icmp ne i32 %607, 0     
  br i1 %608, label %609, label %718     

609:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %610 = load i32, i32* %65     
  store i32 %610, i32* %86     ; x=al
  %611 = load i32, i32* %64     
  store i32 %611, i32* %85     ; y=c
  br label %612     

612:     ; judge i<16
  %613 = load i32, i32* %87     
  %614= icmp slt i32 %613, 16     ; i<16
  br i1 %614, label %615, label %652     

615:     ; while Body
  %616 = load i32, i32* %86     
  %617 = srem i32 %616, 2     ; x%2
  %618= icmp ne i32 %617, 0     
  br i1 %618, label %619, label %632     ; judge x%2

619:     ; if Body
  %620 = load i32, i32* %85     
  %621 = srem i32 %620, 2     ; y%2
  %622= icmp eq i32 %621, 0     ; y%2==0
  br i1 %622, label %623, label %631     ; judge y%2==0

623:     ; if Body
  %624 = load i32, i32* %88     
  %625 = load i32, i32* %87     
  %626 = load i32, i32* %87     
  %627= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %628= getelementptr i32,i32* %627 , i32 %626     
  %629 = load i32, i32* %628     ; 1*SHIFT_TABLE[i]
  %630 = add i32 %624, %629     ; ans+1*SHIFT_TABLE[i]
  store i32 %630, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %631     

631:     
  br label %645     

632:     ; else Body
  %633 = load i32, i32* %85     
  %634 = srem i32 %633, 2     ; y%2
  %635= icmp ne i32 %634, 0     
  br i1 %635, label %636, label %644     ; judge y%2

636:     ; if Body
  %637 = load i32, i32* %88     
  %638 = load i32, i32* %87     
  %639 = load i32, i32* %87     
  %640= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %641= getelementptr i32,i32* %640 , i32 %639     
  %642 = load i32, i32* %641     ; 1*SHIFT_TABLE[i]
  %643 = add i32 %637, %642     ; ans+1*SHIFT_TABLE[i]
  store i32 %643, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %644     

644:     
  br label %645     

645:     
  %646 = load i32, i32* %86     
  %647 = sdiv i32 %646, 2     ; x/2
  store i32 %647, i32* %86     ; x=x/2
  %648 = load i32, i32* %85     
  %649 = sdiv i32 %648, 2     ; y/2
  store i32 %649, i32* %85     ; y=y/2
  %650 = load i32, i32* %87     
  %651 = add i32 %650, 1     ; i+1
  store i32 %651, i32* %87     ; i=i+1
  br label %612     

652:     ; exit while
  %653 = load i32, i32* %88     
  store i32 %653, i32* %63     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %654 = load i32, i32* %65     
  store i32 %654, i32* %86     ; x=al
  %655 = load i32, i32* %64     
  store i32 %655, i32* %85     ; y=c
  br label %656     

656:     ; judge i<16
  %657 = load i32, i32* %87     
  %658= icmp slt i32 %657, 16     ; i<16
  br i1 %658, label %659, label %682     

659:     ; while Body
  %660 = load i32, i32* %86     
  %661 = srem i32 %660, 2     ; x%2
  %662= icmp ne i32 %661, 0     
  br i1 %662, label %663, label %675     

663:     
  %664 = load i32, i32* %85     
  %665 = srem i32 %664, 2     ; x%2 && y%2
  %666= icmp ne i32 %665, 0     
  br i1 %666, label %667, label %675     ; judge x%2&&y%2

667:     ; if Body
  %668 = load i32, i32* %88     
  %669 = load i32, i32* %87     
  %670 = load i32, i32* %87     
  %671= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %672= getelementptr i32,i32* %671 , i32 %670     
  %673 = load i32, i32* %672     ; 1*SHIFT_TABLE[i]
  %674 = add i32 %668, %673     ; ans+1*SHIFT_TABLE[i]
  store i32 %674, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %675     

675:     
  %676 = load i32, i32* %86     
  %677 = sdiv i32 %676, 2     ; x/2
  store i32 %677, i32* %86     ; x=x/2
  %678 = load i32, i32* %85     
  %679 = sdiv i32 %678, 2     ; y/2
  store i32 %679, i32* %85     ; y=y/2
  %680 = load i32, i32* %87     
  %681 = add i32 %680, 1     ; i+1
  store i32 %681, i32* %87     ; i=i+1
  br label %656     

682:     ; exit while
  %683 = load i32, i32* %88     
  store i32 %683, i32* %64     ; c=ans
  br i1 0, label %684, label %685     ; judge (1)>15

684:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %715     

685:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %686 = load i32, i32* %64     
  %687 = mul i32 %686, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %687, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %688     

688:     ; judge i<16
  %689 = load i32, i32* %87     
  %690= icmp slt i32 %689, 16     ; i<16
  br i1 %690, label %691, label %714     

691:     ; while Body
  %692 = load i32, i32* %86     
  %693 = srem i32 %692, 2     ; x%2
  %694= icmp ne i32 %693, 0     
  br i1 %694, label %695, label %707     

695:     
  %696 = load i32, i32* %85     
  %697 = srem i32 %696, 2     ; x%2 && y%2
  %698= icmp ne i32 %697, 0     
  br i1 %698, label %699, label %707     ; judge x%2&&y%2

699:     ; if Body
  %700 = load i32, i32* %88     
  %701 = load i32, i32* %87     
  %702 = load i32, i32* %87     
  %703= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %704= getelementptr i32,i32* %703 , i32 %702     
  %705 = load i32, i32* %704     ; 1*SHIFT_TABLE[i]
  %706 = add i32 %700, %705     ; ans+1*SHIFT_TABLE[i]
  store i32 %706, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %707     

707:     
  %708 = load i32, i32* %86     
  %709 = sdiv i32 %708, 2     ; x/2
  store i32 %709, i32* %86     ; x=x/2
  %710 = load i32, i32* %85     
  %711 = sdiv i32 %710, 2     ; y/2
  store i32 %711, i32* %85     ; y=y/2
  %712 = load i32, i32* %87     
  %713 = add i32 %712, 1     ; i+1
  store i32 %713, i32* %87     ; i=i+1
  br label %688     

714:     ; exit while
  br label %715     

715:     
  %716 = load i32, i32* %88     
  store i32 %716, i32* %64     ; c=ans
  %717 = load i32, i32* %63     
  store i32 %717, i32* %65     ; al=sum
  br label %606     

718:     ; exit while
  %719 = load i32, i32* %65     
  store i32 %719, i32* %88     ; ans=al
  %720 = load i32, i32* %88     
  store i32 %720, i32* %71     ; ml=ans
  %721 = load i32, i32* %70     
  store i32 %721, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  %722 = load i32, i32* %85     
  %723= icmp sge i32 %722, 15     ; y>=15
  br i1 %723, label %724, label %730     ; judge y>=15

724:     ; if Body
  %725 = load i32, i32* %86     
  %726= icmp slt i32 %725, 0     ; x<0
  br i1 %726, label %727, label %728     ; judge x<0

727:     ; if Body
  store i32 65535, i32* %88     ; ans=0xffff
  br label %729     

728:     ; else Body
  store i32 0, i32* %88     ; ans=0
  br label %729     

729:     
  br label %768     

730:     ; else Body
  %731 = load i32, i32* %85     
  %732= icmp sgt i32 %731, 0     ; y>0
  br i1 %732, label %733, label %765     ; judge y>0

733:     ; if Body
  %734 = load i32, i32* %86     
  %735= icmp sgt i32 %734, 32767     ; x>0x7fff
  br i1 %735, label %736, label %756     ; judge x>0x7fff

736:     ; if Body
  %737 = load i32, i32* %86     
  %738 = load i32, i32* %85     
  %739 = load i32, i32* %85     
  %740= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %741= getelementptr i32,i32* %740 , i32 %739     
  %742 = load i32, i32* %741     
  %743 = sdiv i32 %737, %742     ; x/SHIFT_TABLE[y]
  store i32 %743, i32* %86     ; x=x/SHIFT_TABLE[y]
  %744 = load i32, i32* %86     
  %745 = add i32 %744, 65536     ; x+65536
  %746 = load i32, i32* %85     
  %747 = sub i32 15, %746     ; 15-y
  %748 = add i32 %747, 1     ; 15-y+1
  %749 = load i32, i32* %85     
  %750 = sub i32 15, %749     ; 15-y
  %751 = add i32 %750, 1     ; 15-y+1
  %752= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %753= getelementptr i32,i32* %752 , i32 %751     
  %754 = load i32, i32* %753     
  %755 = sub i32 %745, %754     ; x+65536-SHIFT_TABLE[15-y+1]
  store i32 %755, i32* %88     ; ans=x+65536-SHIFT_TABLE[15-y+1]
  br label %764     

756:     ; else Body
  %757 = load i32, i32* %86     
  %758 = load i32, i32* %85     
  %759 = load i32, i32* %85     
  %760= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %761= getelementptr i32,i32* %760 , i32 %759     
  %762 = load i32, i32* %761     
  %763 = sdiv i32 %757, %762     ; x/SHIFT_TABLE[y]
  store i32 %763, i32* %88     ; ans=x/SHIFT_TABLE[y]
  br label %764     

764:     
  br label %767     

765:     ; else Body
  %766 = load i32, i32* %86     
  store i32 %766, i32* %88     ; ans=x
  br label %767     

767:     
  br label %768     

768:     
  %769 = load i32, i32* %88     
  store i32 %769, i32* %70     ; mr=ans
  br label %451     

770:     ; exit while
  %771 = load i32, i32* %69     
  store i32 %771, i32* %88     ; ans=mres
  %772 = load i32, i32* %88     
  store i32 %772, i32* %83     ; pl=ans
  %773 = load i32, i32* %82     
  store i32 %773, i32* %86     ; x=pr
  store i32 1, i32* %85     ; y=1
  %774 = load i32, i32* %85     
  %775= icmp sge i32 %774, 15     ; y>=15
  br i1 %775, label %776, label %782     ; judge y>=15

776:     ; if Body
  %777 = load i32, i32* %86     
  %778= icmp slt i32 %777, 0     ; x<0
  br i1 %778, label %779, label %780     ; judge x<0

779:     ; if Body
  store i32 65535, i32* %88     ; ans=0xffff
  br label %781     

780:     ; else Body
  store i32 0, i32* %88     ; ans=0
  br label %781     

781:     
  br label %820     

782:     ; else Body
  %783 = load i32, i32* %85     
  %784= icmp sgt i32 %783, 0     ; y>0
  br i1 %784, label %785, label %817     ; judge y>0

785:     ; if Body
  %786 = load i32, i32* %86     
  %787= icmp sgt i32 %786, 32767     ; x>0x7fff
  br i1 %787, label %788, label %808     ; judge x>0x7fff

788:     ; if Body
  %789 = load i32, i32* %86     
  %790 = load i32, i32* %85     
  %791 = load i32, i32* %85     
  %792= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %793= getelementptr i32,i32* %792 , i32 %791     
  %794 = load i32, i32* %793     
  %795 = sdiv i32 %789, %794     ; x/SHIFT_TABLE[y]
  store i32 %795, i32* %86     ; x=x/SHIFT_TABLE[y]
  %796 = load i32, i32* %86     
  %797 = add i32 %796, 65536     ; x+65536
  %798 = load i32, i32* %85     
  %799 = sub i32 15, %798     ; 15-y
  %800 = add i32 %799, 1     ; 15-y+1
  %801 = load i32, i32* %85     
  %802 = sub i32 15, %801     ; 15-y
  %803 = add i32 %802, 1     ; 15-y+1
  %804= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %805= getelementptr i32,i32* %804 , i32 %803     
  %806 = load i32, i32* %805     
  %807 = sub i32 %797, %806     ; x+65536-SHIFT_TABLE[15-y+1]
  store i32 %807, i32* %88     ; ans=x+65536-SHIFT_TABLE[15-y+1]
  br label %816     

808:     ; else Body
  %809 = load i32, i32* %86     
  %810 = load i32, i32* %85     
  %811 = load i32, i32* %85     
  %812= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %813= getelementptr i32,i32* %812 , i32 %811     
  %814 = load i32, i32* %813     
  %815 = sdiv i32 %809, %814     ; x/SHIFT_TABLE[y]
  store i32 %815, i32* %88     ; ans=x/SHIFT_TABLE[y]
  br label %816     

816:     
  br label %819     

817:     ; else Body
  %818 = load i32, i32* %86     
  store i32 %818, i32* %88     ; ans=x
  br label %819     

819:     
  br label %820     

820:     
  %821 = load i32, i32* %88     
  store i32 %821, i32* %82     ; pr=ans
  br label %89     

822:     ; exit while
  %823 = load i32, i32* %81     
  store i32 %823, i32* %88     ; ans=pres
  %824 = load i32, i32* %88     
  call void @putint(i32 %824)     ; call putint(ans)
  call void @putch(i32 10)     ; call putch(10)
  store i32 2, i32* %62     ; pl=i32 2
  store i32 1, i32* %61     ; pr=i32 1
  store i32 1, i32* %60     ; pres=i32 1
  br label %825     

825:     ; judge pr>0
  %826 = load i32, i32* %61     
  %827= icmp sgt i32 %826, 0     ; pr>0
  br i1 %827, label %828, label %1558     

828:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %829 = load i32, i32* %61     
  store i32 %829, i32* %86     ; x=pr
  store i32 1, i32* %85     ; y=1
  br label %830     

830:     ; judge i<16
  %831 = load i32, i32* %87     
  %832= icmp slt i32 %831, 16     ; i<16
  br i1 %832, label %833, label %856     

833:     ; while Body
  %834 = load i32, i32* %86     
  %835 = srem i32 %834, 2     ; x%2
  %836= icmp ne i32 %835, 0     
  br i1 %836, label %837, label %849     

837:     
  %838 = load i32, i32* %85     
  %839 = srem i32 %838, 2     ; x%2 && y%2
  %840= icmp ne i32 %839, 0     
  br i1 %840, label %841, label %849     ; judge x%2&&y%2

841:     ; if Body
  %842 = load i32, i32* %88     
  %843 = load i32, i32* %87     
  %844 = load i32, i32* %87     
  %845= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %846= getelementptr i32,i32* %845 , i32 %844     
  %847 = load i32, i32* %846     ; 1*SHIFT_TABLE[i]
  %848 = add i32 %842, %847     ; ans+1*SHIFT_TABLE[i]
  store i32 %848, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %849     

849:     
  %850 = load i32, i32* %86     
  %851 = sdiv i32 %850, 2     ; x/2
  store i32 %851, i32* %86     ; x=x/2
  %852 = load i32, i32* %85     
  %853 = sdiv i32 %852, 2     ; y/2
  store i32 %853, i32* %85     ; y=y/2
  %854 = load i32, i32* %87     
  %855 = add i32 %854, 1     ; i+1
  store i32 %855, i32* %87     ; i=i+1
  br label %830     

856:     ; exit while
  %857 = load i32, i32* %88     
  %858= icmp ne i32 %857, 0     
  br i1 %858, label %859, label %1184     ; judge ans

859:     ; if Body
  %860 = load i32, i32* %60     
  store i32 %860, i32* %59     ; ml= = load i32, i32* 
  %861 = load i32, i32* %62     
  store i32 %861, i32* %58     ; mr= = load i32, i32* 
  store i32 0, i32* %57     ; mres=i32 0
  br label %862     

862:     ; judge mr
  %863 = load i32, i32* %58     
  %864= icmp ne i32 %863, 0     
  br i1 %864, label %865, label %1181     

865:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %866 = load i32, i32* %58     
  store i32 %866, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  br label %867     

867:     ; judge i<16
  %868 = load i32, i32* %87     
  %869= icmp slt i32 %868, 16     ; i<16
  br i1 %869, label %870, label %893     

870:     ; while Body
  %871 = load i32, i32* %86     
  %872 = srem i32 %871, 2     ; x%2
  %873= icmp ne i32 %872, 0     
  br i1 %873, label %874, label %886     

874:     
  %875 = load i32, i32* %85     
  %876 = srem i32 %875, 2     ; x%2 && y%2
  %877= icmp ne i32 %876, 0     
  br i1 %877, label %878, label %886     ; judge x%2&&y%2

878:     ; if Body
  %879 = load i32, i32* %88     
  %880 = load i32, i32* %87     
  %881 = load i32, i32* %87     
  %882= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %883= getelementptr i32,i32* %882 , i32 %881     
  %884 = load i32, i32* %883     ; 1*SHIFT_TABLE[i]
  %885 = add i32 %879, %884     ; ans+1*SHIFT_TABLE[i]
  store i32 %885, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %886     

886:     
  %887 = load i32, i32* %86     
  %888 = sdiv i32 %887, 2     ; x/2
  store i32 %888, i32* %86     ; x=x/2
  %889 = load i32, i32* %85     
  %890 = sdiv i32 %889, 2     ; y/2
  store i32 %890, i32* %85     ; y=y/2
  %891 = load i32, i32* %87     
  %892 = add i32 %891, 1     ; i+1
  store i32 %892, i32* %87     ; i=i+1
  br label %867     

893:     ; exit while
  %894 = load i32, i32* %88     
  %895= icmp ne i32 %894, 0     
  br i1 %895, label %896, label %1014     ; judge ans

896:     ; if Body
  %897 = load i32, i32* %57     
  store i32 %897, i32* %56     ; al= = load i32, i32* 
  %898 = load i32, i32* %59     
  store i32 %898, i32* %55     ; c= = load i32, i32* 
  br label %899     

899:     ; judge c
  %900 = load i32, i32* %55     
  %901= icmp ne i32 %900, 0     
  br i1 %901, label %902, label %1011     

902:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %903 = load i32, i32* %56     
  store i32 %903, i32* %86     ; x=al
  %904 = load i32, i32* %55     
  store i32 %904, i32* %85     ; y=c
  br label %905     

905:     ; judge i<16
  %906 = load i32, i32* %87     
  %907= icmp slt i32 %906, 16     ; i<16
  br i1 %907, label %908, label %945     

908:     ; while Body
  %909 = load i32, i32* %86     
  %910 = srem i32 %909, 2     ; x%2
  %911= icmp ne i32 %910, 0     
  br i1 %911, label %912, label %925     ; judge x%2

912:     ; if Body
  %913 = load i32, i32* %85     
  %914 = srem i32 %913, 2     ; y%2
  %915= icmp eq i32 %914, 0     ; y%2==0
  br i1 %915, label %916, label %924     ; judge y%2==0

916:     ; if Body
  %917 = load i32, i32* %88     
  %918 = load i32, i32* %87     
  %919 = load i32, i32* %87     
  %920= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %921= getelementptr i32,i32* %920 , i32 %919     
  %922 = load i32, i32* %921     ; 1*SHIFT_TABLE[i]
  %923 = add i32 %917, %922     ; ans+1*SHIFT_TABLE[i]
  store i32 %923, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %924     

924:     
  br label %938     

925:     ; else Body
  %926 = load i32, i32* %85     
  %927 = srem i32 %926, 2     ; y%2
  %928= icmp ne i32 %927, 0     
  br i1 %928, label %929, label %937     ; judge y%2

929:     ; if Body
  %930 = load i32, i32* %88     
  %931 = load i32, i32* %87     
  %932 = load i32, i32* %87     
  %933= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %934= getelementptr i32,i32* %933 , i32 %932     
  %935 = load i32, i32* %934     ; 1*SHIFT_TABLE[i]
  %936 = add i32 %930, %935     ; ans+1*SHIFT_TABLE[i]
  store i32 %936, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %937     

937:     
  br label %938     

938:     
  %939 = load i32, i32* %86     
  %940 = sdiv i32 %939, 2     ; x/2
  store i32 %940, i32* %86     ; x=x/2
  %941 = load i32, i32* %85     
  %942 = sdiv i32 %941, 2     ; y/2
  store i32 %942, i32* %85     ; y=y/2
  %943 = load i32, i32* %87     
  %944 = add i32 %943, 1     ; i+1
  store i32 %944, i32* %87     ; i=i+1
  br label %905     

945:     ; exit while
  %946 = load i32, i32* %88     
  store i32 %946, i32* %54     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %947 = load i32, i32* %56     
  store i32 %947, i32* %86     ; x=al
  %948 = load i32, i32* %55     
  store i32 %948, i32* %85     ; y=c
  br label %949     

949:     ; judge i<16
  %950 = load i32, i32* %87     
  %951= icmp slt i32 %950, 16     ; i<16
  br i1 %951, label %952, label %975     

952:     ; while Body
  %953 = load i32, i32* %86     
  %954 = srem i32 %953, 2     ; x%2
  %955= icmp ne i32 %954, 0     
  br i1 %955, label %956, label %968     

956:     
  %957 = load i32, i32* %85     
  %958 = srem i32 %957, 2     ; x%2 && y%2
  %959= icmp ne i32 %958, 0     
  br i1 %959, label %960, label %968     ; judge x%2&&y%2

960:     ; if Body
  %961 = load i32, i32* %88     
  %962 = load i32, i32* %87     
  %963 = load i32, i32* %87     
  %964= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %965= getelementptr i32,i32* %964 , i32 %963     
  %966 = load i32, i32* %965     ; 1*SHIFT_TABLE[i]
  %967 = add i32 %961, %966     ; ans+1*SHIFT_TABLE[i]
  store i32 %967, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %968     

968:     
  %969 = load i32, i32* %86     
  %970 = sdiv i32 %969, 2     ; x/2
  store i32 %970, i32* %86     ; x=x/2
  %971 = load i32, i32* %85     
  %972 = sdiv i32 %971, 2     ; y/2
  store i32 %972, i32* %85     ; y=y/2
  %973 = load i32, i32* %87     
  %974 = add i32 %973, 1     ; i+1
  store i32 %974, i32* %87     ; i=i+1
  br label %949     

975:     ; exit while
  %976 = load i32, i32* %88     
  store i32 %976, i32* %55     ; c=ans
  br i1 0, label %977, label %978     ; judge (1)>15

977:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %1008     

978:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %979 = load i32, i32* %55     
  %980 = mul i32 %979, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %980, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %981     

981:     ; judge i<16
  %982 = load i32, i32* %87     
  %983= icmp slt i32 %982, 16     ; i<16
  br i1 %983, label %984, label %1007     

984:     ; while Body
  %985 = load i32, i32* %86     
  %986 = srem i32 %985, 2     ; x%2
  %987= icmp ne i32 %986, 0     
  br i1 %987, label %988, label %1000     

988:     
  %989 = load i32, i32* %85     
  %990 = srem i32 %989, 2     ; x%2 && y%2
  %991= icmp ne i32 %990, 0     
  br i1 %991, label %992, label %1000     ; judge x%2&&y%2

992:     ; if Body
  %993 = load i32, i32* %88     
  %994 = load i32, i32* %87     
  %995 = load i32, i32* %87     
  %996= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %997= getelementptr i32,i32* %996 , i32 %995     
  %998 = load i32, i32* %997     ; 1*SHIFT_TABLE[i]
  %999 = add i32 %993, %998     ; ans+1*SHIFT_TABLE[i]
  store i32 %999, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1000     

1000:     
  %1001 = load i32, i32* %86     
  %1002 = sdiv i32 %1001, 2     ; x/2
  store i32 %1002, i32* %86     ; x=x/2
  %1003 = load i32, i32* %85     
  %1004 = sdiv i32 %1003, 2     ; y/2
  store i32 %1004, i32* %85     ; y=y/2
  %1005 = load i32, i32* %87     
  %1006 = add i32 %1005, 1     ; i+1
  store i32 %1006, i32* %87     ; i=i+1
  br label %981     

1007:     ; exit while
  br label %1008     

1008:     
  %1009 = load i32, i32* %88     
  store i32 %1009, i32* %55     ; c=ans
  %1010 = load i32, i32* %54     
  store i32 %1010, i32* %56     ; al=sum
  br label %899     

1011:     ; exit while
  %1012 = load i32, i32* %56     
  store i32 %1012, i32* %88     ; ans=al
  %1013 = load i32, i32* %88     
  store i32 %1013, i32* %57     ; mres=ans
  br label %1014     

1014:     
  %1015 = load i32, i32* %59     
  store i32 %1015, i32* %53     ; al= = load i32, i32* 
  %1016 = load i32, i32* %59     
  store i32 %1016, i32* %52     ; c= = load i32, i32* 
  br label %1017     

1017:     ; judge c
  %1018 = load i32, i32* %52     
  %1019= icmp ne i32 %1018, 0     
  br i1 %1019, label %1020, label %1129     

1020:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1021 = load i32, i32* %53     
  store i32 %1021, i32* %86     ; x=al
  %1022 = load i32, i32* %52     
  store i32 %1022, i32* %85     ; y=c
  br label %1023     

1023:     ; judge i<16
  %1024 = load i32, i32* %87     
  %1025= icmp slt i32 %1024, 16     ; i<16
  br i1 %1025, label %1026, label %1063     

1026:     ; while Body
  %1027 = load i32, i32* %86     
  %1028 = srem i32 %1027, 2     ; x%2
  %1029= icmp ne i32 %1028, 0     
  br i1 %1029, label %1030, label %1043     ; judge x%2

1030:     ; if Body
  %1031 = load i32, i32* %85     
  %1032 = srem i32 %1031, 2     ; y%2
  %1033= icmp eq i32 %1032, 0     ; y%2==0
  br i1 %1033, label %1034, label %1042     ; judge y%2==0

1034:     ; if Body
  %1035 = load i32, i32* %88     
  %1036 = load i32, i32* %87     
  %1037 = load i32, i32* %87     
  %1038= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1039= getelementptr i32,i32* %1038 , i32 %1037     
  %1040 = load i32, i32* %1039     ; 1*SHIFT_TABLE[i]
  %1041 = add i32 %1035, %1040     ; ans+1*SHIFT_TABLE[i]
  store i32 %1041, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1042     

1042:     
  br label %1056     

1043:     ; else Body
  %1044 = load i32, i32* %85     
  %1045 = srem i32 %1044, 2     ; y%2
  %1046= icmp ne i32 %1045, 0     
  br i1 %1046, label %1047, label %1055     ; judge y%2

1047:     ; if Body
  %1048 = load i32, i32* %88     
  %1049 = load i32, i32* %87     
  %1050 = load i32, i32* %87     
  %1051= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1052= getelementptr i32,i32* %1051 , i32 %1050     
  %1053 = load i32, i32* %1052     ; 1*SHIFT_TABLE[i]
  %1054 = add i32 %1048, %1053     ; ans+1*SHIFT_TABLE[i]
  store i32 %1054, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1055     

1055:     
  br label %1056     

1056:     
  %1057 = load i32, i32* %86     
  %1058 = sdiv i32 %1057, 2     ; x/2
  store i32 %1058, i32* %86     ; x=x/2
  %1059 = load i32, i32* %85     
  %1060 = sdiv i32 %1059, 2     ; y/2
  store i32 %1060, i32* %85     ; y=y/2
  %1061 = load i32, i32* %87     
  %1062 = add i32 %1061, 1     ; i+1
  store i32 %1062, i32* %87     ; i=i+1
  br label %1023     

1063:     ; exit while
  %1064 = load i32, i32* %88     
  store i32 %1064, i32* %51     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1065 = load i32, i32* %53     
  store i32 %1065, i32* %86     ; x=al
  %1066 = load i32, i32* %52     
  store i32 %1066, i32* %85     ; y=c
  br label %1067     

1067:     ; judge i<16
  %1068 = load i32, i32* %87     
  %1069= icmp slt i32 %1068, 16     ; i<16
  br i1 %1069, label %1070, label %1093     

1070:     ; while Body
  %1071 = load i32, i32* %86     
  %1072 = srem i32 %1071, 2     ; x%2
  %1073= icmp ne i32 %1072, 0     
  br i1 %1073, label %1074, label %1086     

1074:     
  %1075 = load i32, i32* %85     
  %1076 = srem i32 %1075, 2     ; x%2 && y%2
  %1077= icmp ne i32 %1076, 0     
  br i1 %1077, label %1078, label %1086     ; judge x%2&&y%2

1078:     ; if Body
  %1079 = load i32, i32* %88     
  %1080 = load i32, i32* %87     
  %1081 = load i32, i32* %87     
  %1082= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1083= getelementptr i32,i32* %1082 , i32 %1081     
  %1084 = load i32, i32* %1083     ; 1*SHIFT_TABLE[i]
  %1085 = add i32 %1079, %1084     ; ans+1*SHIFT_TABLE[i]
  store i32 %1085, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1086     

1086:     
  %1087 = load i32, i32* %86     
  %1088 = sdiv i32 %1087, 2     ; x/2
  store i32 %1088, i32* %86     ; x=x/2
  %1089 = load i32, i32* %85     
  %1090 = sdiv i32 %1089, 2     ; y/2
  store i32 %1090, i32* %85     ; y=y/2
  %1091 = load i32, i32* %87     
  %1092 = add i32 %1091, 1     ; i+1
  store i32 %1092, i32* %87     ; i=i+1
  br label %1067     

1093:     ; exit while
  %1094 = load i32, i32* %88     
  store i32 %1094, i32* %52     ; c=ans
  br i1 0, label %1095, label %1096     ; judge (1)>15

1095:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %1126     

1096:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1097 = load i32, i32* %52     
  %1098 = mul i32 %1097, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %1098, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %1099     

1099:     ; judge i<16
  %1100 = load i32, i32* %87     
  %1101= icmp slt i32 %1100, 16     ; i<16
  br i1 %1101, label %1102, label %1125     

1102:     ; while Body
  %1103 = load i32, i32* %86     
  %1104 = srem i32 %1103, 2     ; x%2
  %1105= icmp ne i32 %1104, 0     
  br i1 %1105, label %1106, label %1118     

1106:     
  %1107 = load i32, i32* %85     
  %1108 = srem i32 %1107, 2     ; x%2 && y%2
  %1109= icmp ne i32 %1108, 0     
  br i1 %1109, label %1110, label %1118     ; judge x%2&&y%2

1110:     ; if Body
  %1111 = load i32, i32* %88     
  %1112 = load i32, i32* %87     
  %1113 = load i32, i32* %87     
  %1114= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1115= getelementptr i32,i32* %1114 , i32 %1113     
  %1116 = load i32, i32* %1115     ; 1*SHIFT_TABLE[i]
  %1117 = add i32 %1111, %1116     ; ans+1*SHIFT_TABLE[i]
  store i32 %1117, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1118     

1118:     
  %1119 = load i32, i32* %86     
  %1120 = sdiv i32 %1119, 2     ; x/2
  store i32 %1120, i32* %86     ; x=x/2
  %1121 = load i32, i32* %85     
  %1122 = sdiv i32 %1121, 2     ; y/2
  store i32 %1122, i32* %85     ; y=y/2
  %1123 = load i32, i32* %87     
  %1124 = add i32 %1123, 1     ; i+1
  store i32 %1124, i32* %87     ; i=i+1
  br label %1099     

1125:     ; exit while
  br label %1126     

1126:     
  %1127 = load i32, i32* %88     
  store i32 %1127, i32* %52     ; c=ans
  %1128 = load i32, i32* %51     
  store i32 %1128, i32* %53     ; al=sum
  br label %1017     

1129:     ; exit while
  %1130 = load i32, i32* %53     
  store i32 %1130, i32* %88     ; ans=al
  %1131 = load i32, i32* %88     
  store i32 %1131, i32* %59     ; ml=ans
  %1132 = load i32, i32* %58     
  store i32 %1132, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  %1133 = load i32, i32* %85     
  %1134= icmp sge i32 %1133, 15     ; y>=15
  br i1 %1134, label %1135, label %1141     ; judge y>=15

1135:     ; if Body
  %1136 = load i32, i32* %86     
  %1137= icmp slt i32 %1136, 0     ; x<0
  br i1 %1137, label %1138, label %1139     ; judge x<0

1138:     ; if Body
  store i32 65535, i32* %88     ; ans=0xffff
  br label %1140     

1139:     ; else Body
  store i32 0, i32* %88     ; ans=0
  br label %1140     

1140:     
  br label %1179     

1141:     ; else Body
  %1142 = load i32, i32* %85     
  %1143= icmp sgt i32 %1142, 0     ; y>0
  br i1 %1143, label %1144, label %1176     ; judge y>0

1144:     ; if Body
  %1145 = load i32, i32* %86     
  %1146= icmp sgt i32 %1145, 32767     ; x>0x7fff
  br i1 %1146, label %1147, label %1167     ; judge x>0x7fff

1147:     ; if Body
  %1148 = load i32, i32* %86     
  %1149 = load i32, i32* %85     
  %1150 = load i32, i32* %85     
  %1151= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1152= getelementptr i32,i32* %1151 , i32 %1150     
  %1153 = load i32, i32* %1152     
  %1154 = sdiv i32 %1148, %1153     ; x/SHIFT_TABLE[y]
  store i32 %1154, i32* %86     ; x=x/SHIFT_TABLE[y]
  %1155 = load i32, i32* %86     
  %1156 = add i32 %1155, 65536     ; x+65536
  %1157 = load i32, i32* %85     
  %1158 = sub i32 15, %1157     ; 15-y
  %1159 = add i32 %1158, 1     ; 15-y+1
  %1160 = load i32, i32* %85     
  %1161 = sub i32 15, %1160     ; 15-y
  %1162 = add i32 %1161, 1     ; 15-y+1
  %1163= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1164= getelementptr i32,i32* %1163 , i32 %1162     
  %1165 = load i32, i32* %1164     
  %1166 = sub i32 %1156, %1165     ; x+65536-SHIFT_TABLE[15-y+1]
  store i32 %1166, i32* %88     ; ans=x+65536-SHIFT_TABLE[15-y+1]
  br label %1175     

1167:     ; else Body
  %1168 = load i32, i32* %86     
  %1169 = load i32, i32* %85     
  %1170 = load i32, i32* %85     
  %1171= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1172= getelementptr i32,i32* %1171 , i32 %1170     
  %1173 = load i32, i32* %1172     
  %1174 = sdiv i32 %1168, %1173     ; x/SHIFT_TABLE[y]
  store i32 %1174, i32* %88     ; ans=x/SHIFT_TABLE[y]
  br label %1175     

1175:     
  br label %1178     

1176:     ; else Body
  %1177 = load i32, i32* %86     
  store i32 %1177, i32* %88     ; ans=x
  br label %1178     

1178:     
  br label %1179     

1179:     
  %1180 = load i32, i32* %88     
  store i32 %1180, i32* %58     ; mr=ans
  br label %862     

1181:     ; exit while
  %1182 = load i32, i32* %57     
  store i32 %1182, i32* %88     ; ans=mres
  %1183 = load i32, i32* %88     
  store i32 %1183, i32* %60     ; pres=ans
  br label %1184     

1184:     
  %1185 = load i32, i32* %62     
  store i32 %1185, i32* %50     ; ml= = load i32, i32* 
  %1186 = load i32, i32* %62     
  store i32 %1186, i32* %49     ; mr= = load i32, i32* 
  store i32 0, i32* %48     ; mres=i32 0
  br label %1187     

1187:     ; judge mr
  %1188 = load i32, i32* %49     
  %1189= icmp ne i32 %1188, 0     
  br i1 %1189, label %1190, label %1506     

1190:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1191 = load i32, i32* %49     
  store i32 %1191, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  br label %1192     

1192:     ; judge i<16
  %1193 = load i32, i32* %87     
  %1194= icmp slt i32 %1193, 16     ; i<16
  br i1 %1194, label %1195, label %1218     

1195:     ; while Body
  %1196 = load i32, i32* %86     
  %1197 = srem i32 %1196, 2     ; x%2
  %1198= icmp ne i32 %1197, 0     
  br i1 %1198, label %1199, label %1211     

1199:     
  %1200 = load i32, i32* %85     
  %1201 = srem i32 %1200, 2     ; x%2 && y%2
  %1202= icmp ne i32 %1201, 0     
  br i1 %1202, label %1203, label %1211     ; judge x%2&&y%2

1203:     ; if Body
  %1204 = load i32, i32* %88     
  %1205 = load i32, i32* %87     
  %1206 = load i32, i32* %87     
  %1207= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1208= getelementptr i32,i32* %1207 , i32 %1206     
  %1209 = load i32, i32* %1208     ; 1*SHIFT_TABLE[i]
  %1210 = add i32 %1204, %1209     ; ans+1*SHIFT_TABLE[i]
  store i32 %1210, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1211     

1211:     
  %1212 = load i32, i32* %86     
  %1213 = sdiv i32 %1212, 2     ; x/2
  store i32 %1213, i32* %86     ; x=x/2
  %1214 = load i32, i32* %85     
  %1215 = sdiv i32 %1214, 2     ; y/2
  store i32 %1215, i32* %85     ; y=y/2
  %1216 = load i32, i32* %87     
  %1217 = add i32 %1216, 1     ; i+1
  store i32 %1217, i32* %87     ; i=i+1
  br label %1192     

1218:     ; exit while
  %1219 = load i32, i32* %88     
  %1220= icmp ne i32 %1219, 0     
  br i1 %1220, label %1221, label %1339     ; judge ans

1221:     ; if Body
  %1222 = load i32, i32* %48     
  store i32 %1222, i32* %47     ; al= = load i32, i32* 
  %1223 = load i32, i32* %50     
  store i32 %1223, i32* %46     ; c= = load i32, i32* 
  br label %1224     

1224:     ; judge c
  %1225 = load i32, i32* %46     
  %1226= icmp ne i32 %1225, 0     
  br i1 %1226, label %1227, label %1336     

1227:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1228 = load i32, i32* %47     
  store i32 %1228, i32* %86     ; x=al
  %1229 = load i32, i32* %46     
  store i32 %1229, i32* %85     ; y=c
  br label %1230     

1230:     ; judge i<16
  %1231 = load i32, i32* %87     
  %1232= icmp slt i32 %1231, 16     ; i<16
  br i1 %1232, label %1233, label %1270     

1233:     ; while Body
  %1234 = load i32, i32* %86     
  %1235 = srem i32 %1234, 2     ; x%2
  %1236= icmp ne i32 %1235, 0     
  br i1 %1236, label %1237, label %1250     ; judge x%2

1237:     ; if Body
  %1238 = load i32, i32* %85     
  %1239 = srem i32 %1238, 2     ; y%2
  %1240= icmp eq i32 %1239, 0     ; y%2==0
  br i1 %1240, label %1241, label %1249     ; judge y%2==0

1241:     ; if Body
  %1242 = load i32, i32* %88     
  %1243 = load i32, i32* %87     
  %1244 = load i32, i32* %87     
  %1245= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1246= getelementptr i32,i32* %1245 , i32 %1244     
  %1247 = load i32, i32* %1246     ; 1*SHIFT_TABLE[i]
  %1248 = add i32 %1242, %1247     ; ans+1*SHIFT_TABLE[i]
  store i32 %1248, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1249     

1249:     
  br label %1263     

1250:     ; else Body
  %1251 = load i32, i32* %85     
  %1252 = srem i32 %1251, 2     ; y%2
  %1253= icmp ne i32 %1252, 0     
  br i1 %1253, label %1254, label %1262     ; judge y%2

1254:     ; if Body
  %1255 = load i32, i32* %88     
  %1256 = load i32, i32* %87     
  %1257 = load i32, i32* %87     
  %1258= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1259= getelementptr i32,i32* %1258 , i32 %1257     
  %1260 = load i32, i32* %1259     ; 1*SHIFT_TABLE[i]
  %1261 = add i32 %1255, %1260     ; ans+1*SHIFT_TABLE[i]
  store i32 %1261, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1262     

1262:     
  br label %1263     

1263:     
  %1264 = load i32, i32* %86     
  %1265 = sdiv i32 %1264, 2     ; x/2
  store i32 %1265, i32* %86     ; x=x/2
  %1266 = load i32, i32* %85     
  %1267 = sdiv i32 %1266, 2     ; y/2
  store i32 %1267, i32* %85     ; y=y/2
  %1268 = load i32, i32* %87     
  %1269 = add i32 %1268, 1     ; i+1
  store i32 %1269, i32* %87     ; i=i+1
  br label %1230     

1270:     ; exit while
  %1271 = load i32, i32* %88     
  store i32 %1271, i32* %45     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1272 = load i32, i32* %47     
  store i32 %1272, i32* %86     ; x=al
  %1273 = load i32, i32* %46     
  store i32 %1273, i32* %85     ; y=c
  br label %1274     

1274:     ; judge i<16
  %1275 = load i32, i32* %87     
  %1276= icmp slt i32 %1275, 16     ; i<16
  br i1 %1276, label %1277, label %1300     

1277:     ; while Body
  %1278 = load i32, i32* %86     
  %1279 = srem i32 %1278, 2     ; x%2
  %1280= icmp ne i32 %1279, 0     
  br i1 %1280, label %1281, label %1293     

1281:     
  %1282 = load i32, i32* %85     
  %1283 = srem i32 %1282, 2     ; x%2 && y%2
  %1284= icmp ne i32 %1283, 0     
  br i1 %1284, label %1285, label %1293     ; judge x%2&&y%2

1285:     ; if Body
  %1286 = load i32, i32* %88     
  %1287 = load i32, i32* %87     
  %1288 = load i32, i32* %87     
  %1289= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1290= getelementptr i32,i32* %1289 , i32 %1288     
  %1291 = load i32, i32* %1290     ; 1*SHIFT_TABLE[i]
  %1292 = add i32 %1286, %1291     ; ans+1*SHIFT_TABLE[i]
  store i32 %1292, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1293     

1293:     
  %1294 = load i32, i32* %86     
  %1295 = sdiv i32 %1294, 2     ; x/2
  store i32 %1295, i32* %86     ; x=x/2
  %1296 = load i32, i32* %85     
  %1297 = sdiv i32 %1296, 2     ; y/2
  store i32 %1297, i32* %85     ; y=y/2
  %1298 = load i32, i32* %87     
  %1299 = add i32 %1298, 1     ; i+1
  store i32 %1299, i32* %87     ; i=i+1
  br label %1274     

1300:     ; exit while
  %1301 = load i32, i32* %88     
  store i32 %1301, i32* %46     ; c=ans
  br i1 0, label %1302, label %1303     ; judge (1)>15

1302:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %1333     

1303:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1304 = load i32, i32* %46     
  %1305 = mul i32 %1304, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %1305, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %1306     

1306:     ; judge i<16
  %1307 = load i32, i32* %87     
  %1308= icmp slt i32 %1307, 16     ; i<16
  br i1 %1308, label %1309, label %1332     

1309:     ; while Body
  %1310 = load i32, i32* %86     
  %1311 = srem i32 %1310, 2     ; x%2
  %1312= icmp ne i32 %1311, 0     
  br i1 %1312, label %1313, label %1325     

1313:     
  %1314 = load i32, i32* %85     
  %1315 = srem i32 %1314, 2     ; x%2 && y%2
  %1316= icmp ne i32 %1315, 0     
  br i1 %1316, label %1317, label %1325     ; judge x%2&&y%2

1317:     ; if Body
  %1318 = load i32, i32* %88     
  %1319 = load i32, i32* %87     
  %1320 = load i32, i32* %87     
  %1321= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1322= getelementptr i32,i32* %1321 , i32 %1320     
  %1323 = load i32, i32* %1322     ; 1*SHIFT_TABLE[i]
  %1324 = add i32 %1318, %1323     ; ans+1*SHIFT_TABLE[i]
  store i32 %1324, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1325     

1325:     
  %1326 = load i32, i32* %86     
  %1327 = sdiv i32 %1326, 2     ; x/2
  store i32 %1327, i32* %86     ; x=x/2
  %1328 = load i32, i32* %85     
  %1329 = sdiv i32 %1328, 2     ; y/2
  store i32 %1329, i32* %85     ; y=y/2
  %1330 = load i32, i32* %87     
  %1331 = add i32 %1330, 1     ; i+1
  store i32 %1331, i32* %87     ; i=i+1
  br label %1306     

1332:     ; exit while
  br label %1333     

1333:     
  %1334 = load i32, i32* %88     
  store i32 %1334, i32* %46     ; c=ans
  %1335 = load i32, i32* %45     
  store i32 %1335, i32* %47     ; al=sum
  br label %1224     

1336:     ; exit while
  %1337 = load i32, i32* %47     
  store i32 %1337, i32* %88     ; ans=al
  %1338 = load i32, i32* %88     
  store i32 %1338, i32* %48     ; mres=ans
  br label %1339     

1339:     
  %1340 = load i32, i32* %50     
  store i32 %1340, i32* %44     ; al= = load i32, i32* 
  %1341 = load i32, i32* %50     
  store i32 %1341, i32* %43     ; c= = load i32, i32* 
  br label %1342     

1342:     ; judge c
  %1343 = load i32, i32* %43     
  %1344= icmp ne i32 %1343, 0     
  br i1 %1344, label %1345, label %1454     

1345:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1346 = load i32, i32* %44     
  store i32 %1346, i32* %86     ; x=al
  %1347 = load i32, i32* %43     
  store i32 %1347, i32* %85     ; y=c
  br label %1348     

1348:     ; judge i<16
  %1349 = load i32, i32* %87     
  %1350= icmp slt i32 %1349, 16     ; i<16
  br i1 %1350, label %1351, label %1388     

1351:     ; while Body
  %1352 = load i32, i32* %86     
  %1353 = srem i32 %1352, 2     ; x%2
  %1354= icmp ne i32 %1353, 0     
  br i1 %1354, label %1355, label %1368     ; judge x%2

1355:     ; if Body
  %1356 = load i32, i32* %85     
  %1357 = srem i32 %1356, 2     ; y%2
  %1358= icmp eq i32 %1357, 0     ; y%2==0
  br i1 %1358, label %1359, label %1367     ; judge y%2==0

1359:     ; if Body
  %1360 = load i32, i32* %88     
  %1361 = load i32, i32* %87     
  %1362 = load i32, i32* %87     
  %1363= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1364= getelementptr i32,i32* %1363 , i32 %1362     
  %1365 = load i32, i32* %1364     ; 1*SHIFT_TABLE[i]
  %1366 = add i32 %1360, %1365     ; ans+1*SHIFT_TABLE[i]
  store i32 %1366, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1367     

1367:     
  br label %1381     

1368:     ; else Body
  %1369 = load i32, i32* %85     
  %1370 = srem i32 %1369, 2     ; y%2
  %1371= icmp ne i32 %1370, 0     
  br i1 %1371, label %1372, label %1380     ; judge y%2

1372:     ; if Body
  %1373 = load i32, i32* %88     
  %1374 = load i32, i32* %87     
  %1375 = load i32, i32* %87     
  %1376= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1377= getelementptr i32,i32* %1376 , i32 %1375     
  %1378 = load i32, i32* %1377     ; 1*SHIFT_TABLE[i]
  %1379 = add i32 %1373, %1378     ; ans+1*SHIFT_TABLE[i]
  store i32 %1379, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1380     

1380:     
  br label %1381     

1381:     
  %1382 = load i32, i32* %86     
  %1383 = sdiv i32 %1382, 2     ; x/2
  store i32 %1383, i32* %86     ; x=x/2
  %1384 = load i32, i32* %85     
  %1385 = sdiv i32 %1384, 2     ; y/2
  store i32 %1385, i32* %85     ; y=y/2
  %1386 = load i32, i32* %87     
  %1387 = add i32 %1386, 1     ; i+1
  store i32 %1387, i32* %87     ; i=i+1
  br label %1348     

1388:     ; exit while
  %1389 = load i32, i32* %88     
  store i32 %1389, i32* %42     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1390 = load i32, i32* %44     
  store i32 %1390, i32* %86     ; x=al
  %1391 = load i32, i32* %43     
  store i32 %1391, i32* %85     ; y=c
  br label %1392     

1392:     ; judge i<16
  %1393 = load i32, i32* %87     
  %1394= icmp slt i32 %1393, 16     ; i<16
  br i1 %1394, label %1395, label %1418     

1395:     ; while Body
  %1396 = load i32, i32* %86     
  %1397 = srem i32 %1396, 2     ; x%2
  %1398= icmp ne i32 %1397, 0     
  br i1 %1398, label %1399, label %1411     

1399:     
  %1400 = load i32, i32* %85     
  %1401 = srem i32 %1400, 2     ; x%2 && y%2
  %1402= icmp ne i32 %1401, 0     
  br i1 %1402, label %1403, label %1411     ; judge x%2&&y%2

1403:     ; if Body
  %1404 = load i32, i32* %88     
  %1405 = load i32, i32* %87     
  %1406 = load i32, i32* %87     
  %1407= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1408= getelementptr i32,i32* %1407 , i32 %1406     
  %1409 = load i32, i32* %1408     ; 1*SHIFT_TABLE[i]
  %1410 = add i32 %1404, %1409     ; ans+1*SHIFT_TABLE[i]
  store i32 %1410, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1411     

1411:     
  %1412 = load i32, i32* %86     
  %1413 = sdiv i32 %1412, 2     ; x/2
  store i32 %1413, i32* %86     ; x=x/2
  %1414 = load i32, i32* %85     
  %1415 = sdiv i32 %1414, 2     ; y/2
  store i32 %1415, i32* %85     ; y=y/2
  %1416 = load i32, i32* %87     
  %1417 = add i32 %1416, 1     ; i+1
  store i32 %1417, i32* %87     ; i=i+1
  br label %1392     

1418:     ; exit while
  %1419 = load i32, i32* %88     
  store i32 %1419, i32* %43     ; c=ans
  br i1 0, label %1420, label %1421     ; judge (1)>15

1420:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %1451     

1421:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1422 = load i32, i32* %43     
  %1423 = mul i32 %1422, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %1423, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %1424     

1424:     ; judge i<16
  %1425 = load i32, i32* %87     
  %1426= icmp slt i32 %1425, 16     ; i<16
  br i1 %1426, label %1427, label %1450     

1427:     ; while Body
  %1428 = load i32, i32* %86     
  %1429 = srem i32 %1428, 2     ; x%2
  %1430= icmp ne i32 %1429, 0     
  br i1 %1430, label %1431, label %1443     

1431:     
  %1432 = load i32, i32* %85     
  %1433 = srem i32 %1432, 2     ; x%2 && y%2
  %1434= icmp ne i32 %1433, 0     
  br i1 %1434, label %1435, label %1443     ; judge x%2&&y%2

1435:     ; if Body
  %1436 = load i32, i32* %88     
  %1437 = load i32, i32* %87     
  %1438 = load i32, i32* %87     
  %1439= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1440= getelementptr i32,i32* %1439 , i32 %1438     
  %1441 = load i32, i32* %1440     ; 1*SHIFT_TABLE[i]
  %1442 = add i32 %1436, %1441     ; ans+1*SHIFT_TABLE[i]
  store i32 %1442, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1443     

1443:     
  %1444 = load i32, i32* %86     
  %1445 = sdiv i32 %1444, 2     ; x/2
  store i32 %1445, i32* %86     ; x=x/2
  %1446 = load i32, i32* %85     
  %1447 = sdiv i32 %1446, 2     ; y/2
  store i32 %1447, i32* %85     ; y=y/2
  %1448 = load i32, i32* %87     
  %1449 = add i32 %1448, 1     ; i+1
  store i32 %1449, i32* %87     ; i=i+1
  br label %1424     

1450:     ; exit while
  br label %1451     

1451:     
  %1452 = load i32, i32* %88     
  store i32 %1452, i32* %43     ; c=ans
  %1453 = load i32, i32* %42     
  store i32 %1453, i32* %44     ; al=sum
  br label %1342     

1454:     ; exit while
  %1455 = load i32, i32* %44     
  store i32 %1455, i32* %88     ; ans=al
  %1456 = load i32, i32* %88     
  store i32 %1456, i32* %50     ; ml=ans
  %1457 = load i32, i32* %49     
  store i32 %1457, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  %1458 = load i32, i32* %85     
  %1459= icmp sge i32 %1458, 15     ; y>=15
  br i1 %1459, label %1460, label %1466     ; judge y>=15

1460:     ; if Body
  %1461 = load i32, i32* %86     
  %1462= icmp slt i32 %1461, 0     ; x<0
  br i1 %1462, label %1463, label %1464     ; judge x<0

1463:     ; if Body
  store i32 65535, i32* %88     ; ans=0xffff
  br label %1465     

1464:     ; else Body
  store i32 0, i32* %88     ; ans=0
  br label %1465     

1465:     
  br label %1504     

1466:     ; else Body
  %1467 = load i32, i32* %85     
  %1468= icmp sgt i32 %1467, 0     ; y>0
  br i1 %1468, label %1469, label %1501     ; judge y>0

1469:     ; if Body
  %1470 = load i32, i32* %86     
  %1471= icmp sgt i32 %1470, 32767     ; x>0x7fff
  br i1 %1471, label %1472, label %1492     ; judge x>0x7fff

1472:     ; if Body
  %1473 = load i32, i32* %86     
  %1474 = load i32, i32* %85     
  %1475 = load i32, i32* %85     
  %1476= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1477= getelementptr i32,i32* %1476 , i32 %1475     
  %1478 = load i32, i32* %1477     
  %1479 = sdiv i32 %1473, %1478     ; x/SHIFT_TABLE[y]
  store i32 %1479, i32* %86     ; x=x/SHIFT_TABLE[y]
  %1480 = load i32, i32* %86     
  %1481 = add i32 %1480, 65536     ; x+65536
  %1482 = load i32, i32* %85     
  %1483 = sub i32 15, %1482     ; 15-y
  %1484 = add i32 %1483, 1     ; 15-y+1
  %1485 = load i32, i32* %85     
  %1486 = sub i32 15, %1485     ; 15-y
  %1487 = add i32 %1486, 1     ; 15-y+1
  %1488= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1489= getelementptr i32,i32* %1488 , i32 %1487     
  %1490 = load i32, i32* %1489     
  %1491 = sub i32 %1481, %1490     ; x+65536-SHIFT_TABLE[15-y+1]
  store i32 %1491, i32* %88     ; ans=x+65536-SHIFT_TABLE[15-y+1]
  br label %1500     

1492:     ; else Body
  %1493 = load i32, i32* %86     
  %1494 = load i32, i32* %85     
  %1495 = load i32, i32* %85     
  %1496= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1497= getelementptr i32,i32* %1496 , i32 %1495     
  %1498 = load i32, i32* %1497     
  %1499 = sdiv i32 %1493, %1498     ; x/SHIFT_TABLE[y]
  store i32 %1499, i32* %88     ; ans=x/SHIFT_TABLE[y]
  br label %1500     

1500:     
  br label %1503     

1501:     ; else Body
  %1502 = load i32, i32* %86     
  store i32 %1502, i32* %88     ; ans=x
  br label %1503     

1503:     
  br label %1504     

1504:     
  %1505 = load i32, i32* %88     
  store i32 %1505, i32* %49     ; mr=ans
  br label %1187     

1506:     ; exit while
  %1507 = load i32, i32* %48     
  store i32 %1507, i32* %88     ; ans=mres
  %1508 = load i32, i32* %88     
  store i32 %1508, i32* %62     ; pl=ans
  %1509 = load i32, i32* %61     
  store i32 %1509, i32* %86     ; x=pr
  store i32 1, i32* %85     ; y=1
  %1510 = load i32, i32* %85     
  %1511= icmp sge i32 %1510, 15     ; y>=15
  br i1 %1511, label %1512, label %1518     ; judge y>=15

1512:     ; if Body
  %1513 = load i32, i32* %86     
  %1514= icmp slt i32 %1513, 0     ; x<0
  br i1 %1514, label %1515, label %1516     ; judge x<0

1515:     ; if Body
  store i32 65535, i32* %88     ; ans=0xffff
  br label %1517     

1516:     ; else Body
  store i32 0, i32* %88     ; ans=0
  br label %1517     

1517:     
  br label %1556     

1518:     ; else Body
  %1519 = load i32, i32* %85     
  %1520= icmp sgt i32 %1519, 0     ; y>0
  br i1 %1520, label %1521, label %1553     ; judge y>0

1521:     ; if Body
  %1522 = load i32, i32* %86     
  %1523= icmp sgt i32 %1522, 32767     ; x>0x7fff
  br i1 %1523, label %1524, label %1544     ; judge x>0x7fff

1524:     ; if Body
  %1525 = load i32, i32* %86     
  %1526 = load i32, i32* %85     
  %1527 = load i32, i32* %85     
  %1528= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1529= getelementptr i32,i32* %1528 , i32 %1527     
  %1530 = load i32, i32* %1529     
  %1531 = sdiv i32 %1525, %1530     ; x/SHIFT_TABLE[y]
  store i32 %1531, i32* %86     ; x=x/SHIFT_TABLE[y]
  %1532 = load i32, i32* %86     
  %1533 = add i32 %1532, 65536     ; x+65536
  %1534 = load i32, i32* %85     
  %1535 = sub i32 15, %1534     ; 15-y
  %1536 = add i32 %1535, 1     ; 15-y+1
  %1537 = load i32, i32* %85     
  %1538 = sub i32 15, %1537     ; 15-y
  %1539 = add i32 %1538, 1     ; 15-y+1
  %1540= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1541= getelementptr i32,i32* %1540 , i32 %1539     
  %1542 = load i32, i32* %1541     
  %1543 = sub i32 %1533, %1542     ; x+65536-SHIFT_TABLE[15-y+1]
  store i32 %1543, i32* %88     ; ans=x+65536-SHIFT_TABLE[15-y+1]
  br label %1552     

1544:     ; else Body
  %1545 = load i32, i32* %86     
  %1546 = load i32, i32* %85     
  %1547 = load i32, i32* %85     
  %1548= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1549= getelementptr i32,i32* %1548 , i32 %1547     
  %1550 = load i32, i32* %1549     
  %1551 = sdiv i32 %1545, %1550     ; x/SHIFT_TABLE[y]
  store i32 %1551, i32* %88     ; ans=x/SHIFT_TABLE[y]
  br label %1552     

1552:     
  br label %1555     

1553:     ; else Body
  %1554 = load i32, i32* %86     
  store i32 %1554, i32* %88     ; ans=x
  br label %1555     

1555:     
  br label %1556     

1556:     
  %1557 = load i32, i32* %88     
  store i32 %1557, i32* %61     ; pr=ans
  br label %825     

1558:     ; exit while
  %1559 = load i32, i32* %60     
  store i32 %1559, i32* %88     ; ans=pres
  %1560 = load i32, i32* %88     
  call void @putint(i32 %1560)     ; call putint(ans)
  call void @putch(i32 10)     ; call putch(10)
  store i32 2, i32* %84     ; cur=2
  br label %1561     

1561:     ; judge cur<16
  %1562 = load i32, i32* %84     
  %1563= icmp slt i32 %1562, 16     ; cur<16
  br i1 %1563, label %1564, label %2304     

1564:     ; while Body
  store i32 2, i32* %41     ; pl=i32 2
  %1565 = load i32, i32* %84     
  store i32 %1565, i32* %40     ; pr= = load i32, i32* 
  store i32 1, i32* %39     ; pres=i32 1
  br label %1566     

1566:     ; judge pr>0
  %1567 = load i32, i32* %40     
  %1568= icmp sgt i32 %1567, 0     ; pr>0
  br i1 %1568, label %1569, label %2299     

1569:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1570 = load i32, i32* %40     
  store i32 %1570, i32* %86     ; x=pr
  store i32 1, i32* %85     ; y=1
  br label %1571     

1571:     ; judge i<16
  %1572 = load i32, i32* %87     
  %1573= icmp slt i32 %1572, 16     ; i<16
  br i1 %1573, label %1574, label %1597     

1574:     ; while Body
  %1575 = load i32, i32* %86     
  %1576 = srem i32 %1575, 2     ; x%2
  %1577= icmp ne i32 %1576, 0     
  br i1 %1577, label %1578, label %1590     

1578:     
  %1579 = load i32, i32* %85     
  %1580 = srem i32 %1579, 2     ; x%2 && y%2
  %1581= icmp ne i32 %1580, 0     
  br i1 %1581, label %1582, label %1590     ; judge x%2&&y%2

1582:     ; if Body
  %1583 = load i32, i32* %88     
  %1584 = load i32, i32* %87     
  %1585 = load i32, i32* %87     
  %1586= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1587= getelementptr i32,i32* %1586 , i32 %1585     
  %1588 = load i32, i32* %1587     ; 1*SHIFT_TABLE[i]
  %1589 = add i32 %1583, %1588     ; ans+1*SHIFT_TABLE[i]
  store i32 %1589, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1590     

1590:     
  %1591 = load i32, i32* %86     
  %1592 = sdiv i32 %1591, 2     ; x/2
  store i32 %1592, i32* %86     ; x=x/2
  %1593 = load i32, i32* %85     
  %1594 = sdiv i32 %1593, 2     ; y/2
  store i32 %1594, i32* %85     ; y=y/2
  %1595 = load i32, i32* %87     
  %1596 = add i32 %1595, 1     ; i+1
  store i32 %1596, i32* %87     ; i=i+1
  br label %1571     

1597:     ; exit while
  %1598 = load i32, i32* %88     
  %1599= icmp ne i32 %1598, 0     
  br i1 %1599, label %1600, label %1925     ; judge ans

1600:     ; if Body
  %1601 = load i32, i32* %39     
  store i32 %1601, i32* %38     ; ml= = load i32, i32* 
  %1602 = load i32, i32* %41     
  store i32 %1602, i32* %37     ; mr= = load i32, i32* 
  store i32 0, i32* %36     ; mres=i32 0
  br label %1603     

1603:     ; judge mr
  %1604 = load i32, i32* %37     
  %1605= icmp ne i32 %1604, 0     
  br i1 %1605, label %1606, label %1922     

1606:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1607 = load i32, i32* %37     
  store i32 %1607, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  br label %1608     

1608:     ; judge i<16
  %1609 = load i32, i32* %87     
  %1610= icmp slt i32 %1609, 16     ; i<16
  br i1 %1610, label %1611, label %1634     

1611:     ; while Body
  %1612 = load i32, i32* %86     
  %1613 = srem i32 %1612, 2     ; x%2
  %1614= icmp ne i32 %1613, 0     
  br i1 %1614, label %1615, label %1627     

1615:     
  %1616 = load i32, i32* %85     
  %1617 = srem i32 %1616, 2     ; x%2 && y%2
  %1618= icmp ne i32 %1617, 0     
  br i1 %1618, label %1619, label %1627     ; judge x%2&&y%2

1619:     ; if Body
  %1620 = load i32, i32* %88     
  %1621 = load i32, i32* %87     
  %1622 = load i32, i32* %87     
  %1623= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1624= getelementptr i32,i32* %1623 , i32 %1622     
  %1625 = load i32, i32* %1624     ; 1*SHIFT_TABLE[i]
  %1626 = add i32 %1620, %1625     ; ans+1*SHIFT_TABLE[i]
  store i32 %1626, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1627     

1627:     
  %1628 = load i32, i32* %86     
  %1629 = sdiv i32 %1628, 2     ; x/2
  store i32 %1629, i32* %86     ; x=x/2
  %1630 = load i32, i32* %85     
  %1631 = sdiv i32 %1630, 2     ; y/2
  store i32 %1631, i32* %85     ; y=y/2
  %1632 = load i32, i32* %87     
  %1633 = add i32 %1632, 1     ; i+1
  store i32 %1633, i32* %87     ; i=i+1
  br label %1608     

1634:     ; exit while
  %1635 = load i32, i32* %88     
  %1636= icmp ne i32 %1635, 0     
  br i1 %1636, label %1637, label %1755     ; judge ans

1637:     ; if Body
  %1638 = load i32, i32* %36     
  store i32 %1638, i32* %35     ; al= = load i32, i32* 
  %1639 = load i32, i32* %38     
  store i32 %1639, i32* %34     ; c= = load i32, i32* 
  br label %1640     

1640:     ; judge c
  %1641 = load i32, i32* %34     
  %1642= icmp ne i32 %1641, 0     
  br i1 %1642, label %1643, label %1752     

1643:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1644 = load i32, i32* %35     
  store i32 %1644, i32* %86     ; x=al
  %1645 = load i32, i32* %34     
  store i32 %1645, i32* %85     ; y=c
  br label %1646     

1646:     ; judge i<16
  %1647 = load i32, i32* %87     
  %1648= icmp slt i32 %1647, 16     ; i<16
  br i1 %1648, label %1649, label %1686     

1649:     ; while Body
  %1650 = load i32, i32* %86     
  %1651 = srem i32 %1650, 2     ; x%2
  %1652= icmp ne i32 %1651, 0     
  br i1 %1652, label %1653, label %1666     ; judge x%2

1653:     ; if Body
  %1654 = load i32, i32* %85     
  %1655 = srem i32 %1654, 2     ; y%2
  %1656= icmp eq i32 %1655, 0     ; y%2==0
  br i1 %1656, label %1657, label %1665     ; judge y%2==0

1657:     ; if Body
  %1658 = load i32, i32* %88     
  %1659 = load i32, i32* %87     
  %1660 = load i32, i32* %87     
  %1661= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1662= getelementptr i32,i32* %1661 , i32 %1660     
  %1663 = load i32, i32* %1662     ; 1*SHIFT_TABLE[i]
  %1664 = add i32 %1658, %1663     ; ans+1*SHIFT_TABLE[i]
  store i32 %1664, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1665     

1665:     
  br label %1679     

1666:     ; else Body
  %1667 = load i32, i32* %85     
  %1668 = srem i32 %1667, 2     ; y%2
  %1669= icmp ne i32 %1668, 0     
  br i1 %1669, label %1670, label %1678     ; judge y%2

1670:     ; if Body
  %1671 = load i32, i32* %88     
  %1672 = load i32, i32* %87     
  %1673 = load i32, i32* %87     
  %1674= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1675= getelementptr i32,i32* %1674 , i32 %1673     
  %1676 = load i32, i32* %1675     ; 1*SHIFT_TABLE[i]
  %1677 = add i32 %1671, %1676     ; ans+1*SHIFT_TABLE[i]
  store i32 %1677, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1678     

1678:     
  br label %1679     

1679:     
  %1680 = load i32, i32* %86     
  %1681 = sdiv i32 %1680, 2     ; x/2
  store i32 %1681, i32* %86     ; x=x/2
  %1682 = load i32, i32* %85     
  %1683 = sdiv i32 %1682, 2     ; y/2
  store i32 %1683, i32* %85     ; y=y/2
  %1684 = load i32, i32* %87     
  %1685 = add i32 %1684, 1     ; i+1
  store i32 %1685, i32* %87     ; i=i+1
  br label %1646     

1686:     ; exit while
  %1687 = load i32, i32* %88     
  store i32 %1687, i32* %33     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1688 = load i32, i32* %35     
  store i32 %1688, i32* %86     ; x=al
  %1689 = load i32, i32* %34     
  store i32 %1689, i32* %85     ; y=c
  br label %1690     

1690:     ; judge i<16
  %1691 = load i32, i32* %87     
  %1692= icmp slt i32 %1691, 16     ; i<16
  br i1 %1692, label %1693, label %1716     

1693:     ; while Body
  %1694 = load i32, i32* %86     
  %1695 = srem i32 %1694, 2     ; x%2
  %1696= icmp ne i32 %1695, 0     
  br i1 %1696, label %1697, label %1709     

1697:     
  %1698 = load i32, i32* %85     
  %1699 = srem i32 %1698, 2     ; x%2 && y%2
  %1700= icmp ne i32 %1699, 0     
  br i1 %1700, label %1701, label %1709     ; judge x%2&&y%2

1701:     ; if Body
  %1702 = load i32, i32* %88     
  %1703 = load i32, i32* %87     
  %1704 = load i32, i32* %87     
  %1705= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1706= getelementptr i32,i32* %1705 , i32 %1704     
  %1707 = load i32, i32* %1706     ; 1*SHIFT_TABLE[i]
  %1708 = add i32 %1702, %1707     ; ans+1*SHIFT_TABLE[i]
  store i32 %1708, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1709     

1709:     
  %1710 = load i32, i32* %86     
  %1711 = sdiv i32 %1710, 2     ; x/2
  store i32 %1711, i32* %86     ; x=x/2
  %1712 = load i32, i32* %85     
  %1713 = sdiv i32 %1712, 2     ; y/2
  store i32 %1713, i32* %85     ; y=y/2
  %1714 = load i32, i32* %87     
  %1715 = add i32 %1714, 1     ; i+1
  store i32 %1715, i32* %87     ; i=i+1
  br label %1690     

1716:     ; exit while
  %1717 = load i32, i32* %88     
  store i32 %1717, i32* %34     ; c=ans
  br i1 0, label %1718, label %1719     ; judge (1)>15

1718:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %1749     

1719:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1720 = load i32, i32* %34     
  %1721 = mul i32 %1720, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %1721, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %1722     

1722:     ; judge i<16
  %1723 = load i32, i32* %87     
  %1724= icmp slt i32 %1723, 16     ; i<16
  br i1 %1724, label %1725, label %1748     

1725:     ; while Body
  %1726 = load i32, i32* %86     
  %1727 = srem i32 %1726, 2     ; x%2
  %1728= icmp ne i32 %1727, 0     
  br i1 %1728, label %1729, label %1741     

1729:     
  %1730 = load i32, i32* %85     
  %1731 = srem i32 %1730, 2     ; x%2 && y%2
  %1732= icmp ne i32 %1731, 0     
  br i1 %1732, label %1733, label %1741     ; judge x%2&&y%2

1733:     ; if Body
  %1734 = load i32, i32* %88     
  %1735 = load i32, i32* %87     
  %1736 = load i32, i32* %87     
  %1737= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1738= getelementptr i32,i32* %1737 , i32 %1736     
  %1739 = load i32, i32* %1738     ; 1*SHIFT_TABLE[i]
  %1740 = add i32 %1734, %1739     ; ans+1*SHIFT_TABLE[i]
  store i32 %1740, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1741     

1741:     
  %1742 = load i32, i32* %86     
  %1743 = sdiv i32 %1742, 2     ; x/2
  store i32 %1743, i32* %86     ; x=x/2
  %1744 = load i32, i32* %85     
  %1745 = sdiv i32 %1744, 2     ; y/2
  store i32 %1745, i32* %85     ; y=y/2
  %1746 = load i32, i32* %87     
  %1747 = add i32 %1746, 1     ; i+1
  store i32 %1747, i32* %87     ; i=i+1
  br label %1722     

1748:     ; exit while
  br label %1749     

1749:     
  %1750 = load i32, i32* %88     
  store i32 %1750, i32* %34     ; c=ans
  %1751 = load i32, i32* %33     
  store i32 %1751, i32* %35     ; al=sum
  br label %1640     

1752:     ; exit while
  %1753 = load i32, i32* %35     
  store i32 %1753, i32* %88     ; ans=al
  %1754 = load i32, i32* %88     
  store i32 %1754, i32* %36     ; mres=ans
  br label %1755     

1755:     
  %1756 = load i32, i32* %38     
  store i32 %1756, i32* %32     ; al= = load i32, i32* 
  %1757 = load i32, i32* %38     
  store i32 %1757, i32* %31     ; c= = load i32, i32* 
  br label %1758     

1758:     ; judge c
  %1759 = load i32, i32* %31     
  %1760= icmp ne i32 %1759, 0     
  br i1 %1760, label %1761, label %1870     

1761:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1762 = load i32, i32* %32     
  store i32 %1762, i32* %86     ; x=al
  %1763 = load i32, i32* %31     
  store i32 %1763, i32* %85     ; y=c
  br label %1764     

1764:     ; judge i<16
  %1765 = load i32, i32* %87     
  %1766= icmp slt i32 %1765, 16     ; i<16
  br i1 %1766, label %1767, label %1804     

1767:     ; while Body
  %1768 = load i32, i32* %86     
  %1769 = srem i32 %1768, 2     ; x%2
  %1770= icmp ne i32 %1769, 0     
  br i1 %1770, label %1771, label %1784     ; judge x%2

1771:     ; if Body
  %1772 = load i32, i32* %85     
  %1773 = srem i32 %1772, 2     ; y%2
  %1774= icmp eq i32 %1773, 0     ; y%2==0
  br i1 %1774, label %1775, label %1783     ; judge y%2==0

1775:     ; if Body
  %1776 = load i32, i32* %88     
  %1777 = load i32, i32* %87     
  %1778 = load i32, i32* %87     
  %1779= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1780= getelementptr i32,i32* %1779 , i32 %1778     
  %1781 = load i32, i32* %1780     ; 1*SHIFT_TABLE[i]
  %1782 = add i32 %1776, %1781     ; ans+1*SHIFT_TABLE[i]
  store i32 %1782, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1783     

1783:     
  br label %1797     

1784:     ; else Body
  %1785 = load i32, i32* %85     
  %1786 = srem i32 %1785, 2     ; y%2
  %1787= icmp ne i32 %1786, 0     
  br i1 %1787, label %1788, label %1796     ; judge y%2

1788:     ; if Body
  %1789 = load i32, i32* %88     
  %1790 = load i32, i32* %87     
  %1791 = load i32, i32* %87     
  %1792= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1793= getelementptr i32,i32* %1792 , i32 %1791     
  %1794 = load i32, i32* %1793     ; 1*SHIFT_TABLE[i]
  %1795 = add i32 %1789, %1794     ; ans+1*SHIFT_TABLE[i]
  store i32 %1795, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1796     

1796:     
  br label %1797     

1797:     
  %1798 = load i32, i32* %86     
  %1799 = sdiv i32 %1798, 2     ; x/2
  store i32 %1799, i32* %86     ; x=x/2
  %1800 = load i32, i32* %85     
  %1801 = sdiv i32 %1800, 2     ; y/2
  store i32 %1801, i32* %85     ; y=y/2
  %1802 = load i32, i32* %87     
  %1803 = add i32 %1802, 1     ; i+1
  store i32 %1803, i32* %87     ; i=i+1
  br label %1764     

1804:     ; exit while
  %1805 = load i32, i32* %88     
  store i32 %1805, i32* %30     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1806 = load i32, i32* %32     
  store i32 %1806, i32* %86     ; x=al
  %1807 = load i32, i32* %31     
  store i32 %1807, i32* %85     ; y=c
  br label %1808     

1808:     ; judge i<16
  %1809 = load i32, i32* %87     
  %1810= icmp slt i32 %1809, 16     ; i<16
  br i1 %1810, label %1811, label %1834     

1811:     ; while Body
  %1812 = load i32, i32* %86     
  %1813 = srem i32 %1812, 2     ; x%2
  %1814= icmp ne i32 %1813, 0     
  br i1 %1814, label %1815, label %1827     

1815:     
  %1816 = load i32, i32* %85     
  %1817 = srem i32 %1816, 2     ; x%2 && y%2
  %1818= icmp ne i32 %1817, 0     
  br i1 %1818, label %1819, label %1827     ; judge x%2&&y%2

1819:     ; if Body
  %1820 = load i32, i32* %88     
  %1821 = load i32, i32* %87     
  %1822 = load i32, i32* %87     
  %1823= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1824= getelementptr i32,i32* %1823 , i32 %1822     
  %1825 = load i32, i32* %1824     ; 1*SHIFT_TABLE[i]
  %1826 = add i32 %1820, %1825     ; ans+1*SHIFT_TABLE[i]
  store i32 %1826, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1827     

1827:     
  %1828 = load i32, i32* %86     
  %1829 = sdiv i32 %1828, 2     ; x/2
  store i32 %1829, i32* %86     ; x=x/2
  %1830 = load i32, i32* %85     
  %1831 = sdiv i32 %1830, 2     ; y/2
  store i32 %1831, i32* %85     ; y=y/2
  %1832 = load i32, i32* %87     
  %1833 = add i32 %1832, 1     ; i+1
  store i32 %1833, i32* %87     ; i=i+1
  br label %1808     

1834:     ; exit while
  %1835 = load i32, i32* %88     
  store i32 %1835, i32* %31     ; c=ans
  br i1 0, label %1836, label %1837     ; judge (1)>15

1836:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %1867     

1837:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1838 = load i32, i32* %31     
  %1839 = mul i32 %1838, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %1839, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %1840     

1840:     ; judge i<16
  %1841 = load i32, i32* %87     
  %1842= icmp slt i32 %1841, 16     ; i<16
  br i1 %1842, label %1843, label %1866     

1843:     ; while Body
  %1844 = load i32, i32* %86     
  %1845 = srem i32 %1844, 2     ; x%2
  %1846= icmp ne i32 %1845, 0     
  br i1 %1846, label %1847, label %1859     

1847:     
  %1848 = load i32, i32* %85     
  %1849 = srem i32 %1848, 2     ; x%2 && y%2
  %1850= icmp ne i32 %1849, 0     
  br i1 %1850, label %1851, label %1859     ; judge x%2&&y%2

1851:     ; if Body
  %1852 = load i32, i32* %88     
  %1853 = load i32, i32* %87     
  %1854 = load i32, i32* %87     
  %1855= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1856= getelementptr i32,i32* %1855 , i32 %1854     
  %1857 = load i32, i32* %1856     ; 1*SHIFT_TABLE[i]
  %1858 = add i32 %1852, %1857     ; ans+1*SHIFT_TABLE[i]
  store i32 %1858, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1859     

1859:     
  %1860 = load i32, i32* %86     
  %1861 = sdiv i32 %1860, 2     ; x/2
  store i32 %1861, i32* %86     ; x=x/2
  %1862 = load i32, i32* %85     
  %1863 = sdiv i32 %1862, 2     ; y/2
  store i32 %1863, i32* %85     ; y=y/2
  %1864 = load i32, i32* %87     
  %1865 = add i32 %1864, 1     ; i+1
  store i32 %1865, i32* %87     ; i=i+1
  br label %1840     

1866:     ; exit while
  br label %1867     

1867:     
  %1868 = load i32, i32* %88     
  store i32 %1868, i32* %31     ; c=ans
  %1869 = load i32, i32* %30     
  store i32 %1869, i32* %32     ; al=sum
  br label %1758     

1870:     ; exit while
  %1871 = load i32, i32* %32     
  store i32 %1871, i32* %88     ; ans=al
  %1872 = load i32, i32* %88     
  store i32 %1872, i32* %38     ; ml=ans
  %1873 = load i32, i32* %37     
  store i32 %1873, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  %1874 = load i32, i32* %85     
  %1875= icmp sge i32 %1874, 15     ; y>=15
  br i1 %1875, label %1876, label %1882     ; judge y>=15

1876:     ; if Body
  %1877 = load i32, i32* %86     
  %1878= icmp slt i32 %1877, 0     ; x<0
  br i1 %1878, label %1879, label %1880     ; judge x<0

1879:     ; if Body
  store i32 65535, i32* %88     ; ans=0xffff
  br label %1881     

1880:     ; else Body
  store i32 0, i32* %88     ; ans=0
  br label %1881     

1881:     
  br label %1920     

1882:     ; else Body
  %1883 = load i32, i32* %85     
  %1884= icmp sgt i32 %1883, 0     ; y>0
  br i1 %1884, label %1885, label %1917     ; judge y>0

1885:     ; if Body
  %1886 = load i32, i32* %86     
  %1887= icmp sgt i32 %1886, 32767     ; x>0x7fff
  br i1 %1887, label %1888, label %1908     ; judge x>0x7fff

1888:     ; if Body
  %1889 = load i32, i32* %86     
  %1890 = load i32, i32* %85     
  %1891 = load i32, i32* %85     
  %1892= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1893= getelementptr i32,i32* %1892 , i32 %1891     
  %1894 = load i32, i32* %1893     
  %1895 = sdiv i32 %1889, %1894     ; x/SHIFT_TABLE[y]
  store i32 %1895, i32* %86     ; x=x/SHIFT_TABLE[y]
  %1896 = load i32, i32* %86     
  %1897 = add i32 %1896, 65536     ; x+65536
  %1898 = load i32, i32* %85     
  %1899 = sub i32 15, %1898     ; 15-y
  %1900 = add i32 %1899, 1     ; 15-y+1
  %1901 = load i32, i32* %85     
  %1902 = sub i32 15, %1901     ; 15-y
  %1903 = add i32 %1902, 1     ; 15-y+1
  %1904= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1905= getelementptr i32,i32* %1904 , i32 %1903     
  %1906 = load i32, i32* %1905     
  %1907 = sub i32 %1897, %1906     ; x+65536-SHIFT_TABLE[15-y+1]
  store i32 %1907, i32* %88     ; ans=x+65536-SHIFT_TABLE[15-y+1]
  br label %1916     

1908:     ; else Body
  %1909 = load i32, i32* %86     
  %1910 = load i32, i32* %85     
  %1911 = load i32, i32* %85     
  %1912= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1913= getelementptr i32,i32* %1912 , i32 %1911     
  %1914 = load i32, i32* %1913     
  %1915 = sdiv i32 %1909, %1914     ; x/SHIFT_TABLE[y]
  store i32 %1915, i32* %88     ; ans=x/SHIFT_TABLE[y]
  br label %1916     

1916:     
  br label %1919     

1917:     ; else Body
  %1918 = load i32, i32* %86     
  store i32 %1918, i32* %88     ; ans=x
  br label %1919     

1919:     
  br label %1920     

1920:     
  %1921 = load i32, i32* %88     
  store i32 %1921, i32* %37     ; mr=ans
  br label %1603     

1922:     ; exit while
  %1923 = load i32, i32* %36     
  store i32 %1923, i32* %88     ; ans=mres
  %1924 = load i32, i32* %88     
  store i32 %1924, i32* %39     ; pres=ans
  br label %1925     

1925:     
  %1926 = load i32, i32* %41     
  store i32 %1926, i32* %29     ; ml= = load i32, i32* 
  %1927 = load i32, i32* %41     
  store i32 %1927, i32* %28     ; mr= = load i32, i32* 
  store i32 0, i32* %27     ; mres=i32 0
  br label %1928     

1928:     ; judge mr
  %1929 = load i32, i32* %28     
  %1930= icmp ne i32 %1929, 0     
  br i1 %1930, label %1931, label %2247     

1931:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1932 = load i32, i32* %28     
  store i32 %1932, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  br label %1933     

1933:     ; judge i<16
  %1934 = load i32, i32* %87     
  %1935= icmp slt i32 %1934, 16     ; i<16
  br i1 %1935, label %1936, label %1959     

1936:     ; while Body
  %1937 = load i32, i32* %86     
  %1938 = srem i32 %1937, 2     ; x%2
  %1939= icmp ne i32 %1938, 0     
  br i1 %1939, label %1940, label %1952     

1940:     
  %1941 = load i32, i32* %85     
  %1942 = srem i32 %1941, 2     ; x%2 && y%2
  %1943= icmp ne i32 %1942, 0     
  br i1 %1943, label %1944, label %1952     ; judge x%2&&y%2

1944:     ; if Body
  %1945 = load i32, i32* %88     
  %1946 = load i32, i32* %87     
  %1947 = load i32, i32* %87     
  %1948= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1949= getelementptr i32,i32* %1948 , i32 %1947     
  %1950 = load i32, i32* %1949     ; 1*SHIFT_TABLE[i]
  %1951 = add i32 %1945, %1950     ; ans+1*SHIFT_TABLE[i]
  store i32 %1951, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1952     

1952:     
  %1953 = load i32, i32* %86     
  %1954 = sdiv i32 %1953, 2     ; x/2
  store i32 %1954, i32* %86     ; x=x/2
  %1955 = load i32, i32* %85     
  %1956 = sdiv i32 %1955, 2     ; y/2
  store i32 %1956, i32* %85     ; y=y/2
  %1957 = load i32, i32* %87     
  %1958 = add i32 %1957, 1     ; i+1
  store i32 %1958, i32* %87     ; i=i+1
  br label %1933     

1959:     ; exit while
  %1960 = load i32, i32* %88     
  %1961= icmp ne i32 %1960, 0     
  br i1 %1961, label %1962, label %2080     ; judge ans

1962:     ; if Body
  %1963 = load i32, i32* %27     
  store i32 %1963, i32* %26     ; al= = load i32, i32* 
  %1964 = load i32, i32* %29     
  store i32 %1964, i32* %25     ; c= = load i32, i32* 
  br label %1965     

1965:     ; judge c
  %1966 = load i32, i32* %25     
  %1967= icmp ne i32 %1966, 0     
  br i1 %1967, label %1968, label %2077     

1968:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %1969 = load i32, i32* %26     
  store i32 %1969, i32* %86     ; x=al
  %1970 = load i32, i32* %25     
  store i32 %1970, i32* %85     ; y=c
  br label %1971     

1971:     ; judge i<16
  %1972 = load i32, i32* %87     
  %1973= icmp slt i32 %1972, 16     ; i<16
  br i1 %1973, label %1974, label %2011     

1974:     ; while Body
  %1975 = load i32, i32* %86     
  %1976 = srem i32 %1975, 2     ; x%2
  %1977= icmp ne i32 %1976, 0     
  br i1 %1977, label %1978, label %1991     ; judge x%2

1978:     ; if Body
  %1979 = load i32, i32* %85     
  %1980 = srem i32 %1979, 2     ; y%2
  %1981= icmp eq i32 %1980, 0     ; y%2==0
  br i1 %1981, label %1982, label %1990     ; judge y%2==0

1982:     ; if Body
  %1983 = load i32, i32* %88     
  %1984 = load i32, i32* %87     
  %1985 = load i32, i32* %87     
  %1986= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %1987= getelementptr i32,i32* %1986 , i32 %1985     
  %1988 = load i32, i32* %1987     ; 1*SHIFT_TABLE[i]
  %1989 = add i32 %1983, %1988     ; ans+1*SHIFT_TABLE[i]
  store i32 %1989, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %1990     

1990:     
  br label %2004     

1991:     ; else Body
  %1992 = load i32, i32* %85     
  %1993 = srem i32 %1992, 2     ; y%2
  %1994= icmp ne i32 %1993, 0     
  br i1 %1994, label %1995, label %2003     ; judge y%2

1995:     ; if Body
  %1996 = load i32, i32* %88     
  %1997 = load i32, i32* %87     
  %1998 = load i32, i32* %87     
  %1999= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2000= getelementptr i32,i32* %1999 , i32 %1998     
  %2001 = load i32, i32* %2000     ; 1*SHIFT_TABLE[i]
  %2002 = add i32 %1996, %2001     ; ans+1*SHIFT_TABLE[i]
  store i32 %2002, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2003     

2003:     
  br label %2004     

2004:     
  %2005 = load i32, i32* %86     
  %2006 = sdiv i32 %2005, 2     ; x/2
  store i32 %2006, i32* %86     ; x=x/2
  %2007 = load i32, i32* %85     
  %2008 = sdiv i32 %2007, 2     ; y/2
  store i32 %2008, i32* %85     ; y=y/2
  %2009 = load i32, i32* %87     
  %2010 = add i32 %2009, 1     ; i+1
  store i32 %2010, i32* %87     ; i=i+1
  br label %1971     

2011:     ; exit while
  %2012 = load i32, i32* %88     
  store i32 %2012, i32* %24     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2013 = load i32, i32* %26     
  store i32 %2013, i32* %86     ; x=al
  %2014 = load i32, i32* %25     
  store i32 %2014, i32* %85     ; y=c
  br label %2015     

2015:     ; judge i<16
  %2016 = load i32, i32* %87     
  %2017= icmp slt i32 %2016, 16     ; i<16
  br i1 %2017, label %2018, label %2041     

2018:     ; while Body
  %2019 = load i32, i32* %86     
  %2020 = srem i32 %2019, 2     ; x%2
  %2021= icmp ne i32 %2020, 0     
  br i1 %2021, label %2022, label %2034     

2022:     
  %2023 = load i32, i32* %85     
  %2024 = srem i32 %2023, 2     ; x%2 && y%2
  %2025= icmp ne i32 %2024, 0     
  br i1 %2025, label %2026, label %2034     ; judge x%2&&y%2

2026:     ; if Body
  %2027 = load i32, i32* %88     
  %2028 = load i32, i32* %87     
  %2029 = load i32, i32* %87     
  %2030= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2031= getelementptr i32,i32* %2030 , i32 %2029     
  %2032 = load i32, i32* %2031     ; 1*SHIFT_TABLE[i]
  %2033 = add i32 %2027, %2032     ; ans+1*SHIFT_TABLE[i]
  store i32 %2033, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2034     

2034:     
  %2035 = load i32, i32* %86     
  %2036 = sdiv i32 %2035, 2     ; x/2
  store i32 %2036, i32* %86     ; x=x/2
  %2037 = load i32, i32* %85     
  %2038 = sdiv i32 %2037, 2     ; y/2
  store i32 %2038, i32* %85     ; y=y/2
  %2039 = load i32, i32* %87     
  %2040 = add i32 %2039, 1     ; i+1
  store i32 %2040, i32* %87     ; i=i+1
  br label %2015     

2041:     ; exit while
  %2042 = load i32, i32* %88     
  store i32 %2042, i32* %25     ; c=ans
  br i1 0, label %2043, label %2044     ; judge (1)>15

2043:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %2074     

2044:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2045 = load i32, i32* %25     
  %2046 = mul i32 %2045, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %2046, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %2047     

2047:     ; judge i<16
  %2048 = load i32, i32* %87     
  %2049= icmp slt i32 %2048, 16     ; i<16
  br i1 %2049, label %2050, label %2073     

2050:     ; while Body
  %2051 = load i32, i32* %86     
  %2052 = srem i32 %2051, 2     ; x%2
  %2053= icmp ne i32 %2052, 0     
  br i1 %2053, label %2054, label %2066     

2054:     
  %2055 = load i32, i32* %85     
  %2056 = srem i32 %2055, 2     ; x%2 && y%2
  %2057= icmp ne i32 %2056, 0     
  br i1 %2057, label %2058, label %2066     ; judge x%2&&y%2

2058:     ; if Body
  %2059 = load i32, i32* %88     
  %2060 = load i32, i32* %87     
  %2061 = load i32, i32* %87     
  %2062= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2063= getelementptr i32,i32* %2062 , i32 %2061     
  %2064 = load i32, i32* %2063     ; 1*SHIFT_TABLE[i]
  %2065 = add i32 %2059, %2064     ; ans+1*SHIFT_TABLE[i]
  store i32 %2065, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2066     

2066:     
  %2067 = load i32, i32* %86     
  %2068 = sdiv i32 %2067, 2     ; x/2
  store i32 %2068, i32* %86     ; x=x/2
  %2069 = load i32, i32* %85     
  %2070 = sdiv i32 %2069, 2     ; y/2
  store i32 %2070, i32* %85     ; y=y/2
  %2071 = load i32, i32* %87     
  %2072 = add i32 %2071, 1     ; i+1
  store i32 %2072, i32* %87     ; i=i+1
  br label %2047     

2073:     ; exit while
  br label %2074     

2074:     
  %2075 = load i32, i32* %88     
  store i32 %2075, i32* %25     ; c=ans
  %2076 = load i32, i32* %24     
  store i32 %2076, i32* %26     ; al=sum
  br label %1965     

2077:     ; exit while
  %2078 = load i32, i32* %26     
  store i32 %2078, i32* %88     ; ans=al
  %2079 = load i32, i32* %88     
  store i32 %2079, i32* %27     ; mres=ans
  br label %2080     

2080:     
  %2081 = load i32, i32* %29     
  store i32 %2081, i32* %23     ; al= = load i32, i32* 
  %2082 = load i32, i32* %29     
  store i32 %2082, i32* %22     ; c= = load i32, i32* 
  br label %2083     

2083:     ; judge c
  %2084 = load i32, i32* %22     
  %2085= icmp ne i32 %2084, 0     
  br i1 %2085, label %2086, label %2195     

2086:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2087 = load i32, i32* %23     
  store i32 %2087, i32* %86     ; x=al
  %2088 = load i32, i32* %22     
  store i32 %2088, i32* %85     ; y=c
  br label %2089     

2089:     ; judge i<16
  %2090 = load i32, i32* %87     
  %2091= icmp slt i32 %2090, 16     ; i<16
  br i1 %2091, label %2092, label %2129     

2092:     ; while Body
  %2093 = load i32, i32* %86     
  %2094 = srem i32 %2093, 2     ; x%2
  %2095= icmp ne i32 %2094, 0     
  br i1 %2095, label %2096, label %2109     ; judge x%2

2096:     ; if Body
  %2097 = load i32, i32* %85     
  %2098 = srem i32 %2097, 2     ; y%2
  %2099= icmp eq i32 %2098, 0     ; y%2==0
  br i1 %2099, label %2100, label %2108     ; judge y%2==0

2100:     ; if Body
  %2101 = load i32, i32* %88     
  %2102 = load i32, i32* %87     
  %2103 = load i32, i32* %87     
  %2104= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2105= getelementptr i32,i32* %2104 , i32 %2103     
  %2106 = load i32, i32* %2105     ; 1*SHIFT_TABLE[i]
  %2107 = add i32 %2101, %2106     ; ans+1*SHIFT_TABLE[i]
  store i32 %2107, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2108     

2108:     
  br label %2122     

2109:     ; else Body
  %2110 = load i32, i32* %85     
  %2111 = srem i32 %2110, 2     ; y%2
  %2112= icmp ne i32 %2111, 0     
  br i1 %2112, label %2113, label %2121     ; judge y%2

2113:     ; if Body
  %2114 = load i32, i32* %88     
  %2115 = load i32, i32* %87     
  %2116 = load i32, i32* %87     
  %2117= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2118= getelementptr i32,i32* %2117 , i32 %2116     
  %2119 = load i32, i32* %2118     ; 1*SHIFT_TABLE[i]
  %2120 = add i32 %2114, %2119     ; ans+1*SHIFT_TABLE[i]
  store i32 %2120, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2121     

2121:     
  br label %2122     

2122:     
  %2123 = load i32, i32* %86     
  %2124 = sdiv i32 %2123, 2     ; x/2
  store i32 %2124, i32* %86     ; x=x/2
  %2125 = load i32, i32* %85     
  %2126 = sdiv i32 %2125, 2     ; y/2
  store i32 %2126, i32* %85     ; y=y/2
  %2127 = load i32, i32* %87     
  %2128 = add i32 %2127, 1     ; i+1
  store i32 %2128, i32* %87     ; i=i+1
  br label %2089     

2129:     ; exit while
  %2130 = load i32, i32* %88     
  store i32 %2130, i32* %21     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2131 = load i32, i32* %23     
  store i32 %2131, i32* %86     ; x=al
  %2132 = load i32, i32* %22     
  store i32 %2132, i32* %85     ; y=c
  br label %2133     

2133:     ; judge i<16
  %2134 = load i32, i32* %87     
  %2135= icmp slt i32 %2134, 16     ; i<16
  br i1 %2135, label %2136, label %2159     

2136:     ; while Body
  %2137 = load i32, i32* %86     
  %2138 = srem i32 %2137, 2     ; x%2
  %2139= icmp ne i32 %2138, 0     
  br i1 %2139, label %2140, label %2152     

2140:     
  %2141 = load i32, i32* %85     
  %2142 = srem i32 %2141, 2     ; x%2 && y%2
  %2143= icmp ne i32 %2142, 0     
  br i1 %2143, label %2144, label %2152     ; judge x%2&&y%2

2144:     ; if Body
  %2145 = load i32, i32* %88     
  %2146 = load i32, i32* %87     
  %2147 = load i32, i32* %87     
  %2148= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2149= getelementptr i32,i32* %2148 , i32 %2147     
  %2150 = load i32, i32* %2149     ; 1*SHIFT_TABLE[i]
  %2151 = add i32 %2145, %2150     ; ans+1*SHIFT_TABLE[i]
  store i32 %2151, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2152     

2152:     
  %2153 = load i32, i32* %86     
  %2154 = sdiv i32 %2153, 2     ; x/2
  store i32 %2154, i32* %86     ; x=x/2
  %2155 = load i32, i32* %85     
  %2156 = sdiv i32 %2155, 2     ; y/2
  store i32 %2156, i32* %85     ; y=y/2
  %2157 = load i32, i32* %87     
  %2158 = add i32 %2157, 1     ; i+1
  store i32 %2158, i32* %87     ; i=i+1
  br label %2133     

2159:     ; exit while
  %2160 = load i32, i32* %88     
  store i32 %2160, i32* %22     ; c=ans
  br i1 0, label %2161, label %2162     ; judge (1)>15

2161:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %2192     

2162:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2163 = load i32, i32* %22     
  %2164 = mul i32 %2163, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %2164, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %2165     

2165:     ; judge i<16
  %2166 = load i32, i32* %87     
  %2167= icmp slt i32 %2166, 16     ; i<16
  br i1 %2167, label %2168, label %2191     

2168:     ; while Body
  %2169 = load i32, i32* %86     
  %2170 = srem i32 %2169, 2     ; x%2
  %2171= icmp ne i32 %2170, 0     
  br i1 %2171, label %2172, label %2184     

2172:     
  %2173 = load i32, i32* %85     
  %2174 = srem i32 %2173, 2     ; x%2 && y%2
  %2175= icmp ne i32 %2174, 0     
  br i1 %2175, label %2176, label %2184     ; judge x%2&&y%2

2176:     ; if Body
  %2177 = load i32, i32* %88     
  %2178 = load i32, i32* %87     
  %2179 = load i32, i32* %87     
  %2180= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2181= getelementptr i32,i32* %2180 , i32 %2179     
  %2182 = load i32, i32* %2181     ; 1*SHIFT_TABLE[i]
  %2183 = add i32 %2177, %2182     ; ans+1*SHIFT_TABLE[i]
  store i32 %2183, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2184     

2184:     
  %2185 = load i32, i32* %86     
  %2186 = sdiv i32 %2185, 2     ; x/2
  store i32 %2186, i32* %86     ; x=x/2
  %2187 = load i32, i32* %85     
  %2188 = sdiv i32 %2187, 2     ; y/2
  store i32 %2188, i32* %85     ; y=y/2
  %2189 = load i32, i32* %87     
  %2190 = add i32 %2189, 1     ; i+1
  store i32 %2190, i32* %87     ; i=i+1
  br label %2165     

2191:     ; exit while
  br label %2192     

2192:     
  %2193 = load i32, i32* %88     
  store i32 %2193, i32* %22     ; c=ans
  %2194 = load i32, i32* %21     
  store i32 %2194, i32* %23     ; al=sum
  br label %2083     

2195:     ; exit while
  %2196 = load i32, i32* %23     
  store i32 %2196, i32* %88     ; ans=al
  %2197 = load i32, i32* %88     
  store i32 %2197, i32* %29     ; ml=ans
  %2198 = load i32, i32* %28     
  store i32 %2198, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  %2199 = load i32, i32* %85     
  %2200= icmp sge i32 %2199, 15     ; y>=15
  br i1 %2200, label %2201, label %2207     ; judge y>=15

2201:     ; if Body
  %2202 = load i32, i32* %86     
  %2203= icmp slt i32 %2202, 0     ; x<0
  br i1 %2203, label %2204, label %2205     ; judge x<0

2204:     ; if Body
  store i32 65535, i32* %88     ; ans=0xffff
  br label %2206     

2205:     ; else Body
  store i32 0, i32* %88     ; ans=0
  br label %2206     

2206:     
  br label %2245     

2207:     ; else Body
  %2208 = load i32, i32* %85     
  %2209= icmp sgt i32 %2208, 0     ; y>0
  br i1 %2209, label %2210, label %2242     ; judge y>0

2210:     ; if Body
  %2211 = load i32, i32* %86     
  %2212= icmp sgt i32 %2211, 32767     ; x>0x7fff
  br i1 %2212, label %2213, label %2233     ; judge x>0x7fff

2213:     ; if Body
  %2214 = load i32, i32* %86     
  %2215 = load i32, i32* %85     
  %2216 = load i32, i32* %85     
  %2217= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2218= getelementptr i32,i32* %2217 , i32 %2216     
  %2219 = load i32, i32* %2218     
  %2220 = sdiv i32 %2214, %2219     ; x/SHIFT_TABLE[y]
  store i32 %2220, i32* %86     ; x=x/SHIFT_TABLE[y]
  %2221 = load i32, i32* %86     
  %2222 = add i32 %2221, 65536     ; x+65536
  %2223 = load i32, i32* %85     
  %2224 = sub i32 15, %2223     ; 15-y
  %2225 = add i32 %2224, 1     ; 15-y+1
  %2226 = load i32, i32* %85     
  %2227 = sub i32 15, %2226     ; 15-y
  %2228 = add i32 %2227, 1     ; 15-y+1
  %2229= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2230= getelementptr i32,i32* %2229 , i32 %2228     
  %2231 = load i32, i32* %2230     
  %2232 = sub i32 %2222, %2231     ; x+65536-SHIFT_TABLE[15-y+1]
  store i32 %2232, i32* %88     ; ans=x+65536-SHIFT_TABLE[15-y+1]
  br label %2241     

2233:     ; else Body
  %2234 = load i32, i32* %86     
  %2235 = load i32, i32* %85     
  %2236 = load i32, i32* %85     
  %2237= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2238= getelementptr i32,i32* %2237 , i32 %2236     
  %2239 = load i32, i32* %2238     
  %2240 = sdiv i32 %2234, %2239     ; x/SHIFT_TABLE[y]
  store i32 %2240, i32* %88     ; ans=x/SHIFT_TABLE[y]
  br label %2241     

2241:     
  br label %2244     

2242:     ; else Body
  %2243 = load i32, i32* %86     
  store i32 %2243, i32* %88     ; ans=x
  br label %2244     

2244:     
  br label %2245     

2245:     
  %2246 = load i32, i32* %88     
  store i32 %2246, i32* %28     ; mr=ans
  br label %1928     

2247:     ; exit while
  %2248 = load i32, i32* %27     
  store i32 %2248, i32* %88     ; ans=mres
  %2249 = load i32, i32* %88     
  store i32 %2249, i32* %41     ; pl=ans
  %2250 = load i32, i32* %40     
  store i32 %2250, i32* %86     ; x=pr
  store i32 1, i32* %85     ; y=1
  %2251 = load i32, i32* %85     
  %2252= icmp sge i32 %2251, 15     ; y>=15
  br i1 %2252, label %2253, label %2259     ; judge y>=15

2253:     ; if Body
  %2254 = load i32, i32* %86     
  %2255= icmp slt i32 %2254, 0     ; x<0
  br i1 %2255, label %2256, label %2257     ; judge x<0

2256:     ; if Body
  store i32 65535, i32* %88     ; ans=0xffff
  br label %2258     

2257:     ; else Body
  store i32 0, i32* %88     ; ans=0
  br label %2258     

2258:     
  br label %2297     

2259:     ; else Body
  %2260 = load i32, i32* %85     
  %2261= icmp sgt i32 %2260, 0     ; y>0
  br i1 %2261, label %2262, label %2294     ; judge y>0

2262:     ; if Body
  %2263 = load i32, i32* %86     
  %2264= icmp sgt i32 %2263, 32767     ; x>0x7fff
  br i1 %2264, label %2265, label %2285     ; judge x>0x7fff

2265:     ; if Body
  %2266 = load i32, i32* %86     
  %2267 = load i32, i32* %85     
  %2268 = load i32, i32* %85     
  %2269= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2270= getelementptr i32,i32* %2269 , i32 %2268     
  %2271 = load i32, i32* %2270     
  %2272 = sdiv i32 %2266, %2271     ; x/SHIFT_TABLE[y]
  store i32 %2272, i32* %86     ; x=x/SHIFT_TABLE[y]
  %2273 = load i32, i32* %86     
  %2274 = add i32 %2273, 65536     ; x+65536
  %2275 = load i32, i32* %85     
  %2276 = sub i32 15, %2275     ; 15-y
  %2277 = add i32 %2276, 1     ; 15-y+1
  %2278 = load i32, i32* %85     
  %2279 = sub i32 15, %2278     ; 15-y
  %2280 = add i32 %2279, 1     ; 15-y+1
  %2281= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2282= getelementptr i32,i32* %2281 , i32 %2280     
  %2283 = load i32, i32* %2282     
  %2284 = sub i32 %2274, %2283     ; x+65536-SHIFT_TABLE[15-y+1]
  store i32 %2284, i32* %88     ; ans=x+65536-SHIFT_TABLE[15-y+1]
  br label %2293     

2285:     ; else Body
  %2286 = load i32, i32* %86     
  %2287 = load i32, i32* %85     
  %2288 = load i32, i32* %85     
  %2289= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2290= getelementptr i32,i32* %2289 , i32 %2288     
  %2291 = load i32, i32* %2290     
  %2292 = sdiv i32 %2286, %2291     ; x/SHIFT_TABLE[y]
  store i32 %2292, i32* %88     ; ans=x/SHIFT_TABLE[y]
  br label %2293     

2293:     
  br label %2296     

2294:     ; else Body
  %2295 = load i32, i32* %86     
  store i32 %2295, i32* %88     ; ans=x
  br label %2296     

2296:     
  br label %2297     

2297:     
  %2298 = load i32, i32* %88     
  store i32 %2298, i32* %40     ; pr=ans
  br label %1566     

2299:     ; exit while
  %2300 = load i32, i32* %39     
  store i32 %2300, i32* %88     ; ans=pres
  %2301 = load i32, i32* %88     
  call void @putint(i32 %2301)     ; call putint(ans)
  call void @putch(i32 10)     ; call putch(10)
  %2302 = load i32, i32* %84     
  %2303 = add i32 %2302, 1     ; cur+1
  store i32 %2303, i32* %84     ; cur=cur+1
  br label %1561     

2304:     ; exit while
  store i32 0, i32* %84     ; cur=0
  br label %2305     

2305:     ; judge cur<16
  %2306 = load i32, i32* %84     
  %2307= icmp slt i32 %2306, 16     ; cur<16
  br i1 %2307, label %2308, label %3056     

2308:     ; while Body
  store i32 2, i32* %20     ; pl=i32 2
  %2309 = load i32, i32* %84     
  store i32 %2309, i32* %19     ; pr= = load i32, i32* 
  store i32 1, i32* %18     ; pres=i32 1
  br label %2310     

2310:     ; judge pr>0
  %2311 = load i32, i32* %19     
  %2312= icmp sgt i32 %2311, 0     ; pr>0
  br i1 %2312, label %2313, label %3043     

2313:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2314 = load i32, i32* %19     
  store i32 %2314, i32* %86     ; x=pr
  store i32 1, i32* %85     ; y=1
  br label %2315     

2315:     ; judge i<16
  %2316 = load i32, i32* %87     
  %2317= icmp slt i32 %2316, 16     ; i<16
  br i1 %2317, label %2318, label %2341     

2318:     ; while Body
  %2319 = load i32, i32* %86     
  %2320 = srem i32 %2319, 2     ; x%2
  %2321= icmp ne i32 %2320, 0     
  br i1 %2321, label %2322, label %2334     

2322:     
  %2323 = load i32, i32* %85     
  %2324 = srem i32 %2323, 2     ; x%2 && y%2
  %2325= icmp ne i32 %2324, 0     
  br i1 %2325, label %2326, label %2334     ; judge x%2&&y%2

2326:     ; if Body
  %2327 = load i32, i32* %88     
  %2328 = load i32, i32* %87     
  %2329 = load i32, i32* %87     
  %2330= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2331= getelementptr i32,i32* %2330 , i32 %2329     
  %2332 = load i32, i32* %2331     ; 1*SHIFT_TABLE[i]
  %2333 = add i32 %2327, %2332     ; ans+1*SHIFT_TABLE[i]
  store i32 %2333, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2334     

2334:     
  %2335 = load i32, i32* %86     
  %2336 = sdiv i32 %2335, 2     ; x/2
  store i32 %2336, i32* %86     ; x=x/2
  %2337 = load i32, i32* %85     
  %2338 = sdiv i32 %2337, 2     ; y/2
  store i32 %2338, i32* %85     ; y=y/2
  %2339 = load i32, i32* %87     
  %2340 = add i32 %2339, 1     ; i+1
  store i32 %2340, i32* %87     ; i=i+1
  br label %2315     

2341:     ; exit while
  %2342 = load i32, i32* %88     
  %2343= icmp ne i32 %2342, 0     
  br i1 %2343, label %2344, label %2669     ; judge ans

2344:     ; if Body
  %2345 = load i32, i32* %18     
  store i32 %2345, i32* %17     ; ml= = load i32, i32* 
  %2346 = load i32, i32* %20     
  store i32 %2346, i32* %16     ; mr= = load i32, i32* 
  store i32 0, i32* %15     ; mres=i32 0
  br label %2347     

2347:     ; judge mr
  %2348 = load i32, i32* %16     
  %2349= icmp ne i32 %2348, 0     
  br i1 %2349, label %2350, label %2666     

2350:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2351 = load i32, i32* %16     
  store i32 %2351, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  br label %2352     

2352:     ; judge i<16
  %2353 = load i32, i32* %87     
  %2354= icmp slt i32 %2353, 16     ; i<16
  br i1 %2354, label %2355, label %2378     

2355:     ; while Body
  %2356 = load i32, i32* %86     
  %2357 = srem i32 %2356, 2     ; x%2
  %2358= icmp ne i32 %2357, 0     
  br i1 %2358, label %2359, label %2371     

2359:     
  %2360 = load i32, i32* %85     
  %2361 = srem i32 %2360, 2     ; x%2 && y%2
  %2362= icmp ne i32 %2361, 0     
  br i1 %2362, label %2363, label %2371     ; judge x%2&&y%2

2363:     ; if Body
  %2364 = load i32, i32* %88     
  %2365 = load i32, i32* %87     
  %2366 = load i32, i32* %87     
  %2367= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2368= getelementptr i32,i32* %2367 , i32 %2366     
  %2369 = load i32, i32* %2368     ; 1*SHIFT_TABLE[i]
  %2370 = add i32 %2364, %2369     ; ans+1*SHIFT_TABLE[i]
  store i32 %2370, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2371     

2371:     
  %2372 = load i32, i32* %86     
  %2373 = sdiv i32 %2372, 2     ; x/2
  store i32 %2373, i32* %86     ; x=x/2
  %2374 = load i32, i32* %85     
  %2375 = sdiv i32 %2374, 2     ; y/2
  store i32 %2375, i32* %85     ; y=y/2
  %2376 = load i32, i32* %87     
  %2377 = add i32 %2376, 1     ; i+1
  store i32 %2377, i32* %87     ; i=i+1
  br label %2352     

2378:     ; exit while
  %2379 = load i32, i32* %88     
  %2380= icmp ne i32 %2379, 0     
  br i1 %2380, label %2381, label %2499     ; judge ans

2381:     ; if Body
  %2382 = load i32, i32* %15     
  store i32 %2382, i32* %14     ; al= = load i32, i32* 
  %2383 = load i32, i32* %17     
  store i32 %2383, i32* %13     ; c= = load i32, i32* 
  br label %2384     

2384:     ; judge c
  %2385 = load i32, i32* %13     
  %2386= icmp ne i32 %2385, 0     
  br i1 %2386, label %2387, label %2496     

2387:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2388 = load i32, i32* %14     
  store i32 %2388, i32* %86     ; x=al
  %2389 = load i32, i32* %13     
  store i32 %2389, i32* %85     ; y=c
  br label %2390     

2390:     ; judge i<16
  %2391 = load i32, i32* %87     
  %2392= icmp slt i32 %2391, 16     ; i<16
  br i1 %2392, label %2393, label %2430     

2393:     ; while Body
  %2394 = load i32, i32* %86     
  %2395 = srem i32 %2394, 2     ; x%2
  %2396= icmp ne i32 %2395, 0     
  br i1 %2396, label %2397, label %2410     ; judge x%2

2397:     ; if Body
  %2398 = load i32, i32* %85     
  %2399 = srem i32 %2398, 2     ; y%2
  %2400= icmp eq i32 %2399, 0     ; y%2==0
  br i1 %2400, label %2401, label %2409     ; judge y%2==0

2401:     ; if Body
  %2402 = load i32, i32* %88     
  %2403 = load i32, i32* %87     
  %2404 = load i32, i32* %87     
  %2405= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2406= getelementptr i32,i32* %2405 , i32 %2404     
  %2407 = load i32, i32* %2406     ; 1*SHIFT_TABLE[i]
  %2408 = add i32 %2402, %2407     ; ans+1*SHIFT_TABLE[i]
  store i32 %2408, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2409     

2409:     
  br label %2423     

2410:     ; else Body
  %2411 = load i32, i32* %85     
  %2412 = srem i32 %2411, 2     ; y%2
  %2413= icmp ne i32 %2412, 0     
  br i1 %2413, label %2414, label %2422     ; judge y%2

2414:     ; if Body
  %2415 = load i32, i32* %88     
  %2416 = load i32, i32* %87     
  %2417 = load i32, i32* %87     
  %2418= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2419= getelementptr i32,i32* %2418 , i32 %2417     
  %2420 = load i32, i32* %2419     ; 1*SHIFT_TABLE[i]
  %2421 = add i32 %2415, %2420     ; ans+1*SHIFT_TABLE[i]
  store i32 %2421, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2422     

2422:     
  br label %2423     

2423:     
  %2424 = load i32, i32* %86     
  %2425 = sdiv i32 %2424, 2     ; x/2
  store i32 %2425, i32* %86     ; x=x/2
  %2426 = load i32, i32* %85     
  %2427 = sdiv i32 %2426, 2     ; y/2
  store i32 %2427, i32* %85     ; y=y/2
  %2428 = load i32, i32* %87     
  %2429 = add i32 %2428, 1     ; i+1
  store i32 %2429, i32* %87     ; i=i+1
  br label %2390     

2430:     ; exit while
  %2431 = load i32, i32* %88     
  store i32 %2431, i32* %12     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2432 = load i32, i32* %14     
  store i32 %2432, i32* %86     ; x=al
  %2433 = load i32, i32* %13     
  store i32 %2433, i32* %85     ; y=c
  br label %2434     

2434:     ; judge i<16
  %2435 = load i32, i32* %87     
  %2436= icmp slt i32 %2435, 16     ; i<16
  br i1 %2436, label %2437, label %2460     

2437:     ; while Body
  %2438 = load i32, i32* %86     
  %2439 = srem i32 %2438, 2     ; x%2
  %2440= icmp ne i32 %2439, 0     
  br i1 %2440, label %2441, label %2453     

2441:     
  %2442 = load i32, i32* %85     
  %2443 = srem i32 %2442, 2     ; x%2 && y%2
  %2444= icmp ne i32 %2443, 0     
  br i1 %2444, label %2445, label %2453     ; judge x%2&&y%2

2445:     ; if Body
  %2446 = load i32, i32* %88     
  %2447 = load i32, i32* %87     
  %2448 = load i32, i32* %87     
  %2449= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2450= getelementptr i32,i32* %2449 , i32 %2448     
  %2451 = load i32, i32* %2450     ; 1*SHIFT_TABLE[i]
  %2452 = add i32 %2446, %2451     ; ans+1*SHIFT_TABLE[i]
  store i32 %2452, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2453     

2453:     
  %2454 = load i32, i32* %86     
  %2455 = sdiv i32 %2454, 2     ; x/2
  store i32 %2455, i32* %86     ; x=x/2
  %2456 = load i32, i32* %85     
  %2457 = sdiv i32 %2456, 2     ; y/2
  store i32 %2457, i32* %85     ; y=y/2
  %2458 = load i32, i32* %87     
  %2459 = add i32 %2458, 1     ; i+1
  store i32 %2459, i32* %87     ; i=i+1
  br label %2434     

2460:     ; exit while
  %2461 = load i32, i32* %88     
  store i32 %2461, i32* %13     ; c=ans
  br i1 0, label %2462, label %2463     ; judge (1)>15

2462:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %2493     

2463:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2464 = load i32, i32* %13     
  %2465 = mul i32 %2464, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %2465, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %2466     

2466:     ; judge i<16
  %2467 = load i32, i32* %87     
  %2468= icmp slt i32 %2467, 16     ; i<16
  br i1 %2468, label %2469, label %2492     

2469:     ; while Body
  %2470 = load i32, i32* %86     
  %2471 = srem i32 %2470, 2     ; x%2
  %2472= icmp ne i32 %2471, 0     
  br i1 %2472, label %2473, label %2485     

2473:     
  %2474 = load i32, i32* %85     
  %2475 = srem i32 %2474, 2     ; x%2 && y%2
  %2476= icmp ne i32 %2475, 0     
  br i1 %2476, label %2477, label %2485     ; judge x%2&&y%2

2477:     ; if Body
  %2478 = load i32, i32* %88     
  %2479 = load i32, i32* %87     
  %2480 = load i32, i32* %87     
  %2481= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2482= getelementptr i32,i32* %2481 , i32 %2480     
  %2483 = load i32, i32* %2482     ; 1*SHIFT_TABLE[i]
  %2484 = add i32 %2478, %2483     ; ans+1*SHIFT_TABLE[i]
  store i32 %2484, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2485     

2485:     
  %2486 = load i32, i32* %86     
  %2487 = sdiv i32 %2486, 2     ; x/2
  store i32 %2487, i32* %86     ; x=x/2
  %2488 = load i32, i32* %85     
  %2489 = sdiv i32 %2488, 2     ; y/2
  store i32 %2489, i32* %85     ; y=y/2
  %2490 = load i32, i32* %87     
  %2491 = add i32 %2490, 1     ; i+1
  store i32 %2491, i32* %87     ; i=i+1
  br label %2466     

2492:     ; exit while
  br label %2493     

2493:     
  %2494 = load i32, i32* %88     
  store i32 %2494, i32* %13     ; c=ans
  %2495 = load i32, i32* %12     
  store i32 %2495, i32* %14     ; al=sum
  br label %2384     

2496:     ; exit while
  %2497 = load i32, i32* %14     
  store i32 %2497, i32* %88     ; ans=al
  %2498 = load i32, i32* %88     
  store i32 %2498, i32* %15     ; mres=ans
  br label %2499     

2499:     
  %2500 = load i32, i32* %17     
  store i32 %2500, i32* %11     ; al= = load i32, i32* 
  %2501 = load i32, i32* %17     
  store i32 %2501, i32* %10     ; c= = load i32, i32* 
  br label %2502     

2502:     ; judge c
  %2503 = load i32, i32* %10     
  %2504= icmp ne i32 %2503, 0     
  br i1 %2504, label %2505, label %2614     

2505:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2506 = load i32, i32* %11     
  store i32 %2506, i32* %86     ; x=al
  %2507 = load i32, i32* %10     
  store i32 %2507, i32* %85     ; y=c
  br label %2508     

2508:     ; judge i<16
  %2509 = load i32, i32* %87     
  %2510= icmp slt i32 %2509, 16     ; i<16
  br i1 %2510, label %2511, label %2548     

2511:     ; while Body
  %2512 = load i32, i32* %86     
  %2513 = srem i32 %2512, 2     ; x%2
  %2514= icmp ne i32 %2513, 0     
  br i1 %2514, label %2515, label %2528     ; judge x%2

2515:     ; if Body
  %2516 = load i32, i32* %85     
  %2517 = srem i32 %2516, 2     ; y%2
  %2518= icmp eq i32 %2517, 0     ; y%2==0
  br i1 %2518, label %2519, label %2527     ; judge y%2==0

2519:     ; if Body
  %2520 = load i32, i32* %88     
  %2521 = load i32, i32* %87     
  %2522 = load i32, i32* %87     
  %2523= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2524= getelementptr i32,i32* %2523 , i32 %2522     
  %2525 = load i32, i32* %2524     ; 1*SHIFT_TABLE[i]
  %2526 = add i32 %2520, %2525     ; ans+1*SHIFT_TABLE[i]
  store i32 %2526, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2527     

2527:     
  br label %2541     

2528:     ; else Body
  %2529 = load i32, i32* %85     
  %2530 = srem i32 %2529, 2     ; y%2
  %2531= icmp ne i32 %2530, 0     
  br i1 %2531, label %2532, label %2540     ; judge y%2

2532:     ; if Body
  %2533 = load i32, i32* %88     
  %2534 = load i32, i32* %87     
  %2535 = load i32, i32* %87     
  %2536= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2537= getelementptr i32,i32* %2536 , i32 %2535     
  %2538 = load i32, i32* %2537     ; 1*SHIFT_TABLE[i]
  %2539 = add i32 %2533, %2538     ; ans+1*SHIFT_TABLE[i]
  store i32 %2539, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2540     

2540:     
  br label %2541     

2541:     
  %2542 = load i32, i32* %86     
  %2543 = sdiv i32 %2542, 2     ; x/2
  store i32 %2543, i32* %86     ; x=x/2
  %2544 = load i32, i32* %85     
  %2545 = sdiv i32 %2544, 2     ; y/2
  store i32 %2545, i32* %85     ; y=y/2
  %2546 = load i32, i32* %87     
  %2547 = add i32 %2546, 1     ; i+1
  store i32 %2547, i32* %87     ; i=i+1
  br label %2508     

2548:     ; exit while
  %2549 = load i32, i32* %88     
  store i32 %2549, i32* %9     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2550 = load i32, i32* %11     
  store i32 %2550, i32* %86     ; x=al
  %2551 = load i32, i32* %10     
  store i32 %2551, i32* %85     ; y=c
  br label %2552     

2552:     ; judge i<16
  %2553 = load i32, i32* %87     
  %2554= icmp slt i32 %2553, 16     ; i<16
  br i1 %2554, label %2555, label %2578     

2555:     ; while Body
  %2556 = load i32, i32* %86     
  %2557 = srem i32 %2556, 2     ; x%2
  %2558= icmp ne i32 %2557, 0     
  br i1 %2558, label %2559, label %2571     

2559:     
  %2560 = load i32, i32* %85     
  %2561 = srem i32 %2560, 2     ; x%2 && y%2
  %2562= icmp ne i32 %2561, 0     
  br i1 %2562, label %2563, label %2571     ; judge x%2&&y%2

2563:     ; if Body
  %2564 = load i32, i32* %88     
  %2565 = load i32, i32* %87     
  %2566 = load i32, i32* %87     
  %2567= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2568= getelementptr i32,i32* %2567 , i32 %2566     
  %2569 = load i32, i32* %2568     ; 1*SHIFT_TABLE[i]
  %2570 = add i32 %2564, %2569     ; ans+1*SHIFT_TABLE[i]
  store i32 %2570, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2571     

2571:     
  %2572 = load i32, i32* %86     
  %2573 = sdiv i32 %2572, 2     ; x/2
  store i32 %2573, i32* %86     ; x=x/2
  %2574 = load i32, i32* %85     
  %2575 = sdiv i32 %2574, 2     ; y/2
  store i32 %2575, i32* %85     ; y=y/2
  %2576 = load i32, i32* %87     
  %2577 = add i32 %2576, 1     ; i+1
  store i32 %2577, i32* %87     ; i=i+1
  br label %2552     

2578:     ; exit while
  %2579 = load i32, i32* %88     
  store i32 %2579, i32* %10     ; c=ans
  br i1 0, label %2580, label %2581     ; judge (1)>15

2580:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %2611     

2581:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2582 = load i32, i32* %10     
  %2583 = mul i32 %2582, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %2583, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %2584     

2584:     ; judge i<16
  %2585 = load i32, i32* %87     
  %2586= icmp slt i32 %2585, 16     ; i<16
  br i1 %2586, label %2587, label %2610     

2587:     ; while Body
  %2588 = load i32, i32* %86     
  %2589 = srem i32 %2588, 2     ; x%2
  %2590= icmp ne i32 %2589, 0     
  br i1 %2590, label %2591, label %2603     

2591:     
  %2592 = load i32, i32* %85     
  %2593 = srem i32 %2592, 2     ; x%2 && y%2
  %2594= icmp ne i32 %2593, 0     
  br i1 %2594, label %2595, label %2603     ; judge x%2&&y%2

2595:     ; if Body
  %2596 = load i32, i32* %88     
  %2597 = load i32, i32* %87     
  %2598 = load i32, i32* %87     
  %2599= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2600= getelementptr i32,i32* %2599 , i32 %2598     
  %2601 = load i32, i32* %2600     ; 1*SHIFT_TABLE[i]
  %2602 = add i32 %2596, %2601     ; ans+1*SHIFT_TABLE[i]
  store i32 %2602, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2603     

2603:     
  %2604 = load i32, i32* %86     
  %2605 = sdiv i32 %2604, 2     ; x/2
  store i32 %2605, i32* %86     ; x=x/2
  %2606 = load i32, i32* %85     
  %2607 = sdiv i32 %2606, 2     ; y/2
  store i32 %2607, i32* %85     ; y=y/2
  %2608 = load i32, i32* %87     
  %2609 = add i32 %2608, 1     ; i+1
  store i32 %2609, i32* %87     ; i=i+1
  br label %2584     

2610:     ; exit while
  br label %2611     

2611:     
  %2612 = load i32, i32* %88     
  store i32 %2612, i32* %10     ; c=ans
  %2613 = load i32, i32* %9     
  store i32 %2613, i32* %11     ; al=sum
  br label %2502     

2614:     ; exit while
  %2615 = load i32, i32* %11     
  store i32 %2615, i32* %88     ; ans=al
  %2616 = load i32, i32* %88     
  store i32 %2616, i32* %17     ; ml=ans
  %2617 = load i32, i32* %16     
  store i32 %2617, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  %2618 = load i32, i32* %85     
  %2619= icmp sge i32 %2618, 15     ; y>=15
  br i1 %2619, label %2620, label %2626     ; judge y>=15

2620:     ; if Body
  %2621 = load i32, i32* %86     
  %2622= icmp slt i32 %2621, 0     ; x<0
  br i1 %2622, label %2623, label %2624     ; judge x<0

2623:     ; if Body
  store i32 65535, i32* %88     ; ans=0xffff
  br label %2625     

2624:     ; else Body
  store i32 0, i32* %88     ; ans=0
  br label %2625     

2625:     
  br label %2664     

2626:     ; else Body
  %2627 = load i32, i32* %85     
  %2628= icmp sgt i32 %2627, 0     ; y>0
  br i1 %2628, label %2629, label %2661     ; judge y>0

2629:     ; if Body
  %2630 = load i32, i32* %86     
  %2631= icmp sgt i32 %2630, 32767     ; x>0x7fff
  br i1 %2631, label %2632, label %2652     ; judge x>0x7fff

2632:     ; if Body
  %2633 = load i32, i32* %86     
  %2634 = load i32, i32* %85     
  %2635 = load i32, i32* %85     
  %2636= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2637= getelementptr i32,i32* %2636 , i32 %2635     
  %2638 = load i32, i32* %2637     
  %2639 = sdiv i32 %2633, %2638     ; x/SHIFT_TABLE[y]
  store i32 %2639, i32* %86     ; x=x/SHIFT_TABLE[y]
  %2640 = load i32, i32* %86     
  %2641 = add i32 %2640, 65536     ; x+65536
  %2642 = load i32, i32* %85     
  %2643 = sub i32 15, %2642     ; 15-y
  %2644 = add i32 %2643, 1     ; 15-y+1
  %2645 = load i32, i32* %85     
  %2646 = sub i32 15, %2645     ; 15-y
  %2647 = add i32 %2646, 1     ; 15-y+1
  %2648= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2649= getelementptr i32,i32* %2648 , i32 %2647     
  %2650 = load i32, i32* %2649     
  %2651 = sub i32 %2641, %2650     ; x+65536-SHIFT_TABLE[15-y+1]
  store i32 %2651, i32* %88     ; ans=x+65536-SHIFT_TABLE[15-y+1]
  br label %2660     

2652:     ; else Body
  %2653 = load i32, i32* %86     
  %2654 = load i32, i32* %85     
  %2655 = load i32, i32* %85     
  %2656= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2657= getelementptr i32,i32* %2656 , i32 %2655     
  %2658 = load i32, i32* %2657     
  %2659 = sdiv i32 %2653, %2658     ; x/SHIFT_TABLE[y]
  store i32 %2659, i32* %88     ; ans=x/SHIFT_TABLE[y]
  br label %2660     

2660:     
  br label %2663     

2661:     ; else Body
  %2662 = load i32, i32* %86     
  store i32 %2662, i32* %88     ; ans=x
  br label %2663     

2663:     
  br label %2664     

2664:     
  %2665 = load i32, i32* %88     
  store i32 %2665, i32* %16     ; mr=ans
  br label %2347     

2666:     ; exit while
  %2667 = load i32, i32* %15     
  store i32 %2667, i32* %88     ; ans=mres
  %2668 = load i32, i32* %88     
  store i32 %2668, i32* %18     ; pres=ans
  br label %2669     

2669:     
  %2670 = load i32, i32* %20     
  store i32 %2670, i32* %8     ; ml= = load i32, i32* 
  %2671 = load i32, i32* %20     
  store i32 %2671, i32* %7     ; mr= = load i32, i32* 
  store i32 0, i32* %6     ; mres=i32 0
  br label %2672     

2672:     ; judge mr
  %2673 = load i32, i32* %7     
  %2674= icmp ne i32 %2673, 0     
  br i1 %2674, label %2675, label %2991     

2675:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2676 = load i32, i32* %7     
  store i32 %2676, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  br label %2677     

2677:     ; judge i<16
  %2678 = load i32, i32* %87     
  %2679= icmp slt i32 %2678, 16     ; i<16
  br i1 %2679, label %2680, label %2703     

2680:     ; while Body
  %2681 = load i32, i32* %86     
  %2682 = srem i32 %2681, 2     ; x%2
  %2683= icmp ne i32 %2682, 0     
  br i1 %2683, label %2684, label %2696     

2684:     
  %2685 = load i32, i32* %85     
  %2686 = srem i32 %2685, 2     ; x%2 && y%2
  %2687= icmp ne i32 %2686, 0     
  br i1 %2687, label %2688, label %2696     ; judge x%2&&y%2

2688:     ; if Body
  %2689 = load i32, i32* %88     
  %2690 = load i32, i32* %87     
  %2691 = load i32, i32* %87     
  %2692= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2693= getelementptr i32,i32* %2692 , i32 %2691     
  %2694 = load i32, i32* %2693     ; 1*SHIFT_TABLE[i]
  %2695 = add i32 %2689, %2694     ; ans+1*SHIFT_TABLE[i]
  store i32 %2695, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2696     

2696:     
  %2697 = load i32, i32* %86     
  %2698 = sdiv i32 %2697, 2     ; x/2
  store i32 %2698, i32* %86     ; x=x/2
  %2699 = load i32, i32* %85     
  %2700 = sdiv i32 %2699, 2     ; y/2
  store i32 %2700, i32* %85     ; y=y/2
  %2701 = load i32, i32* %87     
  %2702 = add i32 %2701, 1     ; i+1
  store i32 %2702, i32* %87     ; i=i+1
  br label %2677     

2703:     ; exit while
  %2704 = load i32, i32* %88     
  %2705= icmp ne i32 %2704, 0     
  br i1 %2705, label %2706, label %2824     ; judge ans

2706:     ; if Body
  %2707 = load i32, i32* %6     
  store i32 %2707, i32* %5     ; al= = load i32, i32* 
  %2708 = load i32, i32* %8     
  store i32 %2708, i32* %4     ; c= = load i32, i32* 
  br label %2709     

2709:     ; judge c
  %2710 = load i32, i32* %4     
  %2711= icmp ne i32 %2710, 0     
  br i1 %2711, label %2712, label %2821     

2712:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2713 = load i32, i32* %5     
  store i32 %2713, i32* %86     ; x=al
  %2714 = load i32, i32* %4     
  store i32 %2714, i32* %85     ; y=c
  br label %2715     

2715:     ; judge i<16
  %2716 = load i32, i32* %87     
  %2717= icmp slt i32 %2716, 16     ; i<16
  br i1 %2717, label %2718, label %2755     

2718:     ; while Body
  %2719 = load i32, i32* %86     
  %2720 = srem i32 %2719, 2     ; x%2
  %2721= icmp ne i32 %2720, 0     
  br i1 %2721, label %2722, label %2735     ; judge x%2

2722:     ; if Body
  %2723 = load i32, i32* %85     
  %2724 = srem i32 %2723, 2     ; y%2
  %2725= icmp eq i32 %2724, 0     ; y%2==0
  br i1 %2725, label %2726, label %2734     ; judge y%2==0

2726:     ; if Body
  %2727 = load i32, i32* %88     
  %2728 = load i32, i32* %87     
  %2729 = load i32, i32* %87     
  %2730= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2731= getelementptr i32,i32* %2730 , i32 %2729     
  %2732 = load i32, i32* %2731     ; 1*SHIFT_TABLE[i]
  %2733 = add i32 %2727, %2732     ; ans+1*SHIFT_TABLE[i]
  store i32 %2733, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2734     

2734:     
  br label %2748     

2735:     ; else Body
  %2736 = load i32, i32* %85     
  %2737 = srem i32 %2736, 2     ; y%2
  %2738= icmp ne i32 %2737, 0     
  br i1 %2738, label %2739, label %2747     ; judge y%2

2739:     ; if Body
  %2740 = load i32, i32* %88     
  %2741 = load i32, i32* %87     
  %2742 = load i32, i32* %87     
  %2743= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2744= getelementptr i32,i32* %2743 , i32 %2742     
  %2745 = load i32, i32* %2744     ; 1*SHIFT_TABLE[i]
  %2746 = add i32 %2740, %2745     ; ans+1*SHIFT_TABLE[i]
  store i32 %2746, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2747     

2747:     
  br label %2748     

2748:     
  %2749 = load i32, i32* %86     
  %2750 = sdiv i32 %2749, 2     ; x/2
  store i32 %2750, i32* %86     ; x=x/2
  %2751 = load i32, i32* %85     
  %2752 = sdiv i32 %2751, 2     ; y/2
  store i32 %2752, i32* %85     ; y=y/2
  %2753 = load i32, i32* %87     
  %2754 = add i32 %2753, 1     ; i+1
  store i32 %2754, i32* %87     ; i=i+1
  br label %2715     

2755:     ; exit while
  %2756 = load i32, i32* %88     
  store i32 %2756, i32* %3     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2757 = load i32, i32* %5     
  store i32 %2757, i32* %86     ; x=al
  %2758 = load i32, i32* %4     
  store i32 %2758, i32* %85     ; y=c
  br label %2759     

2759:     ; judge i<16
  %2760 = load i32, i32* %87     
  %2761= icmp slt i32 %2760, 16     ; i<16
  br i1 %2761, label %2762, label %2785     

2762:     ; while Body
  %2763 = load i32, i32* %86     
  %2764 = srem i32 %2763, 2     ; x%2
  %2765= icmp ne i32 %2764, 0     
  br i1 %2765, label %2766, label %2778     

2766:     
  %2767 = load i32, i32* %85     
  %2768 = srem i32 %2767, 2     ; x%2 && y%2
  %2769= icmp ne i32 %2768, 0     
  br i1 %2769, label %2770, label %2778     ; judge x%2&&y%2

2770:     ; if Body
  %2771 = load i32, i32* %88     
  %2772 = load i32, i32* %87     
  %2773 = load i32, i32* %87     
  %2774= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2775= getelementptr i32,i32* %2774 , i32 %2773     
  %2776 = load i32, i32* %2775     ; 1*SHIFT_TABLE[i]
  %2777 = add i32 %2771, %2776     ; ans+1*SHIFT_TABLE[i]
  store i32 %2777, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2778     

2778:     
  %2779 = load i32, i32* %86     
  %2780 = sdiv i32 %2779, 2     ; x/2
  store i32 %2780, i32* %86     ; x=x/2
  %2781 = load i32, i32* %85     
  %2782 = sdiv i32 %2781, 2     ; y/2
  store i32 %2782, i32* %85     ; y=y/2
  %2783 = load i32, i32* %87     
  %2784 = add i32 %2783, 1     ; i+1
  store i32 %2784, i32* %87     ; i=i+1
  br label %2759     

2785:     ; exit while
  %2786 = load i32, i32* %88     
  store i32 %2786, i32* %4     ; c=ans
  br i1 0, label %2787, label %2788     ; judge (1)>15

2787:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %2818     

2788:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2789 = load i32, i32* %4     
  %2790 = mul i32 %2789, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %2790, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %2791     

2791:     ; judge i<16
  %2792 = load i32, i32* %87     
  %2793= icmp slt i32 %2792, 16     ; i<16
  br i1 %2793, label %2794, label %2817     

2794:     ; while Body
  %2795 = load i32, i32* %86     
  %2796 = srem i32 %2795, 2     ; x%2
  %2797= icmp ne i32 %2796, 0     
  br i1 %2797, label %2798, label %2810     

2798:     
  %2799 = load i32, i32* %85     
  %2800 = srem i32 %2799, 2     ; x%2 && y%2
  %2801= icmp ne i32 %2800, 0     
  br i1 %2801, label %2802, label %2810     ; judge x%2&&y%2

2802:     ; if Body
  %2803 = load i32, i32* %88     
  %2804 = load i32, i32* %87     
  %2805 = load i32, i32* %87     
  %2806= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2807= getelementptr i32,i32* %2806 , i32 %2805     
  %2808 = load i32, i32* %2807     ; 1*SHIFT_TABLE[i]
  %2809 = add i32 %2803, %2808     ; ans+1*SHIFT_TABLE[i]
  store i32 %2809, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2810     

2810:     
  %2811 = load i32, i32* %86     
  %2812 = sdiv i32 %2811, 2     ; x/2
  store i32 %2812, i32* %86     ; x=x/2
  %2813 = load i32, i32* %85     
  %2814 = sdiv i32 %2813, 2     ; y/2
  store i32 %2814, i32* %85     ; y=y/2
  %2815 = load i32, i32* %87     
  %2816 = add i32 %2815, 1     ; i+1
  store i32 %2816, i32* %87     ; i=i+1
  br label %2791     

2817:     ; exit while
  br label %2818     

2818:     
  %2819 = load i32, i32* %88     
  store i32 %2819, i32* %4     ; c=ans
  %2820 = load i32, i32* %3     
  store i32 %2820, i32* %5     ; al=sum
  br label %2709     

2821:     ; exit while
  %2822 = load i32, i32* %5     
  store i32 %2822, i32* %88     ; ans=al
  %2823 = load i32, i32* %88     
  store i32 %2823, i32* %6     ; mres=ans
  br label %2824     

2824:     
  %2825 = load i32, i32* %8     
  store i32 %2825, i32* %2     ; al= = load i32, i32* 
  %2826 = load i32, i32* %8     
  store i32 %2826, i32* %1     ; c= = load i32, i32* 
  br label %2827     

2827:     ; judge c
  %2828 = load i32, i32* %1     
  %2829= icmp ne i32 %2828, 0     
  br i1 %2829, label %2830, label %2939     

2830:     ; while Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2831 = load i32, i32* %2     
  store i32 %2831, i32* %86     ; x=al
  %2832 = load i32, i32* %1     
  store i32 %2832, i32* %85     ; y=c
  br label %2833     

2833:     ; judge i<16
  %2834 = load i32, i32* %87     
  %2835= icmp slt i32 %2834, 16     ; i<16
  br i1 %2835, label %2836, label %2873     

2836:     ; while Body
  %2837 = load i32, i32* %86     
  %2838 = srem i32 %2837, 2     ; x%2
  %2839= icmp ne i32 %2838, 0     
  br i1 %2839, label %2840, label %2853     ; judge x%2

2840:     ; if Body
  %2841 = load i32, i32* %85     
  %2842 = srem i32 %2841, 2     ; y%2
  %2843= icmp eq i32 %2842, 0     ; y%2==0
  br i1 %2843, label %2844, label %2852     ; judge y%2==0

2844:     ; if Body
  %2845 = load i32, i32* %88     
  %2846 = load i32, i32* %87     
  %2847 = load i32, i32* %87     
  %2848= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2849= getelementptr i32,i32* %2848 , i32 %2847     
  %2850 = load i32, i32* %2849     ; 1*SHIFT_TABLE[i]
  %2851 = add i32 %2845, %2850     ; ans+1*SHIFT_TABLE[i]
  store i32 %2851, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2852     

2852:     
  br label %2866     

2853:     ; else Body
  %2854 = load i32, i32* %85     
  %2855 = srem i32 %2854, 2     ; y%2
  %2856= icmp ne i32 %2855, 0     
  br i1 %2856, label %2857, label %2865     ; judge y%2

2857:     ; if Body
  %2858 = load i32, i32* %88     
  %2859 = load i32, i32* %87     
  %2860 = load i32, i32* %87     
  %2861= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2862= getelementptr i32,i32* %2861 , i32 %2860     
  %2863 = load i32, i32* %2862     ; 1*SHIFT_TABLE[i]
  %2864 = add i32 %2858, %2863     ; ans+1*SHIFT_TABLE[i]
  store i32 %2864, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2865     

2865:     
  br label %2866     

2866:     
  %2867 = load i32, i32* %86     
  %2868 = sdiv i32 %2867, 2     ; x/2
  store i32 %2868, i32* %86     ; x=x/2
  %2869 = load i32, i32* %85     
  %2870 = sdiv i32 %2869, 2     ; y/2
  store i32 %2870, i32* %85     ; y=y/2
  %2871 = load i32, i32* %87     
  %2872 = add i32 %2871, 1     ; i+1
  store i32 %2872, i32* %87     ; i=i+1
  br label %2833     

2873:     ; exit while
  %2874 = load i32, i32* %88     
  store i32 %2874, i32* %0     ; sum=ans
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2875 = load i32, i32* %2     
  store i32 %2875, i32* %86     ; x=al
  %2876 = load i32, i32* %1     
  store i32 %2876, i32* %85     ; y=c
  br label %2877     

2877:     ; judge i<16
  %2878 = load i32, i32* %87     
  %2879= icmp slt i32 %2878, 16     ; i<16
  br i1 %2879, label %2880, label %2903     

2880:     ; while Body
  %2881 = load i32, i32* %86     
  %2882 = srem i32 %2881, 2     ; x%2
  %2883= icmp ne i32 %2882, 0     
  br i1 %2883, label %2884, label %2896     

2884:     
  %2885 = load i32, i32* %85     
  %2886 = srem i32 %2885, 2     ; x%2 && y%2
  %2887= icmp ne i32 %2886, 0     
  br i1 %2887, label %2888, label %2896     ; judge x%2&&y%2

2888:     ; if Body
  %2889 = load i32, i32* %88     
  %2890 = load i32, i32* %87     
  %2891 = load i32, i32* %87     
  %2892= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2893= getelementptr i32,i32* %2892 , i32 %2891     
  %2894 = load i32, i32* %2893     ; 1*SHIFT_TABLE[i]
  %2895 = add i32 %2889, %2894     ; ans+1*SHIFT_TABLE[i]
  store i32 %2895, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2896     

2896:     
  %2897 = load i32, i32* %86     
  %2898 = sdiv i32 %2897, 2     ; x/2
  store i32 %2898, i32* %86     ; x=x/2
  %2899 = load i32, i32* %85     
  %2900 = sdiv i32 %2899, 2     ; y/2
  store i32 %2900, i32* %85     ; y=y/2
  %2901 = load i32, i32* %87     
  %2902 = add i32 %2901, 1     ; i+1
  store i32 %2902, i32* %87     ; i=i+1
  br label %2877     

2903:     ; exit while
  %2904 = load i32, i32* %88     
  store i32 %2904, i32* %1     ; c=ans
  br i1 0, label %2905, label %2906     ; judge (1)>15

2905:     ; if Body
  store i32 0, i32* %88     ; ans=0
  br label %2936     

2906:     ; else Body
  store i32 0, i32* %88     ; ans=0
  store i32 0, i32* %87     ; i=0
  %2907 = load i32, i32* %1     
  %2908 = mul i32 %2907, 2     ; (c)*SHIFT_TABLE[1]
  store i32 %2908, i32* %86     ; x=(c)*SHIFT_TABLE[1]
  store i32 65535, i32* %85     ; y=0xffff
  br label %2909     

2909:     ; judge i<16
  %2910 = load i32, i32* %87     
  %2911= icmp slt i32 %2910, 16     ; i<16
  br i1 %2911, label %2912, label %2935     

2912:     ; while Body
  %2913 = load i32, i32* %86     
  %2914 = srem i32 %2913, 2     ; x%2
  %2915= icmp ne i32 %2914, 0     
  br i1 %2915, label %2916, label %2928     

2916:     
  %2917 = load i32, i32* %85     
  %2918 = srem i32 %2917, 2     ; x%2 && y%2
  %2919= icmp ne i32 %2918, 0     
  br i1 %2919, label %2920, label %2928     ; judge x%2&&y%2

2920:     ; if Body
  %2921 = load i32, i32* %88     
  %2922 = load i32, i32* %87     
  %2923 = load i32, i32* %87     
  %2924= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2925= getelementptr i32,i32* %2924 , i32 %2923     
  %2926 = load i32, i32* %2925     ; 1*SHIFT_TABLE[i]
  %2927 = add i32 %2921, %2926     ; ans+1*SHIFT_TABLE[i]
  store i32 %2927, i32* %88     ; ans=ans+1*SHIFT_TABLE[i]
  br label %2928     

2928:     
  %2929 = load i32, i32* %86     
  %2930 = sdiv i32 %2929, 2     ; x/2
  store i32 %2930, i32* %86     ; x=x/2
  %2931 = load i32, i32* %85     
  %2932 = sdiv i32 %2931, 2     ; y/2
  store i32 %2932, i32* %85     ; y=y/2
  %2933 = load i32, i32* %87     
  %2934 = add i32 %2933, 1     ; i+1
  store i32 %2934, i32* %87     ; i=i+1
  br label %2909     

2935:     ; exit while
  br label %2936     

2936:     
  %2937 = load i32, i32* %88     
  store i32 %2937, i32* %1     ; c=ans
  %2938 = load i32, i32* %0     
  store i32 %2938, i32* %2     ; al=sum
  br label %2827     

2939:     ; exit while
  %2940 = load i32, i32* %2     
  store i32 %2940, i32* %88     ; ans=al
  %2941 = load i32, i32* %88     
  store i32 %2941, i32* %8     ; ml=ans
  %2942 = load i32, i32* %7     
  store i32 %2942, i32* %86     ; x=mr
  store i32 1, i32* %85     ; y=1
  %2943 = load i32, i32* %85     
  %2944= icmp sge i32 %2943, 15     ; y>=15
  br i1 %2944, label %2945, label %2951     ; judge y>=15

2945:     ; if Body
  %2946 = load i32, i32* %86     
  %2947= icmp slt i32 %2946, 0     ; x<0
  br i1 %2947, label %2948, label %2949     ; judge x<0

2948:     ; if Body
  store i32 65535, i32* %88     ; ans=0xffff
  br label %2950     

2949:     ; else Body
  store i32 0, i32* %88     ; ans=0
  br label %2950     

2950:     
  br label %2989     

2951:     ; else Body
  %2952 = load i32, i32* %85     
  %2953= icmp sgt i32 %2952, 0     ; y>0
  br i1 %2953, label %2954, label %2986     ; judge y>0

2954:     ; if Body
  %2955 = load i32, i32* %86     
  %2956= icmp sgt i32 %2955, 32767     ; x>0x7fff
  br i1 %2956, label %2957, label %2977     ; judge x>0x7fff

2957:     ; if Body
  %2958 = load i32, i32* %86     
  %2959 = load i32, i32* %85     
  %2960 = load i32, i32* %85     
  %2961= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2962= getelementptr i32,i32* %2961 , i32 %2960     
  %2963 = load i32, i32* %2962     
  %2964 = sdiv i32 %2958, %2963     ; x/SHIFT_TABLE[y]
  store i32 %2964, i32* %86     ; x=x/SHIFT_TABLE[y]
  %2965 = load i32, i32* %86     
  %2966 = add i32 %2965, 65536     ; x+65536
  %2967 = load i32, i32* %85     
  %2968 = sub i32 15, %2967     ; 15-y
  %2969 = add i32 %2968, 1     ; 15-y+1
  %2970 = load i32, i32* %85     
  %2971 = sub i32 15, %2970     ; 15-y
  %2972 = add i32 %2971, 1     ; 15-y+1
  %2973= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2974= getelementptr i32,i32* %2973 , i32 %2972     
  %2975 = load i32, i32* %2974     
  %2976 = sub i32 %2966, %2975     ; x+65536-SHIFT_TABLE[15-y+1]
  store i32 %2976, i32* %88     ; ans=x+65536-SHIFT_TABLE[15-y+1]
  br label %2985     

2977:     ; else Body
  %2978 = load i32, i32* %86     
  %2979 = load i32, i32* %85     
  %2980 = load i32, i32* %85     
  %2981= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %2982= getelementptr i32,i32* %2981 , i32 %2980     
  %2983 = load i32, i32* %2982     
  %2984 = sdiv i32 %2978, %2983     ; x/SHIFT_TABLE[y]
  store i32 %2984, i32* %88     ; ans=x/SHIFT_TABLE[y]
  br label %2985     

2985:     
  br label %2988     

2986:     ; else Body
  %2987 = load i32, i32* %86     
  store i32 %2987, i32* %88     ; ans=x
  br label %2988     

2988:     
  br label %2989     

2989:     
  %2990 = load i32, i32* %88     
  store i32 %2990, i32* %7     ; mr=ans
  br label %2672     

2991:     ; exit while
  %2992 = load i32, i32* %6     
  store i32 %2992, i32* %88     ; ans=mres
  %2993 = load i32, i32* %88     
  store i32 %2993, i32* %20     ; pl=ans
  %2994 = load i32, i32* %19     
  store i32 %2994, i32* %86     ; x=pr
  store i32 1, i32* %85     ; y=1
  %2995 = load i32, i32* %85     
  %2996= icmp sge i32 %2995, 15     ; y>=15
  br i1 %2996, label %2997, label %3003     ; judge y>=15

2997:     ; if Body
  %2998 = load i32, i32* %86     
  %2999= icmp slt i32 %2998, 0     ; x<0
  br i1 %2999, label %3000, label %3001     ; judge x<0

3000:     ; if Body
  store i32 65535, i32* %88     ; ans=0xffff
  br label %3002     

3001:     ; else Body
  store i32 0, i32* %88     ; ans=0
  br label %3002     

3002:     
  br label %3041     

3003:     ; else Body
  %3004 = load i32, i32* %85     
  %3005= icmp sgt i32 %3004, 0     ; y>0
  br i1 %3005, label %3006, label %3038     ; judge y>0

3006:     ; if Body
  %3007 = load i32, i32* %86     
  %3008= icmp sgt i32 %3007, 32767     ; x>0x7fff
  br i1 %3008, label %3009, label %3029     ; judge x>0x7fff

3009:     ; if Body
  %3010 = load i32, i32* %86     
  %3011 = load i32, i32* %85     
  %3012 = load i32, i32* %85     
  %3013= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %3014= getelementptr i32,i32* %3013 , i32 %3012     
  %3015 = load i32, i32* %3014     
  %3016 = sdiv i32 %3010, %3015     ; x/SHIFT_TABLE[y]
  store i32 %3016, i32* %86     ; x=x/SHIFT_TABLE[y]
  %3017 = load i32, i32* %86     
  %3018 = add i32 %3017, 65536     ; x+65536
  %3019 = load i32, i32* %85     
  %3020 = sub i32 15, %3019     ; 15-y
  %3021 = add i32 %3020, 1     ; 15-y+1
  %3022 = load i32, i32* %85     
  %3023 = sub i32 15, %3022     ; 15-y
  %3024 = add i32 %3023, 1     ; 15-y+1
  %3025= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %3026= getelementptr i32,i32* %3025 , i32 %3024     
  %3027 = load i32, i32* %3026     
  %3028 = sub i32 %3018, %3027     ; x+65536-SHIFT_TABLE[15-y+1]
  store i32 %3028, i32* %88     ; ans=x+65536-SHIFT_TABLE[15-y+1]
  br label %3037     

3029:     ; else Body
  %3030 = load i32, i32* %86     
  %3031 = load i32, i32* %85     
  %3032 = load i32, i32* %85     
  %3033= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %3034= getelementptr i32,i32* %3033 , i32 %3032     
  %3035 = load i32, i32* %3034     
  %3036 = sdiv i32 %3030, %3035     ; x/SHIFT_TABLE[y]
  store i32 %3036, i32* %88     ; ans=x/SHIFT_TABLE[y]
  br label %3037     

3037:     
  br label %3040     

3038:     ; else Body
  %3039 = load i32, i32* %86     
  store i32 %3039, i32* %88     ; ans=x
  br label %3040     

3040:     
  br label %3041     

3041:     
  %3042 = load i32, i32* %88     
  store i32 %3042, i32* %19     ; pr=ans
  br label %2310     

3043:     ; exit while
  %3044 = load i32, i32* %18     
  store i32 %3044, i32* %88     ; ans=pres
  %3045 = load i32, i32* %84     
  %3046 = load i32, i32* %84     
  %3047= getelementptr [16 x i32],[16 x i32]* @SHIFT_TABLE , i32 0, i32 0     
  %3048= getelementptr i32,i32* %3047 , i32 %3046     
  %3049 = load i32, i32* %3048     
  %3050 = load i32, i32* %88     
  %3051= icmp ne i32 %3049, %3050     ; SHIFT_TABLE[cur]!=ans
  br i1 %3051, label %3052, label %3053     ; judge SHIFT_TABLE[cur]!=ans

3052:     ; if Body
  store i32 1, i32* %ret     
  br label %retBB     

3053:     
  %3054 = load i32, i32* %84     
  %3055 = add i32 %3054, 1     ; cur+1
  store i32 %3055, i32* %84     ; cur=cur+1
  br label %2305     

3056:     ; exit while
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %3057 = load i32, i32* %ret     
  ret i32 %3057     
}

define dso_local i32 @main(){
entry:     
  %ret = alloca i32     
  %0 = call i32 @long_func()     ; call long_func()
  store i32 %0, i32* %ret     
  br label %retBB     

retBB:     
  %1 = load i32, i32* %ret     
  ret i32 %1     
}

