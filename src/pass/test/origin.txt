@n = dso_local global i32 0
@m = dso_local global i32 0
@f = dso_local global [10005 x [20 x i32]] zeroinitializer
@dep = dso_local global [10005 x i32] zeroinitializer
@to = dso_local global [10005 x i32] zeroinitializer
@next = dso_local global [10005 x i32] zeroinitializer
@head = dso_local global [10005 x i32] zeroinitializer
@cnt = dso_local global i32 0

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime(i32)
declare void @_sysy_stoptime(i32)

define dso_local i32 @quick_read(){
entry:     
  %0 = alloca i32     ; i32 f=0
  %1 = alloca i32     ; i32 x=0
  %2 = alloca i32     ; i32 ch=getch()
  %ret = alloca i32     
  %3 = call i32 @getch()     ; call getch()
  store i32 %3, i32* %2     ; ch= = call i32 @getch()
  store i32 0, i32* %1     ; x=i32 0
  store i32 0, i32* %0     ; f=i32 0
  br label %4     

4:     ; judge ch<48||ch>57
  %5 = load i32, i32* %2     
  %6= icmp slt i32 %5, 48     ; ch<48
  br i1 %6, label %10, label %7     

7:     
  %8 = load i32, i32* %2     
  %9= icmp sgt i32 %8, 57     ; ch<48 || ch>57
  br i1 %9, label %10, label %16     

10:     ; while Body
  %11 = load i32, i32* %2     
  %12= icmp eq i32 %11, 45     ; ch==45
  br i1 %12, label %13, label %14     ; judge ch==45

13:     ; if Body
  store i32 1, i32* %0     ; f=1
  br label %14     

14:     
  %15 = call i32 @getch()     ; call getch()
  store i32 %15, i32* %2     ; ch=getch()
  br label %4     

16:     ; exit while
  br label %17     

17:     ; judge ch>=48&&ch<=57
  %18 = load i32, i32* %2     
  %19= icmp sge i32 %18, 48     ; ch>=48
  br i1 %19, label %20, label %30     

20:     
  %21 = load i32, i32* %2     
  %22= icmp sle i32 %21, 57     ; ch>=48 && ch<=57
  br i1 %22, label %23, label %30     

23:     ; while Body
  %24 = load i32, i32* %1     
  %25 = mul i32 %24, 10     ; x*10
  %26 = load i32, i32* %2     
  %27 = add i32 %25, %26     ; x*10+ch
  %28 = sub i32 %27, 48     ; x*10+ch-48
  store i32 %28, i32* %1     ; x=x*10+ch-48
  %29 = call i32 @getch()     ; call getch()
  store i32 %29, i32* %2     ; ch=getch()
  br label %17     

30:     ; exit while
  %31 = load i32, i32* %0     
  %32= icmp ne i32 %31, 0     
  br i1 %32, label %33, label %36     ; judge f

33:     ; if Body
  %34 = load i32, i32* %1     ; -x
  %35 = sub i32 0, %34     
  store i32 %35, i32* %ret     
  br label %retBB     

36:     ; else Body
  %37 = load i32, i32* %1     
  store i32 %37, i32* %ret     
  br label %retBB     

38:     
  br label %retBB     

retBB:     
  %39 = load i32, i32* %ret     
  ret i32 %39     
}

define dso_local void @add_edge(i32 %0,i32 %1){
entry:     
  %2 = alloca i32     ; i32 To
  %3 = alloca i32     ; i32 from
  store i32 %0, i32* %3     
  store i32 %1, i32* %2     
  %4 = load i32, i32* @cnt     
  %5= getelementptr [10005 x i32],[10005 x i32]* @to , i32 0, i32 0     
  %6= getelementptr i32,i32* %5 , i32 %4     
  %7 = load i32, i32* %2     
  store i32 %7, i32* %6     ; to[cnt]=To
  %8 = load i32, i32* @cnt     
  %9= getelementptr [10005 x i32],[10005 x i32]* @next , i32 0, i32 0     
  %10= getelementptr i32,i32* %9 , i32 %8     
  %11 = load i32, i32* %3     
  %12= getelementptr [10005 x i32],[10005 x i32]* @head , i32 0, i32 0     
  %13= getelementptr i32,i32* %12 , i32 %11     
  %14 = load i32, i32* %13     
  store i32 %14, i32* %10     ; next[cnt]=head[from]
  %15 = load i32, i32* %3     
  %16= getelementptr [10005 x i32],[10005 x i32]* @head , i32 0, i32 0     
  %17= getelementptr i32,i32* %16 , i32 %15     
  %18 = load i32, i32* @cnt     
  store i32 %18, i32* %17     ; head[from]=cnt
  %19 = load i32, i32* @cnt     
  %20 = add i32 %19, 1     ; cnt+1
  store i32 %20, i32* @cnt     ; cnt=cnt+1
  %21 = load i32, i32* %2     
  %22= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %23 = mul i32 %21, 20     
  %24= getelementptr [20 x i32],[20 x i32]* %22 , i32 0, i32 0     
  %25= getelementptr i32,i32* %24 , i32 %23     
  %26 = load i32, i32* %3     
  store i32 %26, i32* %25     ; f[To][0]=from
  br label %retBB     

retBB:     
  ret void     
}

define dso_local void @init(){
entry:     
  %0 = alloca i32     ; i32 i=1
  %1= getelementptr [10005 x i32],[10005 x i32]* @dep , i32 0, i32 0     
  store i32 1061109567, i32* %1     ; dep[0]=0x3f3f3f3f
  store i32 1, i32* %0     ; i=i32 1
  br label %2     

2:     ; judge i<=n
  %3 = load i32, i32* %0     
  %4 = load i32, i32* @n     
  %5= icmp sle i32 %3, %4     ; i<=n
  br i1 %5, label %6, label %12     

6:     ; while Body
  %7 = load i32, i32* %0     
  %8= getelementptr [10005 x i32],[10005 x i32]* @head , i32 0, i32 0     
  %9= getelementptr i32,i32* %8 , i32 %7     
  store i32 -1, i32* %9     ; head[i]=-1
  %10 = load i32, i32* %0     
  %11 = add i32 %10, 1     ; i+1
  store i32 %11, i32* %0     ; i=i+1
  br label %2     

12:     ; exit while
  br label %retBB     

retBB:     
  ret void     
}

define dso_local void @tree(i32 %0,i32 %1){
entry:     
  %2 = alloca i32     ; i32 y=to[i]
  %3 = alloca i32     ; i32 i=0
  %4 = alloca i32     ; i32 d
  %5 = alloca i32     ; i32 x
  store i32 %0, i32* %5     
  store i32 %1, i32* %4     
  %6 = load i32, i32* %5     
  %7= getelementptr [10005 x i32],[10005 x i32]* @dep , i32 0, i32 0     
  %8= getelementptr i32,i32* %7 , i32 %6     
  %9 = load i32, i32* %4     
  store i32 %9, i32* %8     ; dep[x]=d
  store i32 0, i32* %3     ; i=i32 0
  br label %10     

10:     ; judge f[x][i]
  %11 = load i32, i32* %5     
  %12 = mul i32 %11, 20     
  %13= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %14 = load i32, i32* %3     
  %15 = add i32 %12, %14     
  %16= getelementptr [20 x i32],[20 x i32]* %13 , i32 0, i32 0     
  %17= getelementptr i32,i32* %16 , i32 %15     
  %18 = load i32, i32* %17     
  %19= icmp ne i32 %18, 0     
  br i1 %19, label %20, label %46     

20:     ; while Body
  %21 = load i32, i32* %5     
  %22 = mul i32 %21, 20     
  %23= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %24 = load i32, i32* %3     
  %25 = add i32 %24, 1     ; i+1
  %26 = add i32 %22, %25     
  %27= getelementptr [20 x i32],[20 x i32]* %23 , i32 0, i32 0     
  %28= getelementptr i32,i32* %27 , i32 %26     
  %29 = load i32, i32* %5     
  %30 = mul i32 %29, 20     
  %31= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %32 = load i32, i32* %3     
  %33 = add i32 %30, %32     
  %34= getelementptr [20 x i32],[20 x i32]* %31 , i32 0, i32 0     
  %35= getelementptr i32,i32* %34 , i32 %33     
  %36 = load i32, i32* %35     
  %37 = mul i32 %36, 20     
  %38= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %39 = load i32, i32* %3     
  %40 = add i32 %37, %39     
  %41= getelementptr [20 x i32],[20 x i32]* %38 , i32 0, i32 0     
  %42= getelementptr i32,i32* %41 , i32 %40     
  %43 = load i32, i32* %42     
  store i32 %43, i32* %28     ; f[x][i+1]=f[f[x][i]][i]
  %44 = load i32, i32* %3     
  %45 = add i32 %44, 1     ; i+1
  store i32 %45, i32* %3     ; i=i+1
  br label %10     

46:     ; exit while
  %47 = load i32, i32* %5     
  %48= getelementptr [10005 x i32],[10005 x i32]* @head , i32 0, i32 0     
  %49= getelementptr i32,i32* %48 , i32 %47     
  %50 = load i32, i32* %49     
  store i32 %50, i32* %3     ; i=head[x]
  br label %51     

51:     ; judge i!=-1
  %52 = load i32, i32* %3     
  %53= icmp ne i32 %52, -1     ; i!=-1
  br i1 %53, label %54, label %66     

54:     ; while Body
  %55 = load i32, i32* %3     
  %56= getelementptr [10005 x i32],[10005 x i32]* @to , i32 0, i32 0     
  %57= getelementptr i32,i32* %56 , i32 %55     
  %58 = load i32, i32* %57     
  store i32 %58, i32* %2     ; y= = load i32, i32* 
  %59 = load i32, i32* %2     
  %60 = load i32, i32* %4     
  %61 = add i32 %60, 1     ; d+1
  call void @tree(i32 %59,i32 %61)     ; call tree(y,d+1)
  %62 = load i32, i32* %3     
  %63= getelementptr [10005 x i32],[10005 x i32]* @next , i32 0, i32 0     
  %64= getelementptr i32,i32* %63 , i32 %62     
  %65 = load i32, i32* %64     
  store i32 %65, i32* %3     ; i=next[i]
  br label %51     

66:     ; exit while
  br label %retBB     

retBB:     
  ret void     
}

define dso_local i32 @LCA(i32 %0,i32 %1){
entry:     
  %2 = alloca i32     ; i32 i=19
  %3 = alloca i32     ; i32 t=x
  %4 = alloca i32     ; i32 y
  %5 = alloca i32     ; i32 x
  %ret = alloca i32     
  store i32 %0, i32* %5     
  store i32 %1, i32* %4     
  %6 = load i32, i32* %5     
  %7= getelementptr [10005 x i32],[10005 x i32]* @dep , i32 0, i32 0     
  %8= getelementptr i32,i32* %7 , i32 %6     
  %9 = load i32, i32* %8     
  %10 = load i32, i32* %4     
  %11= getelementptr [10005 x i32],[10005 x i32]* @dep , i32 0, i32 0     
  %12= getelementptr i32,i32* %11 , i32 %10     
  %13 = load i32, i32* %12     
  %14= icmp slt i32 %9, %13     ; dep[x]<dep[y]
  br i1 %14, label %15, label %19     ; judge dep[x]<dep[y]

15:     ; if Body
  %16 = load i32, i32* %5     
  store i32 %16, i32* %3     ; t= = load i32, i32* 
  %17 = load i32, i32* %4     
  store i32 %17, i32* %5     ; x=y
  %18 = load i32, i32* %3     
  store i32 %18, i32* %4     ; y=t
  br label %19     

19:     
  store i32 19, i32* %2     ; i=i32 19
  br label %20     

20:     ; judge dep[x]>dep[y]
  %21 = load i32, i32* %5     
  %22= getelementptr [10005 x i32],[10005 x i32]* @dep , i32 0, i32 0     
  %23= getelementptr i32,i32* %22 , i32 %21     
  %24 = load i32, i32* %23     
  %25 = load i32, i32* %4     
  %26= getelementptr [10005 x i32],[10005 x i32]* @dep , i32 0, i32 0     
  %27= getelementptr i32,i32* %26 , i32 %25     
  %28 = load i32, i32* %27     
  %29= icmp sgt i32 %24, %28     ; dep[x]>dep[y]
  br i1 %29, label %30, label %69     

30:     ; while Body
  %31 = load i32, i32* %5     
  %32 = mul i32 %31, 20     
  %33= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %34 = load i32, i32* %2     
  %35 = add i32 %32, %34     
  %36= getelementptr [20 x i32],[20 x i32]* %33 , i32 0, i32 0     
  %37= getelementptr i32,i32* %36 , i32 %35     
  %38 = load i32, i32* %37     
  %39= icmp ne i32 %38, 0     
  br i1 %39, label %40, label %66     

40:     
  %41 = load i32, i32* %5     
  %42 = mul i32 %41, 20     
  %43= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %44 = load i32, i32* %2     
  %45 = add i32 %42, %44     
  %46= getelementptr [20 x i32],[20 x i32]* %43 , i32 0, i32 0     
  %47= getelementptr i32,i32* %46 , i32 %45     
  %48 = load i32, i32* %47     
  %49= getelementptr [10005 x i32],[10005 x i32]* @dep , i32 0, i32 0     
  %50= getelementptr i32,i32* %49 , i32 %48     
  %51 = load i32, i32* %50     
  %52 = load i32, i32* %4     
  %53= getelementptr [10005 x i32],[10005 x i32]* @dep , i32 0, i32 0     
  %54= getelementptr i32,i32* %53 , i32 %52     
  %55 = load i32, i32* %54     
  %56= icmp sge i32 %51, %55     ; f[x][i] && dep[f[x][i]]>=dep[y]
  br i1 %56, label %57, label %66     ; judge f[x][i]&&dep[f[x][i]]>=dep[y]

57:     ; if Body
  %58 = load i32, i32* %5     
  %59 = mul i32 %58, 20     
  %60= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %61 = load i32, i32* %2     
  %62 = add i32 %59, %61     
  %63= getelementptr [20 x i32],[20 x i32]* %60 , i32 0, i32 0     
  %64= getelementptr i32,i32* %63 , i32 %62     
  %65 = load i32, i32* %64     
  store i32 %65, i32* %5     ; x=f[x][i]
  br label %66     

66:     
  %67 = load i32, i32* %2     
  %68 = sub i32 %67, 1     ; i-1
  store i32 %68, i32* %2     ; i=i-1
  br label %20     

69:     ; exit while
  %70 = load i32, i32* %5     
  %71 = load i32, i32* %4     
  %72= icmp eq i32 %70, %71     ; x==y
  br i1 %72, label %73, label %75     ; judge x==y

73:     ; if Body
  %74 = load i32, i32* %5     
  store i32 %74, i32* %ret     
  br label %retBB     

75:     
  store i32 19, i32* %2     ; i=19
  br label %76     

76:     ; judge i>=0
  %77 = load i32, i32* %2     
  %78= icmp sge i32 %77, 0     ; i>=0
  br i1 %78, label %79, label %117     

79:     ; while Body
  %80 = load i32, i32* %5     
  %81 = mul i32 %80, 20     
  %82= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %83 = load i32, i32* %2     
  %84 = add i32 %81, %83     
  %85= getelementptr [20 x i32],[20 x i32]* %82 , i32 0, i32 0     
  %86= getelementptr i32,i32* %85 , i32 %84     
  %87 = load i32, i32* %86     
  %88 = load i32, i32* %4     
  %89 = mul i32 %88, 20     
  %90= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %91 = load i32, i32* %2     
  %92 = add i32 %89, %91     
  %93= getelementptr [20 x i32],[20 x i32]* %90 , i32 0, i32 0     
  %94= getelementptr i32,i32* %93 , i32 %92     
  %95 = load i32, i32* %94     
  %96= icmp ne i32 %87, %95     ; f[x][i]!=f[y][i]
  br i1 %96, label %97, label %114     ; judge f[x][i]!=f[y][i]

97:     ; if Body
  %98 = load i32, i32* %5     
  %99 = mul i32 %98, 20     
  %100= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %101 = load i32, i32* %2     
  %102 = add i32 %99, %101     
  %103= getelementptr [20 x i32],[20 x i32]* %100 , i32 0, i32 0     
  %104= getelementptr i32,i32* %103 , i32 %102     
  %105 = load i32, i32* %104     
  store i32 %105, i32* %5     ; x=f[x][i]
  %106 = load i32, i32* %4     
  %107 = mul i32 %106, 20     
  %108= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %109 = load i32, i32* %2     
  %110 = add i32 %107, %109     
  %111= getelementptr [20 x i32],[20 x i32]* %108 , i32 0, i32 0     
  %112= getelementptr i32,i32* %111 , i32 %110     
  %113 = load i32, i32* %112     
  store i32 %113, i32* %4     ; y=f[y][i]
  br label %114     

114:     
  %115 = load i32, i32* %2     
  %116 = sub i32 %115, 1     ; i-1
  store i32 %116, i32* %2     ; i=i-1
  br label %76     

117:     ; exit while
  %118 = load i32, i32* %5     
  %119= getelementptr [10005 x [20 x i32]],[10005 x [20 x i32]]* @f , i32 0, i32 0     
  %120 = mul i32 %118, 20     
  %121= getelementptr [20 x i32],[20 x i32]* %119 , i32 0, i32 0     
  %122= getelementptr i32,i32* %121 , i32 %120     
  %123 = load i32, i32* %122     
  store i32 %123, i32* %ret     
  br label %retBB     

retBB:     
  %124 = load i32, i32* %ret     
  ret i32 %124     
}

define dso_local i32 @main(){
entry:     
  %0 = alloca i32     ; i32 y=quick_read()
  %1 = alloca i32     ; i32 x=quick_read()
  %2 = alloca i32     ; i32 y=quick_read()
  %3 = alloca i32     ; i32 x=quick_read()
  %4 = alloca i32     ; i32 i=1
  %ret = alloca i32     
  %5 = call i32 @quick_read()     ; call quick_read()
  store i32 %5, i32* @n     ; n=quick_read()
  %6 = call i32 @quick_read()     ; call quick_read()
  store i32 %6, i32* @m     ; m=quick_read()
  call void @init()     ; call init()
  store i32 1, i32* %4     ; i=i32 1
  br label %7     

7:     ; judge i!=n
  %8 = load i32, i32* %4     
  %9 = load i32, i32* @n     
  %10= icmp ne i32 %8, %9     ; i!=n
  br i1 %10, label %11, label %18     

11:     ; while Body
  %12 = call i32 @quick_read()     ; call quick_read()
  store i32 %12, i32* %3     ; x= = call i32 @quick_read()
  %13 = call i32 @quick_read()     ; call quick_read()
  store i32 %13, i32* %2     ; y= = call i32 @quick_read()
  %14 = load i32, i32* %3     
  %15 = load i32, i32* %2     
  call void @add_edge(i32 %14,i32 %15)     ; call add_edge(x,y)
  %16 = load i32, i32* %4     
  %17 = add i32 %16, 1     ; i+1
  store i32 %17, i32* %4     ; i=i+1
  br label %7     

18:     ; exit while
  call void @tree(i32 1,i32 1)     ; call tree(1,1)
  br label %19     

19:     ; judge m
  %20 = load i32, i32* @m     
  %21= icmp ne i32 %20, 0     
  br i1 %21, label %22, label %30     

22:     ; while Body
  %23 = call i32 @quick_read()     ; call quick_read()
  store i32 %23, i32* %1     ; x= = call i32 @quick_read()
  %24 = call i32 @quick_read()     ; call quick_read()
  store i32 %24, i32* %0     ; y= = call i32 @quick_read()
  %25 = load i32, i32* %1     
  %26 = load i32, i32* %0     
  %27 = call i32 @LCA(i32 %25,i32 %26)     ; call LCA(x,y)
  call void @putint(i32 %27)     ; call putint(LCA(x,y))
  call void @putch(i32 10)     ; call putch(10)
  %28 = load i32, i32* @m     
  %29 = sub i32 %28, 1     ; m-1
  store i32 %29, i32* @m     ; m=m-1
  br label %19     

30:     ; exit while
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %31 = load i32, i32* %ret     
  ret i32 %31     
}

