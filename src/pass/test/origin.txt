@seed = dso_local global [3 x i32] [i32 19971231,i32 19981013,i32 1000000007]
@staticvalue = dso_local global i32 0
@a = dso_local global [10000 x i32] zeroinitializer

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime(i32)
declare void @_sysy_stoptime(i32)

define dso_local i32 @set(i32* %0,i32 %1,i32 %2){
entry:     
  %3 = alloca i32     ; i32 v=0
  %4 = alloca i32     ; i32 i=10
  %5 = alloca [31 x [3 x i32]]     ; i32 x[bitcount+1][3]={}
  %6 = alloca i32     ; i32 d
  %7 = alloca i32     ; i32 pos
  %8 = alloca i32*     ; i32* a
  %ret = alloca i32     
  store i32* %0, i32** %8     
  store i32 %1, i32* %7     
  store i32 %2, i32* %6     
  %9= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %10= getelementptr [3 x i32],[3 x i32]* %9 , i32 0, i32 0     
  call void @memset(i32* %10,i32 0,i32 372)     ; x
  %11= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %12= getelementptr [3 x i32],[3 x i32]* %11 , i32 0, i32 0     
  %13= getelementptr i32,i32* %12 , i32 1     
  store i32 1, i32* %13     ; x[0][1]=1
  %14= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %15= getelementptr [3 x i32],[3 x i32]* %14 , i32 0, i32 0     
  %16= getelementptr i32,i32* %15 , i32 4     
  %17= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %18= getelementptr [3 x i32],[3 x i32]* %17 , i32 0, i32 0     
  %19= getelementptr i32,i32* %18 , i32 1     
  %20 = load i32, i32* %19     
  %21 = mul i32 %20, 2     ; x[0][1]*2
  store i32 %21, i32* %16     ; x[1][1]=x[0][1]*2
  %22= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %23= getelementptr [3 x i32],[3 x i32]* %22 , i32 0, i32 0     
  %24= getelementptr i32,i32* %23 , i32 7     
  %25= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %26= getelementptr [3 x i32],[3 x i32]* %25 , i32 0, i32 0     
  %27= getelementptr i32,i32* %26 , i32 4     
  %28 = load i32, i32* %27     
  %29 = mul i32 %28, 2     ; x[1][1]*2
  store i32 %29, i32* %24     ; x[2][1]=x[1][1]*2
  %30= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %31= getelementptr [3 x i32],[3 x i32]* %30 , i32 0, i32 0     
  %32= getelementptr i32,i32* %31 , i32 10     
  %33= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %34= getelementptr [3 x i32],[3 x i32]* %33 , i32 0, i32 0     
  %35= getelementptr i32,i32* %34 , i32 7     
  %36 = load i32, i32* %35     
  %37 = mul i32 %36, 2     ; x[2][1]*2
  store i32 %37, i32* %32     ; x[3][1]=x[2][1]*2
  %38= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %39= getelementptr [3 x i32],[3 x i32]* %38 , i32 0, i32 0     
  %40= getelementptr i32,i32* %39 , i32 13     
  %41= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %42= getelementptr [3 x i32],[3 x i32]* %41 , i32 0, i32 0     
  %43= getelementptr i32,i32* %42 , i32 10     
  %44 = load i32, i32* %43     
  %45 = mul i32 %44, 2     ; x[3][1]*2
  store i32 %45, i32* %40     ; x[4][1]=x[3][1]*2
  %46= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %47= getelementptr [3 x i32],[3 x i32]* %46 , i32 0, i32 0     
  %48= getelementptr i32,i32* %47 , i32 16     
  %49= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %50= getelementptr [3 x i32],[3 x i32]* %49 , i32 0, i32 0     
  %51= getelementptr i32,i32* %50 , i32 13     
  %52 = load i32, i32* %51     
  %53 = mul i32 %52, 2     ; x[4][1]*2
  store i32 %53, i32* %48     ; x[5][1]=x[4][1]*2
  %54= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %55= getelementptr [3 x i32],[3 x i32]* %54 , i32 0, i32 0     
  %56= getelementptr i32,i32* %55 , i32 19     
  %57= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %58= getelementptr [3 x i32],[3 x i32]* %57 , i32 0, i32 0     
  %59= getelementptr i32,i32* %58 , i32 16     
  %60 = load i32, i32* %59     
  %61 = mul i32 %60, 2     ; x[5][1]*2
  store i32 %61, i32* %56     ; x[6][1]=x[5][1]*2
  %62= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %63= getelementptr [3 x i32],[3 x i32]* %62 , i32 0, i32 0     
  %64= getelementptr i32,i32* %63 , i32 22     
  %65= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %66= getelementptr [3 x i32],[3 x i32]* %65 , i32 0, i32 0     
  %67= getelementptr i32,i32* %66 , i32 19     
  %68 = load i32, i32* %67     
  %69 = mul i32 %68, 2     ; x[6][1]*2
  store i32 %69, i32* %64     ; x[7][1]=x[6][1]*2
  %70= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %71= getelementptr [3 x i32],[3 x i32]* %70 , i32 0, i32 0     
  %72= getelementptr i32,i32* %71 , i32 25     
  %73= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %74= getelementptr [3 x i32],[3 x i32]* %73 , i32 0, i32 0     
  %75= getelementptr i32,i32* %74 , i32 22     
  %76 = load i32, i32* %75     
  %77 = mul i32 %76, 2     ; x[7][1]*2
  store i32 %77, i32* %72     ; x[8][1]=x[7][1]*2
  %78= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %79= getelementptr [3 x i32],[3 x i32]* %78 , i32 0, i32 0     
  %80= getelementptr i32,i32* %79 , i32 28     
  %81= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %82= getelementptr [3 x i32],[3 x i32]* %81 , i32 0, i32 0     
  %83= getelementptr i32,i32* %82 , i32 25     
  %84 = load i32, i32* %83     
  %85 = mul i32 %84, 2     ; x[8][1]*2
  store i32 %85, i32* %80     ; x[9][1]=x[8][1]*2
  %86= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %87= getelementptr [3 x i32],[3 x i32]* %86 , i32 0, i32 0     
  %88= getelementptr i32,i32* %87 , i32 31     
  %89= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %90= getelementptr [3 x i32],[3 x i32]* %89 , i32 0, i32 0     
  %91= getelementptr i32,i32* %90 , i32 28     
  %92 = load i32, i32* %91     
  %93 = mul i32 %92, 2     ; x[9][1]*2
  store i32 %93, i32* %88     ; x[10][1]=x[9][1]*2
  store i32 10, i32* %4     ; i=i32 10
  store i32 0, i32* %3     ; v=i32 0
  %94 = load i32, i32* %7     
  %95 = sdiv i32 %94, 30     ; pos/bitcount
  %96= icmp sge i32 %95, 10000     ; pos/bitcount>=10000
  br i1 %96, label %97, label %98     ; judge pos/bitcount>=10000

97:     ; if Body
  store i32 0, i32* %ret     
  br label %retBB     

98:     
  %99 = load i32*, i32** %8     
  %100 = load i32, i32* %7     
  %101 = sdiv i32 %100, 30     ; pos/bitcount
  %102= getelementptr i32,i32* %99 , i32 %101     
  %103 = load i32, i32* %102     
  %104 = load i32, i32* %7     
  %105 = sdiv i32 %104, 30     
  %106 = mul i32 %105, 30     
  %107 = sub i32 %104, %106     ; pos%bitcount
  %108 = mul i32 %107, 3     
  %109= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %110 = add i32 %108, 1     
  %111= getelementptr [3 x i32],[3 x i32]* %109 , i32 0, i32 0     
  %112= getelementptr i32,i32* %111 , i32 %110     
  %113 = load i32, i32* %112     
  %114 = sdiv i32 %103, %113     ; a[pos/bitcount]/(x[pos%bitcount][1])
  %115 = srem i32 %114, 2     ; a[pos/bitcount]/(x[pos%bitcount][1])%2
  %116 = load i32, i32* %6     
  %117= icmp ne i32 %115, %116     ; a[pos/bitcount]/(x[pos%bitcount][1])%2!=d
  br i1 %117, label %118, label %189     ; judge a[pos/bitcount]/(x[pos%bitcount][1])%2!=d

118:     ; if Body
  %119 = load i32*, i32** %8     
  %120 = load i32, i32* %7     
  %121 = sdiv i32 %120, 30     ; pos/bitcount
  %122= getelementptr i32,i32* %119 , i32 %121     
  %123 = load i32, i32* %122     
  %124 = load i32, i32* %7     
  %125 = sdiv i32 %124, 30     
  %126 = mul i32 %125, 30     
  %127 = sub i32 %124, %126     ; pos%bitcount
  %128 = mul i32 %127, 3     
  %129= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %130 = add i32 %128, 1     
  %131= getelementptr [3 x i32],[3 x i32]* %129 , i32 0, i32 0     
  %132= getelementptr i32,i32* %131 , i32 %130     
  %133 = load i32, i32* %132     
  %134 = sdiv i32 %123, %133     ; a[pos/bitcount]/(x[pos%bitcount][1])
  %135 = srem i32 %134, 2     ; a[pos/bitcount]/(x[pos%bitcount][1])%2
  %136= icmp eq i32 %135, 0     ; a[pos/bitcount]/(x[pos%bitcount][1])%2==0
  br i1 %136, label %137, label %152     ; judge a[pos/bitcount]/(x[pos%bitcount][1])%2==0

137:     ; if Body
  %138 = load i32, i32* %6     
  %139= icmp eq i32 %138, 1     ; d==1
  br i1 %139, label %140, label %151     ; judge d==1

140:     ; if Body
  %141 = load i32, i32* %7     
  %142 = sdiv i32 %141, 30     
  %143 = mul i32 %142, 30     
  %144 = sub i32 %141, %143     ; pos%bitcount
  %145 = mul i32 %144, 3     
  %146= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %147 = add i32 %145, 1     
  %148= getelementptr [3 x i32],[3 x i32]* %146 , i32 0, i32 0     
  %149= getelementptr i32,i32* %148 , i32 %147     
  %150 = load i32, i32* %149     
  store i32 %150, i32* %3     ; v=x[pos%bitcount][1]
  br label %151     

151:     
  br label %152     

152:     
  %153 = load i32*, i32** %8     
  %154 = load i32, i32* %7     
  %155 = sdiv i32 %154, 30     ; pos/bitcount
  %156= getelementptr i32,i32* %153 , i32 %155     
  %157 = load i32, i32* %156     
  %158 = load i32, i32* %7     
  %159 = sdiv i32 %158, 30     
  %160 = mul i32 %159, 30     
  %161 = sub i32 %158, %160     ; pos%bitcount
  %162 = mul i32 %161, 3     
  %163= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %164 = add i32 %162, 1     
  %165= getelementptr [3 x i32],[3 x i32]* %163 , i32 0, i32 0     
  %166= getelementptr i32,i32* %165 , i32 %164     
  %167 = load i32, i32* %166     
  %168 = sdiv i32 %157, %167     ; a[pos/bitcount]/x[pos%bitcount][1]
  %169 = srem i32 %168, 2     ; a[pos/bitcount]/x[pos%bitcount][1]%2
  %170= icmp eq i32 %169, 1     ; a[pos/bitcount]/x[pos%bitcount][1]%2==1
  br i1 %170, label %171, label %188     ; judge a[pos/bitcount]/x[pos%bitcount][1]%2==1

171:     ; if Body
  %172 = load i32, i32* %6     
  %173= icmp eq i32 %172, 0     ; d==0
  br i1 %173, label %174, label %187     ; judge d==0

174:     ; if Body
  %175 = load i32, i32* %3     
  %176 = load i32, i32* %7     
  %177 = sdiv i32 %176, 30     
  %178 = mul i32 %177, 30     
  %179 = sub i32 %176, %178     ; pos%bitcount
  %180 = mul i32 %179, 3     
  %181= getelementptr [31 x [3 x i32]],[31 x [3 x i32]]* %5 , i32 0, i32 0     
  %182 = add i32 %180, 1     
  %183= getelementptr [3 x i32],[3 x i32]* %181 , i32 0, i32 0     
  %184= getelementptr i32,i32* %183 , i32 %182     
  %185 = load i32, i32* %184     
  %186 = sub i32 %175, %185     ; v-x[pos%bitcount][1]
  store i32 %186, i32* %3     ; v=v-x[pos%bitcount][1]
  br label %187     

187:     
  br label %188     

188:     
  br label %189     

189:     
  %190 = load i32*, i32** %8     
  %191 = load i32, i32* %7     
  %192 = sdiv i32 %191, 30     ; pos/bitcount
  %193= getelementptr i32,i32* %190 , i32 %192     
  %194 = load i32*, i32** %8     
  %195 = load i32, i32* %7     
  %196 = sdiv i32 %195, 30     ; pos/bitcount
  %197= getelementptr i32,i32* %194 , i32 %196     
  %198 = load i32, i32* %197     
  %199 = load i32, i32* %3     
  %200 = add i32 %198, %199     ; a[pos/bitcount]+v
  store i32 %200, i32* %193     ; a[pos/bitcount]=a[pos/bitcount]+v
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %201 = load i32, i32* %ret     
  ret i32 %201     
}

define dso_local i32 @rand(){
entry:     
  %ret = alloca i32     
  %0 = load i32, i32* @staticvalue     
  %1= getelementptr [3 x i32],[3 x i32]* @seed , i32 0, i32 0     
  %2 = load i32, i32* %1     
  %3 = mul i32 %0, %2     ; staticvalue*seed[0]
  %4= getelementptr [3 x i32],[3 x i32]* @seed , i32 0, i32 0     
  %5= getelementptr i32,i32* %4 , i32 1     
  %6 = load i32, i32* %5     
  %7 = add i32 %3, %6     ; staticvalue*seed[0]+seed[1]
  store i32 %7, i32* @staticvalue     ; staticvalue=staticvalue*seed[0]+seed[1]
  %8 = load i32, i32* @staticvalue     
  %9= getelementptr [3 x i32],[3 x i32]* @seed , i32 0, i32 0     
  %10= getelementptr i32,i32* %9 , i32 2     
  %11 = load i32, i32* %10     
  %12 = sdiv i32 %8, %11     
  %13 = mul i32 %12, %11     
  %14 = sub i32 %8, %13     ; staticvalue%seed[2]
  store i32 %14, i32* @staticvalue     ; staticvalue=staticvalue%seed[2]
  %15 = load i32, i32* @staticvalue     
  %16= icmp slt i32 %15, 0     ; staticvalue<0
  br i1 %16, label %17, label %23     ; judge staticvalue<0

17:     ; if Body
  %18= getelementptr [3 x i32],[3 x i32]* @seed , i32 0, i32 0     
  %19= getelementptr i32,i32* %18 , i32 2     
  %20 = load i32, i32* %19     
  %21 = load i32, i32* @staticvalue     
  %22 = add i32 %20, %21     ; seed[2]+staticvalue
  store i32 %22, i32* @staticvalue     ; staticvalue=seed[2]+staticvalue
  br label %23     

23:     
  %24 = load i32, i32* @staticvalue     
  store i32 %24, i32* %ret     
  br label %retBB     

retBB:     
  %25 = load i32, i32* %ret     
  ret i32 %25     
}

define dso_local i32 @main(){
entry:     
  %0 = alloca i32     ; i32 y
  %1 = alloca i32     ; i32 x
  %2 = alloca i32     ; i32 n=getint()
  %ret = alloca i32     
  %3 = call i32 @getint()     ; call getint()
  store i32 %3, i32* %2     ; n= = call i32 @getint()
  %4 = call i32 @getint()     ; call getint()
  store i32 %4, i32* @staticvalue     ; staticvalue=getint()
  call void @_sysy_starttime(i32 0)     ; call starttime()
  br label %5     

5:     ; judge n>0
  %6 = load i32, i32* %2     
  %7= icmp sgt i32 %6, 0     ; n>0
  br i1 %7, label %8, label %21     

8:     ; while Body
  %9 = load i32, i32* %2     
  %10 = sub i32 %9, 1     ; n-1
  store i32 %10, i32* %2     ; n=n-1
  %11 = call i32 @rand()     ; call rand()
  %12 = sdiv i32 %11, 300000     
  %13 = mul i32 %12, 300000     
  %14 = sub i32 %11, %13     ; rand()%300000
  store i32 %14, i32* %1     ; x=rand()%300000
  %15 = call i32 @rand()     ; call rand()
  %16 = srem i32 %15, 2     ; rand()%2
  store i32 %16, i32* %0     ; y=rand()%2
  %17= getelementptr [10000 x i32],[10000 x i32]* @a , i32 0, i32 0     
  %18 = load i32, i32* %1     
  %19 = load i32, i32* %0     
  %20 = call i32 @set(i32* %17,i32 %18,i32 %19)     ; call set(a,x,y)
  br label %5     

21:     ; exit while
  call void @_sysy_stoptime(i32 0)     ; call stoptime()
  %22= getelementptr [10000 x i32],[10000 x i32]* @a , i32 0, i32 0     
  call void @putarray(i32 10000,i32* %22)     ; call putarray(10000,a)
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %23 = load i32, i32* %ret     
  ret i32 %23     
}

