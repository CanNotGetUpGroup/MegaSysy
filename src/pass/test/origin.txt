@a = dso_local global [30000010 x i32] zeroinitializer
@ans = dso_local global i32 0

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime(i32)
declare void @_sysy_stoptime(i32)

define dso_local i32 @getMaxNum(i32 %0,i32* %1){
entry:     
  %2 = alloca i32     ; i32 i=0
  %3 = alloca i32     ; i32 ret=0
  %4 = alloca i32*     ; i32* arr
  %5 = alloca i32     ; i32 n
  %ret = alloca i32     
  store i32 %0, i32* %5     
  store i32* %1, i32** %4     
  store i32 0, i32* %3     ; ret=i32 0
  store i32 0, i32* %2     ; i=i32 0
  br label %6     

6:     ; judge i<n
  %7 = load i32, i32* %2     
  %8 = load i32, i32* %5     
  %9= icmp slt i32 %7, %8     ; i<n
  br i1 %9, label %10, label %25     

10:     ; while Body
  %11 = load i32*, i32** %4     
  %12 = load i32, i32* %2     
  %13= getelementptr i32,i32* %11 , i32 %12     
  %14 = load i32, i32* %13     
  %15 = load i32, i32* %3     
  %16= icmp sgt i32 %14, %15     ; arr[i]>ret
  br i1 %16, label %17, label %22     ; judge arr[i]>ret

17:     ; if Body
  %18 = load i32*, i32** %4     
  %19 = load i32, i32* %2     
  %20= getelementptr i32,i32* %18 , i32 %19     
  %21 = load i32, i32* %20     
  store i32 %21, i32* %3     ; ret=arr[i]
  br label %22     

22:     
  %23 = load i32, i32* %2     
  %24 = add i32 %23, 1     ; i+1
  store i32 %24, i32* %2     ; i=i+1
  br label %6     

25:     ; exit while
  %26 = load i32, i32* %3     
  store i32 %26, i32* %ret     
  br label %retBB     

retBB:     
  %27 = load i32, i32* %ret     
  ret i32 %27     
}

define dso_local i32 @getNumPos(i32 %0,i32 %1){
entry:     
  %2 = alloca i32     ; i32 i=0
  %3 = alloca i32     ; i32 tmp=1
  %4 = alloca i32     ; i32 pos
  %5 = alloca i32     ; i32 num
  %ret = alloca i32     
  store i32 %0, i32* %5     
  store i32 %1, i32* %4     
  store i32 1, i32* %3     ; tmp=i32 1
  store i32 0, i32* %2     ; i=i32 0
  br label %6     

6:     ; judge i<pos
  %7 = load i32, i32* %2     
  %8 = load i32, i32* %4     
  %9= icmp slt i32 %7, %8     ; i<pos
  br i1 %9, label %10, label %15     

10:     ; while Body
  %11 = load i32, i32* %5     
  %12 = sdiv i32 %11, 16     ; num/base
  store i32 %12, i32* %5     ; num=num/base
  %13 = load i32, i32* %2     
  %14 = add i32 %13, 1     ; i+1
  store i32 %14, i32* %2     ; i=i+1
  br label %6     

15:     ; exit while
  %16 = load i32, i32* %5     
  %17 = srem i32 %16, 16     ; num%base
  store i32 %17, i32* %ret     
  br label %retBB     

retBB:     
  %18 = load i32, i32* %ret     
  ret i32 %18     
}

define dso_local void @radixSort(i32 %0,i32* %1,i32 %2,i32 %3){
entry:     
  %4 = alloca i32     ; i32 i=l
  %5 = alloca i32     ; i32 t=v
  %6 = alloca i32     ; i32 v=a[head[i]]
  %7 = alloca i32     ; i32 i=l
  %8 = alloca [16 x i32]     ; i32 cnt[base]={}
  %9 = alloca [16 x i32]     ; i32 tail[base]={}
  %10 = alloca [16 x i32]     ; i32 head[base]={}
  %11 = alloca i32     ; i32 r
  %12 = alloca i32     ; i32 l
  %13 = alloca i32*     ; i32* a
  %14 = alloca i32     ; i32 bitround
  store i32 %0, i32* %14     
  store i32* %1, i32** %13     
  store i32 %2, i32* %12     
  store i32 %3, i32* %11     
  %15= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  call void @memset(i32* %15,i32 0,i32 64)     ; head
  %16= getelementptr [16 x i32],[16 x i32]* %9 , i32 0, i32 0     
  call void @memset(i32* %16,i32 0,i32 64)     ; tail
  %17= getelementptr [16 x i32],[16 x i32]* %8 , i32 0, i32 0     
  call void @memset(i32* %17,i32 0,i32 64)     ; cnt
  %18 = load i32, i32* %14     
  %19= icmp eq i32 %18, -1     ; bitround==-1
  br i1 %19, label %25, label %20     

20:     
  %21 = load i32, i32* %12     
  %22 = add i32 %21, 1     ; l+1
  %23 = load i32, i32* %11     
  %24= icmp sge i32 %22, %23     ; bitround==-1 || l+1>=r
  br i1 %24, label %25, label %26     ; judge bitround==-1||l+1>=r

25:     ; if Body
  br label %retBB     

26:     
  %27 = load i32, i32* %12     
  store i32 %27, i32* %7     ; i= = load i32, i32* 
  br label %28     

28:     ; judge i<r
  %29 = load i32, i32* %7     
  %30 = load i32, i32* %11     
  %31= icmp slt i32 %29, %30     ; i<r
  br i1 %31, label %32, label %53     

32:     ; while Body
  %33 = load i32*, i32** %13     
  %34 = load i32, i32* %7     
  %35= getelementptr i32,i32* %33 , i32 %34     
  %36 = load i32, i32* %35     
  %37 = load i32, i32* %14     
  %38 = call i32 @getNumPos(i32 %36,i32 %37)     ; call getNumPos(a[i],bitround)
  %39= getelementptr [16 x i32],[16 x i32]* %8 , i32 0, i32 0     
  %40= getelementptr i32,i32* %39 , i32 %38     
  %41 = load i32*, i32** %13     
  %42 = load i32, i32* %7     
  %43= getelementptr i32,i32* %41 , i32 %42     
  %44 = load i32, i32* %43     
  %45 = load i32, i32* %14     
  %46 = call i32 @getNumPos(i32 %44,i32 %45)     ; call getNumPos(a[i],bitround)
  %47= getelementptr [16 x i32],[16 x i32]* %8 , i32 0, i32 0     
  %48= getelementptr i32,i32* %47 , i32 %46     
  %49 = load i32, i32* %48     
  %50 = add i32 %49, 1     ; cnt[getNumPos(a[i],bitround)]+1
  store i32 %50, i32* %40     ; cnt[getNumPos(a[i],bitround)]=cnt[getNumPos(a[i],bitround)]+1
  %51 = load i32, i32* %7     
  %52 = add i32 %51, 1     ; i+1
  store i32 %52, i32* %7     ; i=i+1
  br label %28     

53:     ; exit while
  %54= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %55 = load i32, i32* %12     
  store i32 %55, i32* %54     ; head[0]=l
  %56= getelementptr [16 x i32],[16 x i32]* %9 , i32 0, i32 0     
  %57 = load i32, i32* %12     
  %58= getelementptr [16 x i32],[16 x i32]* %8 , i32 0, i32 0     
  %59 = load i32, i32* %58     
  %60 = add i32 %57, %59     ; l+cnt[0]
  store i32 %60, i32* %56     ; tail[0]=l+cnt[0]
  store i32 1, i32* %7     ; i=1
  br label %61     

61:     ; judge i<base
  %62 = load i32, i32* %7     
  %63= icmp slt i32 %62, 16     ; i<base
  br i1 %63, label %64, label %87     

64:     ; while Body
  %65 = load i32, i32* %7     
  %66= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %67= getelementptr i32,i32* %66 , i32 %65     
  %68 = load i32, i32* %7     
  %69 = sub i32 %68, 1     ; i-1
  %70= getelementptr [16 x i32],[16 x i32]* %9 , i32 0, i32 0     
  %71= getelementptr i32,i32* %70 , i32 %69     
  %72 = load i32, i32* %71     
  store i32 %72, i32* %67     ; head[i]=tail[i-1]
  %73 = load i32, i32* %7     
  %74= getelementptr [16 x i32],[16 x i32]* %9 , i32 0, i32 0     
  %75= getelementptr i32,i32* %74 , i32 %73     
  %76 = load i32, i32* %7     
  %77= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %78= getelementptr i32,i32* %77 , i32 %76     
  %79 = load i32, i32* %78     
  %80 = load i32, i32* %7     
  %81= getelementptr [16 x i32],[16 x i32]* %8 , i32 0, i32 0     
  %82= getelementptr i32,i32* %81 , i32 %80     
  %83 = load i32, i32* %82     
  %84 = add i32 %79, %83     ; head[i]+cnt[i]
  store i32 %84, i32* %75     ; tail[i]=head[i]+cnt[i]
  %85 = load i32, i32* %7     
  %86 = add i32 %85, 1     ; i+1
  store i32 %86, i32* %7     ; i=i+1
  br label %61     

87:     ; exit while
  store i32 0, i32* %7     ; i=0
  br label %88     

88:     ; judge i<base
  %89 = load i32, i32* %7     
  %90= icmp slt i32 %89, 16     ; i<base
  br i1 %90, label %91, label %167     

91:     ; while Body
  br label %92     

92:     ; judge head[i]<tail[i]
  %93 = load i32, i32* %7     
  %94= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %95= getelementptr i32,i32* %94 , i32 %93     
  %96 = load i32, i32* %95     
  %97 = load i32, i32* %7     
  %98= getelementptr [16 x i32],[16 x i32]* %9 , i32 0, i32 0     
  %99= getelementptr i32,i32* %98 , i32 %97     
  %100 = load i32, i32* %99     
  %101= icmp slt i32 %96, %100     ; head[i]<tail[i]
  br i1 %101, label %102, label %164     

102:     ; while Body
  %103 = load i32*, i32** %13     
  %104 = load i32, i32* %7     
  %105= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %106= getelementptr i32,i32* %105 , i32 %104     
  %107 = load i32, i32* %106     
  %108= getelementptr i32,i32* %103 , i32 %107     
  %109 = load i32, i32* %108     
  store i32 %109, i32* %6     ; v= = load i32, i32* 
  br label %110     

110:     ; judge getNumPos(v,bitround)!=i
  %111 = load i32, i32* %6     
  %112 = load i32, i32* %14     
  %113 = call i32 @getNumPos(i32 %111,i32 %112)     ; call getNumPos(v,bitround)
  %114 = load i32, i32* %7     
  %115= icmp ne i32 %113, %114     ; getNumPos(v,bitround)!=i
  br i1 %115, label %116, label %148     

116:     ; while Body
  %117 = load i32, i32* %6     
  store i32 %117, i32* %5     ; t= = load i32, i32* 
  %118 = load i32*, i32** %13     
  %119 = load i32, i32* %5     
  %120 = load i32, i32* %14     
  %121 = call i32 @getNumPos(i32 %119,i32 %120)     ; call getNumPos(t,bitround)
  %122= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %123= getelementptr i32,i32* %122 , i32 %121     
  %124 = load i32, i32* %123     
  %125= getelementptr i32,i32* %118 , i32 %124     
  %126 = load i32, i32* %125     
  store i32 %126, i32* %6     ; v=a[head[getNumPos(t,bitround)]]
  %127 = load i32*, i32** %13     
  %128 = load i32, i32* %5     
  %129 = load i32, i32* %14     
  %130 = call i32 @getNumPos(i32 %128,i32 %129)     ; call getNumPos(t,bitround)
  %131= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %132= getelementptr i32,i32* %131 , i32 %130     
  %133 = load i32, i32* %132     
  %134= getelementptr i32,i32* %127 , i32 %133     
  %135 = load i32, i32* %5     
  store i32 %135, i32* %134     ; a[head[getNumPos(t,bitround)]]=t
  %136 = load i32, i32* %5     
  %137 = load i32, i32* %14     
  %138 = call i32 @getNumPos(i32 %136,i32 %137)     ; call getNumPos(t,bitround)
  %139= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %140= getelementptr i32,i32* %139 , i32 %138     
  %141 = load i32, i32* %5     
  %142 = load i32, i32* %14     
  %143 = call i32 @getNumPos(i32 %141,i32 %142)     ; call getNumPos(t,bitround)
  %144= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %145= getelementptr i32,i32* %144 , i32 %143     
  %146 = load i32, i32* %145     
  %147 = add i32 %146, 1     ; head[getNumPos(t,bitround)]+1
  store i32 %147, i32* %140     ; head[getNumPos(t,bitround)]=head[getNumPos(t,bitround)]+1
  br label %110     

148:     ; exit while
  %149 = load i32*, i32** %13     
  %150 = load i32, i32* %7     
  %151= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %152= getelementptr i32,i32* %151 , i32 %150     
  %153 = load i32, i32* %152     
  %154= getelementptr i32,i32* %149 , i32 %153     
  %155 = load i32, i32* %6     
  store i32 %155, i32* %154     ; a[head[i]]=v
  %156 = load i32, i32* %7     
  %157= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %158= getelementptr i32,i32* %157 , i32 %156     
  %159 = load i32, i32* %7     
  %160= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %161= getelementptr i32,i32* %160 , i32 %159     
  %162 = load i32, i32* %161     
  %163 = add i32 %162, 1     ; head[i]+1
  store i32 %163, i32* %158     ; head[i]=head[i]+1
  br label %92     

164:     ; exit while
  %165 = load i32, i32* %7     
  %166 = add i32 %165, 1     ; i+1
  store i32 %166, i32* %7     ; i=i+1
  br label %88     

167:     ; exit while
  %168 = load i32, i32* %12     
  store i32 %168, i32* %4     ; i= = load i32, i32* 
  %169= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %170 = load i32, i32* %12     
  store i32 %170, i32* %169     ; head[0]=l
  %171= getelementptr [16 x i32],[16 x i32]* %9 , i32 0, i32 0     
  %172 = load i32, i32* %12     
  %173= getelementptr [16 x i32],[16 x i32]* %8 , i32 0, i32 0     
  %174 = load i32, i32* %173     
  %175 = add i32 %172, %174     ; l+cnt[0]
  store i32 %175, i32* %171     ; tail[0]=l+cnt[0]
  store i32 0, i32* %4     ; i=0
  br label %176     

176:     ; judge i<base
  %177 = load i32, i32* %4     
  %178= icmp slt i32 %177, 16     ; i<base
  br i1 %178, label %179, label %217     

179:     ; while Body
  %180 = load i32, i32* %4     
  %181= icmp sgt i32 %180, 0     ; i>0
  br i1 %181, label %182, label %203     ; judge i>0

182:     ; if Body
  %183 = load i32, i32* %4     
  %184= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %185= getelementptr i32,i32* %184 , i32 %183     
  %186 = load i32, i32* %4     
  %187 = sub i32 %186, 1     ; i-1
  %188= getelementptr [16 x i32],[16 x i32]* %9 , i32 0, i32 0     
  %189= getelementptr i32,i32* %188 , i32 %187     
  %190 = load i32, i32* %189     
  store i32 %190, i32* %185     ; head[i]=tail[i-1]
  %191 = load i32, i32* %4     
  %192= getelementptr [16 x i32],[16 x i32]* %9 , i32 0, i32 0     
  %193= getelementptr i32,i32* %192 , i32 %191     
  %194 = load i32, i32* %4     
  %195= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %196= getelementptr i32,i32* %195 , i32 %194     
  %197 = load i32, i32* %196     
  %198 = load i32, i32* %4     
  %199= getelementptr [16 x i32],[16 x i32]* %8 , i32 0, i32 0     
  %200= getelementptr i32,i32* %199 , i32 %198     
  %201 = load i32, i32* %200     
  %202 = add i32 %197, %201     ; head[i]+cnt[i]
  store i32 %202, i32* %193     ; tail[i]=head[i]+cnt[i]
  br label %203     

203:     
  %204 = load i32, i32* %14     
  %205 = sub i32 %204, 1     ; bitround-1
  %206 = load i32*, i32** %13     
  %207 = load i32, i32* %4     
  %208= getelementptr [16 x i32],[16 x i32]* %10 , i32 0, i32 0     
  %209= getelementptr i32,i32* %208 , i32 %207     
  %210 = load i32, i32* %209     
  %211 = load i32, i32* %4     
  %212= getelementptr [16 x i32],[16 x i32]* %9 , i32 0, i32 0     
  %213= getelementptr i32,i32* %212 , i32 %211     
  %214 = load i32, i32* %213     
  call void @radixSort(i32 %205,i32* %206,i32 %210,i32 %214)     ; call radixSort(bitround-1,a,head[i],tail[i])
  %215 = load i32, i32* %4     
  %216 = add i32 %215, 1     ; i+1
  store i32 %216, i32* %4     ; i=i+1
  br label %176     

217:     ; exit while
  br label %retBB     

retBB:     
  ret void     
}

define dso_local i32 @main(){
entry:     
  %0 = alloca i32     ; i32 i=0
  %1 = alloca i32     ; i32 n=getarray(a)
  %ret = alloca i32     
  %2= getelementptr [30000010 x i32],[30000010 x i32]* @a , i32 0, i32 0     
  %3 = call i32 @getarray(i32* %2)     ; call getarray(a)
  store i32 %3, i32* %1     ; n= = call i32 @getarray(i32* )
  call void @_sysy_starttime(i32 0)     ; call starttime()
  %4= getelementptr [30000010 x i32],[30000010 x i32]* @a , i32 0, i32 0     
  %5 = load i32, i32* %1     
  call void @radixSort(i32 8,i32* %4,i32 0,i32 %5)     ; call radixSort(8,a,0,n)
  store i32 0, i32* %0     ; i=i32 0
  br label %6     

6:     ; judge i<n
  %7 = load i32, i32* %0     
  %8 = load i32, i32* %1     
  %9= icmp slt i32 %7, %8     ; i<n
  br i1 %9, label %10, label %26     

10:     ; while Body
  %11 = load i32, i32* @ans     
  %12 = load i32, i32* %0     
  %13 = load i32, i32* %0     
  %14= getelementptr [30000010 x i32],[30000010 x i32]* @a , i32 0, i32 0     
  %15= getelementptr i32,i32* %14 , i32 %13     
  %16 = load i32, i32* %15     
  %17 = load i32, i32* %0     
  %18 = add i32 2, %17     ; 2+i
  %19 = sdiv i32 %16, %18     
  %20 = mul i32 %19, %18     
  %21 = sub i32 %16, %20     ; a[i]%(2+i)
  %22 = mul i32 %12, %21     ; i*(a[i]%(2+i))
  %23 = add i32 %11, %22     ; ans+i*(a[i]%(2+i))
  store i32 %23, i32* @ans     ; ans=ans+i*(a[i]%(2+i))
  %24 = load i32, i32* %0     
  %25 = add i32 %24, 1     ; i+1
  store i32 %25, i32* %0     ; i=i+1
  br label %6     

26:     ; exit while
  %27 = load i32, i32* @ans     
  %28= icmp slt i32 %27, 0     ; ans<0
  br i1 %28, label %29, label %32     ; judge ans<0

29:     ; if Body
  %30 = load i32, i32* @ans     ; -ans
  %31 = sub i32 0, %30     
  store i32 %31, i32* @ans     ; ans=-ans
  br label %32     

32:     
  call void @_sysy_stoptime(i32 0)     ; call stoptime()
  %33 = load i32, i32* @ans     
  call void @putint(i32 %33)     ; call putint(ans)
  call void @putch(i32 10)     ; call putch(10)
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %34 = load i32, i32* %ret     
  ret i32 %34     
}

