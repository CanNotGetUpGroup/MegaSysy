@n = dso_local global i32 0

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @starttime()
declare void @stoptime()

define dso_local i32 @insertsort(i32* %0){
entry:     
  %1 = alloca i32     ; i32 j
  %2 = alloca i32     ; i32 i
  %3 = alloca i32*     ; i32* a
  store i32* %0, i32** %3     
  store i32 1, i32* %2     ; i=1
  br label %4     

4:     ; judge i<n
  %5 = load i32, i32* %2     
  %6 = load i32, i32* @n     
  %7= icmp slt i32 %5, %6     ; i<n
  br i1 %7, label %8, label %18     

8:     ; while Body
  %9 = load i32, i32* %1     
  %10= icmp slt i32 %9, 0     ; j<0
  br i1 %10, label %11, label %12     ; judge j<0

11:     ; if Body
  br label %17     

12:     
  %13 = load i32, i32* %1     
  %14= icmp sgt i32 %13, 2     ; j>2
  br i1 %14, label %15, label %16     ; judge j>2

15:     ; if Body
  br label %17     

16:     
  store i32 3, i32* %1     ; j=3
  br label %17     

17:     ; jump to head
  br label %4     

18:     ; exit while
  ret i32 0     
}

define dso_local i32 @main(){
entry:     
  %0 = alloca i32     ; i32 tmp
  %1 = alloca i32     ; i32 i
  %2 = alloca [10 x i32]     ; i32 a[10]
  store i32 10, i32* @n     ; n=10
  %3= getelementptr [10 x i32],[10 x i32]* %2 , i32 0, i32 0     
  store i32 4, i32* %3     ; a[0]=4
  %4= getelementptr [10 x i32],[10 x i32]* %2 , i32 0, i32 1     
  store i32 3, i32* %4     ; a[1]=3
  %5= getelementptr [10 x i32],[10 x i32]* %2 , i32 0, i32 2     
  store i32 9, i32* %5     ; a[2]=9
  %6= getelementptr [10 x i32],[10 x i32]* %2 , i32 0, i32 3     
  store i32 2, i32* %6     ; a[3]=2
  %7= getelementptr [10 x i32],[10 x i32]* %2 , i32 0, i32 4     
  store i32 0, i32* %7     ; a[4]=0
  %8= getelementptr [10 x i32],[10 x i32]* %2 , i32 0, i32 5     
  store i32 1, i32* %8     ; a[5]=1
  %9= getelementptr [10 x i32],[10 x i32]* %2 , i32 0, i32 6     
  store i32 6, i32* %9     ; a[6]=6
  %10= getelementptr [10 x i32],[10 x i32]* %2 , i32 0, i32 7     
  store i32 5, i32* %10     ; a[7]=5
  %11= getelementptr [10 x i32],[10 x i32]* %2 , i32 0, i32 8     
  store i32 7, i32* %11     ; a[8]=7
  %12= getelementptr [10 x i32],[10 x i32]* %2 , i32 0, i32 9     
  store i32 8, i32* %12     ; a[9]=8
  %13= getelementptr [10 x i32],[10 x i32]* %2 , i32 0, i32 0     
  %14 = call i32 @insertsort(i32* %13)     ; call insertsort(a)
  store i32 %14, i32* %1     ; i=insertsort(a)
  br label %15     

15:     ; judge i<n
  %16 = load i32, i32* %1     
  %17 = load i32, i32* @n     
  %18= icmp slt i32 %16, %17     ; i<n
  br i1 %18, label %19, label %28     

19:     ; while Body
  %20 = load i32, i32* %1     
  %21= getelementptr [10 x i32],[10 x i32]* %2 , i32 0, i32 %20     
  %22 = load i32, i32* %21     
  store i32 %22, i32* %0     ; tmp=a[i]
  %23 = load i32, i32* %0     
  call void @putint(i32 %23)     ; call putint(tmp)
  store i32 10, i32* %0     ; tmp=10
  %24 = load i32, i32* %0     
  call void @putch(i32 %24)     ; call putch(tmp)
  %25 = load i32, i32* %1     
  %26 = add i32 %25, 1     ; i+1
  store i32 %26, i32* %1     ; i=i+1
  br label %27     

27:     ; jump to head
  br label %15     

28:     ; exit while
  ret i32 0     
}

