@n = dso_local global i32 0
@a = dso_local global [10000000 x i32] zeroinitializer

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime(i32)
declare void @_sysy_stoptime(i32)

define dso_local i32 @meanless_calculation(i32 %0,i32 %1){
entry:     
  %2 = alloca i32     ; i32 ret=0
  %3 = alloca i32     ; i32 i=0
  %4 = alloca i32     ; i32 y
  %5 = alloca i32     ; i32 x
  %ret = alloca i32     
  store i32 %0, i32* %5     
  store i32 %1, i32* %4     
  store i32 0, i32* %3     ; i=i32 0
  store i32 0, i32* %2     ; ret=i32 0
  br label %6     

6:     ; judge i<x&&i<y
  %7 = load i32, i32* %3     
  %8 = load i32, i32* %5     
  %9= icmp slt i32 %7, %8     ; i<x
  br i1 %9, label %10, label %22     

10:     
  %11 = load i32, i32* %3     
  %12 = load i32, i32* %4     
  %13= icmp slt i32 %11, %12     ; i<x && i<y
  br i1 %13, label %14, label %22     

14:     ; while Body
  %15 = load i32, i32* %3     
  %16 = add i32 %15, 1     ; i+1
  store i32 %16, i32* %3     ; i=i+1
  %17 = load i32, i32* %2     
  %18 = load i32, i32* %5     
  %19 = add i32 %17, %18     ; ret+x
  %20 = load i32, i32* %3     
  %21 = add i32 %19, %20     ; ret+x+i
  store i32 %21, i32* %2     ; ret=ret+x+i
  br label %6     

22:     ; exit while
  %23 = load i32, i32* %2     
  store i32 %23, i32* %ret     
  br label %retBB     

retBB:     
  %24 = load i32, i32* %ret     
  ret i32 %24     
}

define dso_local i32 @swap(i32* %0,i32 %1,i32 %2){
entry:     
  %3 = alloca i32     ; i32 curr=arr[l]
  %4 = alloca i32     ; i32 r
  %5 = alloca i32     ; i32 l
  %6 = alloca i32*     ; i32* arr
  %ret = alloca i32     
  store i32* %0, i32** %6     
  store i32 %1, i32* %5     
  store i32 %2, i32* %4     
  %7 = load i32*, i32** %6     
  %8 = load i32, i32* %5     
  %9= getelementptr i32,i32* %7 , i32 %8     
  %10 = load i32, i32* %9     
  store i32 %10, i32* %3     ; curr= = load i32, i32* 
  %11 = load i32*, i32** %6     
  %12 = load i32, i32* %5     
  %13= getelementptr i32,i32* %11 , i32 %12     
  %14 = load i32*, i32** %6     
  %15 = load i32, i32* %4     
  %16= getelementptr i32,i32* %14 , i32 %15     
  %17 = load i32, i32* %16     
  store i32 %17, i32* %13     ; arr[l]=arr[r]
  %18 = load i32*, i32** %6     
  %19 = load i32, i32* %4     
  %20= getelementptr i32,i32* %18 , i32 %19     
  %21 = load i32, i32* %3     
  store i32 %21, i32* %20     ; arr[r]=curr
  %22 = load i32, i32* %5     
  %23 = load i32, i32* %4     
  %24 = call i32 @meanless_calculation(i32 %22,i32 %23)     ; call meanless_calculation(l,r)
  store i32 %24, i32* %ret     
  br label %retBB     

retBB:     
  %25 = load i32, i32* %ret     
  ret i32 %25     
}

define dso_local i32 @median(i32* %0,i32 %1,i32 %2,i32 %3){
entry:     
  %4 = alloca i32     ; i32 xx=0
  %5 = alloca i32     ; i32 r=end+1
  %6 = alloca i32     ; i32 l=begin
  %7 = alloca i32     ; i32 pivot=arr[begin]
  %8 = alloca i32     ; i32 pos
  %9 = alloca i32     ; i32 end
  %10 = alloca i32     ; i32 begin
  %11 = alloca i32*     ; i32* arr
  %ret = alloca i32     
  store i32* %0, i32** %11     
  store i32 %1, i32* %10     
  store i32 %2, i32* %9     
  store i32 %3, i32* %8     
  %12 = load i32*, i32** %11     
  %13 = load i32, i32* %10     
  %14= getelementptr i32,i32* %12 , i32 %13     
  %15 = load i32, i32* %14     
  store i32 %15, i32* %7     ; pivot= = load i32, i32* 
  %16 = load i32, i32* %10     
  store i32 %16, i32* %6     ; l= = load i32, i32* 
  %17 = load i32, i32* %9     
  %18 = add i32 %17, 1     ; end+1
  store i32 %18, i32* %5     ; r= = add i32 , 1
  store i32 0, i32* %4     ; xx=i32 0
  br label %19     

19:     ; judge 1==1
  br i1 1, label %20, label %67     

20:     ; while Body
  br label %21     

21:     ; judge l<r
  %22 = load i32, i32* %6     
  %23 = load i32, i32* %5     
  %24= icmp slt i32 %22, %23     ; l<r
  br i1 %24, label %25, label %38     

25:     ; while Body
  %26 = load i32, i32* %5     
  %27 = sub i32 %26, 1     ; r-1
  store i32 %27, i32* %5     ; r=r-1
  %28 = load i32*, i32** %11     
  %29 = load i32, i32* %5     
  %30= getelementptr i32,i32* %28 , i32 %29     
  %31 = load i32, i32* %30     
  %32 = load i32, i32* %7     
  %33= icmp slt i32 %31, %32     ; arr[r]<pivot
  br i1 %33, label %34, label %35     ; judge arr[r]<pivot

34:     ; if Body
  br label %38     

35:     
  %36 = load i32, i32* %4     
  %37 = add i32 %36, 1     ; xx+1
  store i32 %37, i32* %4     ; xx=xx+1
  br label %21     

38:     ; exit while
  br label %39     

39:     ; judge l<r
  %40 = load i32, i32* %6     
  %41 = load i32, i32* %5     
  %42= icmp slt i32 %40, %41     ; l<r
  br i1 %42, label %43, label %56     

43:     ; while Body
  %44 = load i32, i32* %6     
  %45 = add i32 %44, 1     ; l+1
  store i32 %45, i32* %6     ; l=l+1
  %46 = load i32*, i32** %11     
  %47 = load i32, i32* %6     
  %48= getelementptr i32,i32* %46 , i32 %47     
  %49 = load i32, i32* %48     
  %50 = load i32, i32* %7     
  %51= icmp sge i32 %49, %50     ; arr[l]>=pivot
  br i1 %51, label %52, label %53     ; judge arr[l]>=pivot

52:     ; if Body
  br label %56     

53:     
  %54 = load i32, i32* %4     
  %55 = sub i32 %54, 1     ; xx-1
  store i32 %55, i32* %4     ; xx=xx-1
  br label %39     

56:     ; exit while
  %57 = load i32, i32* %6     
  %58 = load i32, i32* %5     
  %59= icmp eq i32 %57, %58     ; l==r
  br i1 %59, label %60, label %61     ; judge l==r

60:     ; if Body
  br label %67     

61:     ; else Body
  %62 = load i32*, i32** %11     
  %63 = load i32, i32* %6     
  %64 = load i32, i32* %5     
  %65 = call i32 @swap(i32* %62,i32 %63,i32 %64)     ; call swap(arr,l,r)
  br label %66     

66:     
  br label %19     

67:     ; exit while
  %68 = load i32*, i32** %11     
  %69 = load i32, i32* %10     
  %70= getelementptr i32,i32* %68 , i32 %69     
  %71 = load i32, i32* %7     
  store i32 %71, i32* %70     ; arr[begin]=pivot
  %72 = load i32*, i32** %11     
  %73 = load i32, i32* %10     
  %74 = load i32, i32* %6     
  %75 = call i32 @swap(i32* %72,i32 %73,i32 %74)     ; call swap(arr,begin,l)
  %76 = load i32, i32* %6     
  %77 = load i32, i32* %8     
  %78= icmp sgt i32 %76, %77     ; l>pos
  br i1 %78, label %79, label %85     ; judge l>pos

79:     ; if Body
  %80 = load i32*, i32** %11     
  %81 = load i32, i32* %10     
  %82 = load i32, i32* %6     
  %83 = load i32, i32* %8     
  %84 = call i32 @median(i32* %80,i32 %81,i32 %82,i32 %83)     ; call median(arr,begin,l,pos)
  store i32 %84, i32* %ret     
  br label %retBB     

85:     
  %86 = load i32, i32* %6     
  %87 = load i32, i32* %8     
  %88= icmp slt i32 %86, %87     ; l<pos
  br i1 %88, label %89, label %96     ; judge l<pos

89:     ; if Body
  %90 = load i32*, i32** %11     
  %91 = load i32, i32* %6     
  %92 = add i32 %91, 1     ; l+1
  %93 = load i32, i32* %9     
  %94 = load i32, i32* %8     
  %95 = call i32 @median(i32* %90,i32 %92,i32 %93,i32 %94)     ; call median(arr,l+1,end,pos)
  store i32 %95, i32* %ret     
  br label %retBB     

96:     
  %97 = load i32, i32* %4     
  store i32 %97, i32* %ret     
  br label %retBB     

retBB:     
  %98 = load i32, i32* %ret     
  ret i32 %98     
}

define dso_local i32 @main(){
entry:     
  %ret = alloca i32     
  %0= getelementptr [10000000 x i32],[10000000 x i32]* @a , i32 0, i32 0     
  %1 = call i32 @getarray(i32* %0)     ; call getarray(a)
  store i32 %1, i32* @n     ; n=getarray(a)
  call void @_sysy_starttime(i32 0)     ; call starttime()
  %2= getelementptr [10000000 x i32],[10000000 x i32]* @a , i32 0, i32 0     
  %3 = load i32, i32* @n     
  %4 = sub i32 %3, 1     ; n-1
  %5 = load i32, i32* @n     
  %6 = sdiv i32 %5, 2     ; n/2
  %7 = call i32 @median(i32* %2,i32 0,i32 %4,i32 %6)     ; call median(a,0,n-1,n/2)
  call void @_sysy_stoptime(i32 0)     ; call stoptime()
  %8 = load i32, i32* @n     
  %9= getelementptr [10000000 x i32],[10000000 x i32]* @a , i32 0, i32 0     
  call void @putarray(i32 %8,i32* %9)     ; call putarray(n,a)
  %10 = load i32, i32* @n     
  %11 = sdiv i32 %10, 2     ; n/2
  %12= getelementptr [10000000 x i32],[10000000 x i32]* @a , i32 0, i32 0     
  %13= getelementptr i32,i32* %12 , i32 %11     
  %14 = load i32, i32* %13     
  %15 = srem i32 %14, 256     ; a[n/2]%256
  store i32 %15, i32* %ret     
  br label %retBB     

retBB:     
  %16 = load i32, i32* %ret     
  ret i32 %16     
}

