@dp = dso_local global [18 x [18 x [18 x [18 x [18 x [7 x i32]]]]]] zeroinitializer
@list = dso_local global [200 x i32] zeroinitializer
@useless = dso_local global [100 x i32] zeroinitializer
@cns = dso_local global [20 x i32] zeroinitializer

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime(i32)
declare void @_sysy_stoptime(i32)

define dso_local i32 @equal(i32 %0,i32 %1){
entry:     
  %2 = alloca i32     ; i32 b
  %3 = alloca i32     ; i32 a
  %ret = alloca i32     
  store i32 %0, i32* %3     
  store i32 %1, i32* %2     
  %4 = load i32, i32* %3     
  %5 = load i32, i32* %2     
  %6= icmp eq i32 %4, %5     ; a==b
  br i1 %6, label %7, label %8     ; judge a==b

7:     ; if Body
  store i32 1, i32* %ret     
  br label %retBB     

8:     
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %9 = load i32, i32* %ret     
  ret i32 %9     
}

define dso_local i32 @dfs(i32 %0,i32 %1,i32 %2,i32 %3,i32 %4,i32 %5){
entry:     
  %6 = alloca i32     ; i32 ans=0
  %7 = alloca i32     ; i32 last
  %8 = alloca i32     ; i32 e
  %9 = alloca i32     ; i32 d
  %10 = alloca i32     ; i32 c
  %11 = alloca i32     ; i32 b
  %12 = alloca i32     ; i32 a
  %ret = alloca i32     
  store i32 %0, i32* %12     
  store i32 %1, i32* %11     
  store i32 %2, i32* %10     
  store i32 %3, i32* %9     
  store i32 %4, i32* %8     
  store i32 %5, i32* %7     
  %13 = load i32, i32* %12     
  %14 = mul i32 %13, 18     
  %15= getelementptr [18 x [18 x [18 x [18 x [18 x [7 x i32]]]]]],[18 x [18 x [18 x [18 x [18 x [7 x i32]]]]]]* @dp , i32 0, i32 0     
  %16 = load i32, i32* %11     
  %17 = add i32 %14, %16     
  %18 = mul i32 %17, 18     
  %19= getelementptr [18 x [18 x [18 x [18 x [7 x i32]]]]],[18 x [18 x [18 x [18 x [7 x i32]]]]]* %15 , i32 0, i32 0     
  %20 = load i32, i32* %10     
  %21 = add i32 %18, %20     
  %22 = mul i32 %21, 18     
  %23= getelementptr [18 x [18 x [18 x [7 x i32]]]],[18 x [18 x [18 x [7 x i32]]]]* %19 , i32 0, i32 0     
  %24 = load i32, i32* %9     
  %25 = add i32 %22, %24     
  %26 = mul i32 %25, 18     
  %27= getelementptr [18 x [18 x [7 x i32]]],[18 x [18 x [7 x i32]]]* %23 , i32 0, i32 0     
  %28 = load i32, i32* %8     
  %29 = add i32 %26, %28     
  %30 = mul i32 %29, 7     
  %31= getelementptr [18 x [7 x i32]],[18 x [7 x i32]]* %27 , i32 0, i32 0     
  %32 = load i32, i32* %7     
  %33 = add i32 %30, %32     
  %34= getelementptr [7 x i32],[7 x i32]* %31 , i32 0, i32 0     
  %35= getelementptr i32,i32* %34 , i32 %33     
  %36 = load i32, i32* %35     
  %37= icmp ne i32 %36, -1     ; dp[a][b][c][d][e][last]!=-1
  br i1 %37, label %38, label %63     ; judge dp[a][b][c][d][e][last]!=-1

38:     ; if Body
  %39 = load i32, i32* %12     
  %40 = mul i32 %39, 18     
  %41= getelementptr [18 x [18 x [18 x [18 x [18 x [7 x i32]]]]]],[18 x [18 x [18 x [18 x [18 x [7 x i32]]]]]]* @dp , i32 0, i32 0     
  %42 = load i32, i32* %11     
  %43 = add i32 %40, %42     
  %44 = mul i32 %43, 18     
  %45= getelementptr [18 x [18 x [18 x [18 x [7 x i32]]]]],[18 x [18 x [18 x [18 x [7 x i32]]]]]* %41 , i32 0, i32 0     
  %46 = load i32, i32* %10     
  %47 = add i32 %44, %46     
  %48 = mul i32 %47, 18     
  %49= getelementptr [18 x [18 x [18 x [7 x i32]]]],[18 x [18 x [18 x [7 x i32]]]]* %45 , i32 0, i32 0     
  %50 = load i32, i32* %9     
  %51 = add i32 %48, %50     
  %52 = mul i32 %51, 18     
  %53= getelementptr [18 x [18 x [7 x i32]]],[18 x [18 x [7 x i32]]]* %49 , i32 0, i32 0     
  %54 = load i32, i32* %8     
  %55 = add i32 %52, %54     
  %56 = mul i32 %55, 7     
  %57= getelementptr [18 x [7 x i32]],[18 x [7 x i32]]* %53 , i32 0, i32 0     
  %58 = load i32, i32* %7     
  %59 = add i32 %56, %58     
  %60= getelementptr [7 x i32],[7 x i32]* %57 , i32 0, i32 0     
  %61= getelementptr i32,i32* %60 , i32 %59     
  %62 = load i32, i32* %61     
  store i32 %62, i32* %ret     
  br label %retBB     

63:     
  %64 = load i32, i32* %12     
  %65 = load i32, i32* %11     
  %66 = add i32 %64, %65     ; a+b
  %67 = load i32, i32* %10     
  %68 = add i32 %66, %67     ; a+b+c
  %69 = load i32, i32* %9     
  %70 = add i32 %68, %69     ; a+b+c+d
  %71 = load i32, i32* %8     
  %72 = add i32 %70, %71     ; a+b+c+d+e
  %73= icmp eq i32 %72, 0     ; a+b+c+d+e==0
  br i1 %73, label %74, label %75     ; judge a+b+c+d+e==0

74:     ; if Body
  store i32 1, i32* %ret     
  br label %retBB     

75:     
  store i32 0, i32* %6     ; ans=i32 0
  %76 = load i32, i32* %12     
  %77= icmp ne i32 %76, 0     
  br i1 %77, label %78, label %96     ; judge a

78:     ; if Body
  %79 = load i32, i32* %6     
  %80 = load i32, i32* %12     
  %81 = load i32, i32* %7     
  %82 = call i32 @equal(i32 %81,i32 2)     ; call equal(last,2)
  %83 = sub i32 %80, %82     ; a-equal(last,2)
  %84 = load i32, i32* %12     
  %85 = sub i32 %84, 1     ; a-1
  %86 = load i32, i32* %11     
  %87 = load i32, i32* %10     
  %88 = load i32, i32* %9     
  %89 = load i32, i32* %8     
  %90 = call i32 @dfs(i32 %85,i32 %86,i32 %87,i32 %88,i32 %89,i32 1)     ; call dfs(a-1,b,c,d,e,1)
  %91 = mul i32 %83, %90     ; (a-equal(last,2))*dfs(a-1,b,c,d,e,1)
  %92 = add i32 %79, %91     ; ans+(a-equal(last,2))*dfs(a-1,b,c,d,e,1)
  %93 = sdiv i32 %92, 1000000007     
  %94 = mul i32 %93, 1000000007     
  %95 = sub i32 %92, %94     ; (ans+(a-equal(last,2))*dfs(a-1,b,c,d,e,1))%mod
  store i32 %95, i32* %6     ; ans=(ans+(a-equal(last,2))*dfs(a-1,b,c,d,e,1))%mod
  br label %96     

96:     
  %97 = load i32, i32* %11     
  %98= icmp ne i32 %97, 0     
  br i1 %98, label %99, label %118     ; judge b

99:     ; if Body
  %100 = load i32, i32* %6     
  %101 = load i32, i32* %11     
  %102 = load i32, i32* %7     
  %103 = call i32 @equal(i32 %102,i32 3)     ; call equal(last,3)
  %104 = sub i32 %101, %103     ; b-equal(last,3)
  %105 = load i32, i32* %12     
  %106 = add i32 %105, 1     ; a+1
  %107 = load i32, i32* %11     
  %108 = sub i32 %107, 1     ; b-1
  %109 = load i32, i32* %10     
  %110 = load i32, i32* %9     
  %111 = load i32, i32* %8     
  %112 = call i32 @dfs(i32 %106,i32 %108,i32 %109,i32 %110,i32 %111,i32 2)     ; call dfs(a+1,b-1,c,d,e,2)
  %113 = mul i32 %104, %112     ; (b-equal(last,3))*dfs(a+1,b-1,c,d,e,2)
  %114 = add i32 %100, %113     ; ans+(b-equal(last,3))*dfs(a+1,b-1,c,d,e,2)
  %115 = sdiv i32 %114, 1000000007     
  %116 = mul i32 %115, 1000000007     
  %117 = sub i32 %114, %116     ; (ans+(b-equal(last,3))*dfs(a+1,b-1,c,d,e,2))%mod
  store i32 %117, i32* %6     ; ans=(ans+(b-equal(last,3))*dfs(a+1,b-1,c,d,e,2))%mod
  br label %118     

118:     
  %119 = load i32, i32* %10     
  %120= icmp ne i32 %119, 0     
  br i1 %120, label %121, label %140     ; judge c

121:     ; if Body
  %122 = load i32, i32* %6     
  %123 = load i32, i32* %10     
  %124 = load i32, i32* %7     
  %125 = call i32 @equal(i32 %124,i32 4)     ; call equal(last,4)
  %126 = sub i32 %123, %125     ; c-equal(last,4)
  %127 = load i32, i32* %12     
  %128 = load i32, i32* %11     
  %129 = add i32 %128, 1     ; b+1
  %130 = load i32, i32* %10     
  %131 = sub i32 %130, 1     ; c-1
  %132 = load i32, i32* %9     
  %133 = load i32, i32* %8     
  %134 = call i32 @dfs(i32 %127,i32 %129,i32 %131,i32 %132,i32 %133,i32 3)     ; call dfs(a,b+1,c-1,d,e,3)
  %135 = mul i32 %126, %134     ; (c-equal(last,4))*dfs(a,b+1,c-1,d,e,3)
  %136 = add i32 %122, %135     ; ans+(c-equal(last,4))*dfs(a,b+1,c-1,d,e,3)
  %137 = sdiv i32 %136, 1000000007     
  %138 = mul i32 %137, 1000000007     
  %139 = sub i32 %136, %138     ; (ans+(c-equal(last,4))*dfs(a,b+1,c-1,d,e,3))%mod
  store i32 %139, i32* %6     ; ans=(ans+(c-equal(last,4))*dfs(a,b+1,c-1,d,e,3))%mod
  br label %140     

140:     
  %141 = load i32, i32* %9     
  %142= icmp ne i32 %141, 0     
  br i1 %142, label %143, label %162     ; judge d

143:     ; if Body
  %144 = load i32, i32* %6     
  %145 = load i32, i32* %9     
  %146 = load i32, i32* %7     
  %147 = call i32 @equal(i32 %146,i32 5)     ; call equal(last,5)
  %148 = sub i32 %145, %147     ; d-equal(last,5)
  %149 = load i32, i32* %12     
  %150 = load i32, i32* %11     
  %151 = load i32, i32* %10     
  %152 = add i32 %151, 1     ; c+1
  %153 = load i32, i32* %9     
  %154 = sub i32 %153, 1     ; d-1
  %155 = load i32, i32* %8     
  %156 = call i32 @dfs(i32 %149,i32 %150,i32 %152,i32 %154,i32 %155,i32 4)     ; call dfs(a,b,c+1,d-1,e,4)
  %157 = mul i32 %148, %156     ; (d-equal(last,5))*dfs(a,b,c+1,d-1,e,4)
  %158 = add i32 %144, %157     ; ans+(d-equal(last,5))*dfs(a,b,c+1,d-1,e,4)
  %159 = sdiv i32 %158, 1000000007     
  %160 = mul i32 %159, 1000000007     
  %161 = sub i32 %158, %160     ; (ans+(d-equal(last,5))*dfs(a,b,c+1,d-1,e,4))%mod
  store i32 %161, i32* %6     ; ans=(ans+(d-equal(last,5))*dfs(a,b,c+1,d-1,e,4))%mod
  br label %162     

162:     
  %163 = load i32, i32* %8     
  %164= icmp ne i32 %163, 0     
  br i1 %164, label %165, label %181     ; judge e

165:     ; if Body
  %166 = load i32, i32* %6     
  %167 = load i32, i32* %8     
  %168 = load i32, i32* %12     
  %169 = load i32, i32* %11     
  %170 = load i32, i32* %10     
  %171 = load i32, i32* %9     
  %172 = add i32 %171, 1     ; d+1
  %173 = load i32, i32* %8     
  %174 = sub i32 %173, 1     ; e-1
  %175 = call i32 @dfs(i32 %168,i32 %169,i32 %170,i32 %172,i32 %174,i32 5)     ; call dfs(a,b,c,d+1,e-1,5)
  %176 = mul i32 %167, %175     ; e*dfs(a,b,c,d+1,e-1,5)
  %177 = add i32 %166, %176     ; ans+e*dfs(a,b,c,d+1,e-1,5)
  %178 = sdiv i32 %177, 1000000007     
  %179 = mul i32 %178, 1000000007     
  %180 = sub i32 %177, %179     ; (ans+e*dfs(a,b,c,d+1,e-1,5))%mod
  store i32 %180, i32* %6     ; ans=(ans+e*dfs(a,b,c,d+1,e-1,5))%mod
  br label %181     

181:     
  %182 = load i32, i32* %12     
  %183 = mul i32 %182, 18     
  %184= getelementptr [18 x [18 x [18 x [18 x [18 x [7 x i32]]]]]],[18 x [18 x [18 x [18 x [18 x [7 x i32]]]]]]* @dp , i32 0, i32 0     
  %185 = load i32, i32* %11     
  %186 = add i32 %183, %185     
  %187 = mul i32 %186, 18     
  %188= getelementptr [18 x [18 x [18 x [18 x [7 x i32]]]]],[18 x [18 x [18 x [18 x [7 x i32]]]]]* %184 , i32 0, i32 0     
  %189 = load i32, i32* %10     
  %190 = add i32 %187, %189     
  %191 = mul i32 %190, 18     
  %192= getelementptr [18 x [18 x [18 x [7 x i32]]]],[18 x [18 x [18 x [7 x i32]]]]* %188 , i32 0, i32 0     
  %193 = load i32, i32* %9     
  %194 = add i32 %191, %193     
  %195 = mul i32 %194, 18     
  %196= getelementptr [18 x [18 x [7 x i32]]],[18 x [18 x [7 x i32]]]* %192 , i32 0, i32 0     
  %197 = load i32, i32* %8     
  %198 = add i32 %195, %197     
  %199 = mul i32 %198, 7     
  %200= getelementptr [18 x [7 x i32]],[18 x [7 x i32]]* %196 , i32 0, i32 0     
  %201 = load i32, i32* %7     
  %202 = add i32 %199, %201     
  %203= getelementptr [7 x i32],[7 x i32]* %200 , i32 0, i32 0     
  %204= getelementptr i32,i32* %203 , i32 %202     
  %205 = load i32, i32* %6     
  %206 = sdiv i32 %205, 1000000007     
  %207 = mul i32 %206, 1000000007     
  %208 = sub i32 %205, %207     ; ans%mod
  store i32 %208, i32* %204     ; dp[a][b][c][d][e][last]=ans%mod
  %209 = load i32, i32* %12     
  %210 = mul i32 %209, 18     
  %211= getelementptr [18 x [18 x [18 x [18 x [18 x [7 x i32]]]]]],[18 x [18 x [18 x [18 x [18 x [7 x i32]]]]]]* @dp , i32 0, i32 0     
  %212 = load i32, i32* %11     
  %213 = add i32 %210, %212     
  %214 = mul i32 %213, 18     
  %215= getelementptr [18 x [18 x [18 x [18 x [7 x i32]]]]],[18 x [18 x [18 x [18 x [7 x i32]]]]]* %211 , i32 0, i32 0     
  %216 = load i32, i32* %10     
  %217 = add i32 %214, %216     
  %218 = mul i32 %217, 18     
  %219= getelementptr [18 x [18 x [18 x [7 x i32]]]],[18 x [18 x [18 x [7 x i32]]]]* %215 , i32 0, i32 0     
  %220 = load i32, i32* %9     
  %221 = add i32 %218, %220     
  %222 = mul i32 %221, 18     
  %223= getelementptr [18 x [18 x [7 x i32]]],[18 x [18 x [7 x i32]]]* %219 , i32 0, i32 0     
  %224 = load i32, i32* %8     
  %225 = add i32 %222, %224     
  %226 = mul i32 %225, 7     
  %227= getelementptr [18 x [7 x i32]],[18 x [7 x i32]]* %223 , i32 0, i32 0     
  %228 = load i32, i32* %7     
  %229 = add i32 %226, %228     
  %230= getelementptr [7 x i32],[7 x i32]* %227 , i32 0, i32 0     
  %231= getelementptr i32,i32* %230 , i32 %229     
  %232 = load i32, i32* %231     
  store i32 %232, i32* %ret     
  br label %retBB     

retBB:     
  %233 = load i32, i32* %ret     
  ret i32 %233     
}

define dso_local i32 @main(){
entry:     
  %0 = alloca i32     ; i32 ans=dfs(cns[1],cns[2],cns[3],cns[4],cns[5],0)
  %1 = alloca i32     ; i32 h=0
  %2 = alloca i32     ; i32 m=0
  %3 = alloca i32     ; i32 l=0
  %4 = alloca i32     ; i32 k=0
  %5 = alloca i32     ; i32 j=0
  %6 = alloca i32     ; i32 i=0
  %7 = alloca i32     ; i32 n=getint()
  %ret = alloca i32     
  %8 = call i32 @getint()     ; call getint()
  store i32 %8, i32* %7     ; n= = call i32 @getint()
  store i32 0, i32* %6     ; i=i32 0
  br label %9     

9:     ; judge i<maxn
  %10 = load i32, i32* %6     
  %11= icmp slt i32 %10, 18     ; i<maxn
  br i1 %11, label %12, label %73     

12:     ; while Body
  store i32 0, i32* %5     ; j=i32 0
  br label %13     

13:     ; judge j<maxn
  %14 = load i32, i32* %5     
  %15= icmp slt i32 %14, 18     ; j<maxn
  br i1 %15, label %16, label %70     

16:     ; while Body
  store i32 0, i32* %4     ; k=i32 0
  br label %17     

17:     ; judge k<maxn
  %18 = load i32, i32* %4     
  %19= icmp slt i32 %18, 18     ; k<maxn
  br i1 %19, label %20, label %67     

20:     ; while Body
  store i32 0, i32* %3     ; l=i32 0
  br label %21     

21:     ; judge l<maxn
  %22 = load i32, i32* %3     
  %23= icmp slt i32 %22, 18     ; l<maxn
  br i1 %23, label %24, label %64     

24:     ; while Body
  store i32 0, i32* %2     ; m=i32 0
  br label %25     

25:     ; judge m<maxn
  %26 = load i32, i32* %2     
  %27= icmp slt i32 %26, 18     ; m<maxn
  br i1 %27, label %28, label %61     

28:     ; while Body
  store i32 0, i32* %1     ; h=i32 0
  br label %29     

29:     ; judge h<7
  %30 = load i32, i32* %1     
  %31= icmp slt i32 %30, 7     ; h<7
  br i1 %31, label %32, label %58     

32:     ; while Body
  %33 = load i32, i32* %6     
  %34 = mul i32 %33, 18     
  %35= getelementptr [18 x [18 x [18 x [18 x [18 x [7 x i32]]]]]],[18 x [18 x [18 x [18 x [18 x [7 x i32]]]]]]* @dp , i32 0, i32 0     
  %36 = load i32, i32* %5     
  %37 = add i32 %34, %36     
  %38 = mul i32 %37, 18     
  %39= getelementptr [18 x [18 x [18 x [18 x [7 x i32]]]]],[18 x [18 x [18 x [18 x [7 x i32]]]]]* %35 , i32 0, i32 0     
  %40 = load i32, i32* %4     
  %41 = add i32 %38, %40     
  %42 = mul i32 %41, 18     
  %43= getelementptr [18 x [18 x [18 x [7 x i32]]]],[18 x [18 x [18 x [7 x i32]]]]* %39 , i32 0, i32 0     
  %44 = load i32, i32* %3     
  %45 = add i32 %42, %44     
  %46 = mul i32 %45, 18     
  %47= getelementptr [18 x [18 x [7 x i32]]],[18 x [18 x [7 x i32]]]* %43 , i32 0, i32 0     
  %48 = load i32, i32* %2     
  %49 = add i32 %46, %48     
  %50 = mul i32 %49, 7     
  %51= getelementptr [18 x [7 x i32]],[18 x [7 x i32]]* %47 , i32 0, i32 0     
  %52 = load i32, i32* %1     
  %53 = add i32 %50, %52     
  %54= getelementptr [7 x i32],[7 x i32]* %51 , i32 0, i32 0     
  %55= getelementptr i32,i32* %54 , i32 %53     
  store i32 -1, i32* %55     ; dp[i][j][k][l][m][h]=-1
  %56 = load i32, i32* %1     
  %57 = add i32 %56, 1     ; h+1
  store i32 %57, i32* %1     ; h=h+1
  br label %29     

58:     ; exit while
  %59 = load i32, i32* %2     
  %60 = add i32 %59, 1     ; m+1
  store i32 %60, i32* %2     ; m=m+1
  br label %25     

61:     ; exit while
  %62 = load i32, i32* %3     
  %63 = add i32 %62, 1     ; l+1
  store i32 %63, i32* %3     ; l=l+1
  br label %21     

64:     ; exit while
  %65 = load i32, i32* %4     
  %66 = add i32 %65, 1     ; k+1
  store i32 %66, i32* %4     ; k=k+1
  br label %17     

67:     ; exit while
  %68 = load i32, i32* %5     
  %69 = add i32 %68, 1     ; j+1
  store i32 %69, i32* %5     ; j=j+1
  br label %13     

70:     ; exit while
  %71 = load i32, i32* %6     
  %72 = add i32 %71, 1     ; i+1
  store i32 %72, i32* %6     ; i=i+1
  br label %9     

73:     ; exit while
  store i32 0, i32* %6     ; i=0
  br label %74     

74:     ; judge i<n
  %75 = load i32, i32* %6     
  %76 = load i32, i32* %7     
  %77= icmp slt i32 %75, %76     ; i<n
  br i1 %77, label %78, label %106     

78:     ; while Body
  %79 = load i32, i32* %6     
  %80= getelementptr [200 x i32],[200 x i32]* @list , i32 0, i32 0     
  %81= getelementptr i32,i32* %80 , i32 %79     
  %82 = call i32 @getint()     ; call getint()
  store i32 %82, i32* %81     ; list[i]=getint()
  %83 = load i32, i32* %6     
  %84= getelementptr [100 x i32],[100 x i32]* @useless , i32 0, i32 0     
  %85= getelementptr i32,i32* %84 , i32 %83     
  %86 = load i32, i32* %6     
  %87= getelementptr [200 x i32],[200 x i32]* @list , i32 0, i32 0     
  %88= getelementptr i32,i32* %87 , i32 %86     
  %89 = load i32, i32* %88     
  store i32 %89, i32* %85     ; useless[i]=list[i]
  %90 = load i32, i32* %6     
  %91= getelementptr [200 x i32],[200 x i32]* @list , i32 0, i32 0     
  %92= getelementptr i32,i32* %91 , i32 %90     
  %93 = load i32, i32* %92     
  %94= getelementptr [20 x i32],[20 x i32]* @cns , i32 0, i32 0     
  %95= getelementptr i32,i32* %94 , i32 %93     
  %96 = load i32, i32* %6     
  %97= getelementptr [200 x i32],[200 x i32]* @list , i32 0, i32 0     
  %98= getelementptr i32,i32* %97 , i32 %96     
  %99 = load i32, i32* %98     
  %100= getelementptr [20 x i32],[20 x i32]* @cns , i32 0, i32 0     
  %101= getelementptr i32,i32* %100 , i32 %99     
  %102 = load i32, i32* %101     
  %103 = add i32 %102, 1     ; cns[list[i]]+1
  store i32 %103, i32* %95     ; cns[list[i]]=cns[list[i]]+1
  %104 = load i32, i32* %6     
  %105 = add i32 %104, 1     ; i+1
  store i32 %105, i32* %6     ; i=i+1
  br label %74     

106:     ; exit while
  %107= getelementptr [20 x i32],[20 x i32]* @cns , i32 0, i32 0     
  %108= getelementptr i32,i32* %107 , i32 1     
  %109 = load i32, i32* %108     
  %110= getelementptr [20 x i32],[20 x i32]* @cns , i32 0, i32 0     
  %111= getelementptr i32,i32* %110 , i32 2     
  %112 = load i32, i32* %111     
  %113= getelementptr [20 x i32],[20 x i32]* @cns , i32 0, i32 0     
  %114= getelementptr i32,i32* %113 , i32 3     
  %115 = load i32, i32* %114     
  %116= getelementptr [20 x i32],[20 x i32]* @cns , i32 0, i32 0     
  %117= getelementptr i32,i32* %116 , i32 4     
  %118 = load i32, i32* %117     
  %119= getelementptr [20 x i32],[20 x i32]* @cns , i32 0, i32 0     
  %120= getelementptr i32,i32* %119 , i32 5     
  %121 = load i32, i32* %120     
  %122 = call i32 @dfs(i32 %109,i32 %112,i32 %115,i32 %118,i32 %121,i32 0)     ; call dfs(cns[1],cns[2],cns[3],cns[4],cns[5],0)
  store i32 %122, i32* %0     ; ans= = call i32 @dfs(i32 ,i32 ,i32 ,i32 ,i32 ,i32 0)
  %123 = load i32, i32* %0     
  call void @putint(i32 %123)     ; call putint(ans)
  %124 = load i32, i32* %0     
  store i32 %124, i32* %ret     
  br label %retBB     

retBB:     
  %125 = load i32, i32* %ret     
  ret i32 %125     
}

