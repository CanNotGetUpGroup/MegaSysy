@seed = dso_local global [3 x i32] [i32 19971231,i32 19981013,i32 1000000007]
@staticvalue = dso_local global i32 0
@a = dso_local global [10000 x i32] zeroinitializer

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime(i32)
declare void @_sysy_stoptime(i32)

define dso_local i32 @set(i32* %0,i32 %1,i32 %2){
entry:     
  %3 = alloca i32     ; i32 v=0
  %4 = alloca i32     ; i32 i=10
  %5 = alloca [31 x i32]     ; i32 x[bitcount+1]={}
  %6 = alloca i32     ; i32 d
  %7 = alloca i32     ; i32 pos
  %8 = alloca i32*     ; i32* a
  %ret = alloca i32     
  store i32* %0, i32** %8     
  store i32 %1, i32* %7     
  store i32 %2, i32* %6     
  %9= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  call void @memset(i32* %9,i32 0,i32 124)     ; x
  %10= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  store i32 1, i32* %10     ; x[0]=1
  %11= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %12= getelementptr i32,i32* %11 , i32 1     
  %13= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %14 = load i32, i32* %13     
  %15 = mul i32 %14, 2     ; x[0]*2
  store i32 %15, i32* %12     ; x[1]=x[0]*2
  %16= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %17= getelementptr i32,i32* %16 , i32 2     
  %18= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %19= getelementptr i32,i32* %18 , i32 1     
  %20 = load i32, i32* %19     
  %21 = mul i32 %20, 2     ; x[1]*2
  store i32 %21, i32* %17     ; x[2]=x[1]*2
  %22= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %23= getelementptr i32,i32* %22 , i32 3     
  %24= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %25= getelementptr i32,i32* %24 , i32 2     
  %26 = load i32, i32* %25     
  %27 = mul i32 %26, 2     ; x[2]*2
  store i32 %27, i32* %23     ; x[3]=x[2]*2
  %28= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %29= getelementptr i32,i32* %28 , i32 4     
  %30= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %31= getelementptr i32,i32* %30 , i32 3     
  %32 = load i32, i32* %31     
  %33 = mul i32 %32, 2     ; x[3]*2
  store i32 %33, i32* %29     ; x[4]=x[3]*2
  %34= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %35= getelementptr i32,i32* %34 , i32 5     
  %36= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %37= getelementptr i32,i32* %36 , i32 4     
  %38 = load i32, i32* %37     
  %39 = mul i32 %38, 2     ; x[4]*2
  store i32 %39, i32* %35     ; x[5]=x[4]*2
  %40= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %41= getelementptr i32,i32* %40 , i32 6     
  %42= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %43= getelementptr i32,i32* %42 , i32 5     
  %44 = load i32, i32* %43     
  %45 = mul i32 %44, 2     ; x[5]*2
  store i32 %45, i32* %41     ; x[6]=x[5]*2
  %46= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %47= getelementptr i32,i32* %46 , i32 7     
  %48= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %49= getelementptr i32,i32* %48 , i32 6     
  %50 = load i32, i32* %49     
  %51 = mul i32 %50, 2     ; x[6]*2
  store i32 %51, i32* %47     ; x[7]=x[6]*2
  %52= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %53= getelementptr i32,i32* %52 , i32 8     
  %54= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %55= getelementptr i32,i32* %54 , i32 7     
  %56 = load i32, i32* %55     
  %57 = mul i32 %56, 2     ; x[7]*2
  store i32 %57, i32* %53     ; x[8]=x[7]*2
  %58= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %59= getelementptr i32,i32* %58 , i32 9     
  %60= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %61= getelementptr i32,i32* %60 , i32 8     
  %62 = load i32, i32* %61     
  %63 = mul i32 %62, 2     ; x[8]*2
  store i32 %63, i32* %59     ; x[9]=x[8]*2
  %64= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %65= getelementptr i32,i32* %64 , i32 10     
  %66= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %67= getelementptr i32,i32* %66 , i32 9     
  %68 = load i32, i32* %67     
  %69 = mul i32 %68, 2     ; x[9]*2
  store i32 %69, i32* %65     ; x[10]=x[9]*2
  store i32 10, i32* %4     ; i=i32 10
  br label %70     

70:     ; judge i<bitcount
  %71 = load i32, i32* %4     
  %72= icmp slt i32 %71, 30     ; i<bitcount
  br i1 %72, label %73, label %85     

73:     ; while Body
  %74 = load i32, i32* %4     
  %75 = add i32 %74, 1     ; i+1
  store i32 %75, i32* %4     ; i=i+1
  %76 = load i32, i32* %4     
  %77= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %78= getelementptr i32,i32* %77 , i32 %76     
  %79 = load i32, i32* %4     
  %80 = sub i32 %79, 1     ; i-1
  %81= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %82= getelementptr i32,i32* %81 , i32 %80     
  %83 = load i32, i32* %82     
  %84 = mul i32 %83, 2     ; x[i-1]*2
  store i32 %84, i32* %78     ; x[i]=x[i-1]*2
  br label %70     

85:     ; exit while
  store i32 0, i32* %3     ; v=i32 0
  %86 = load i32, i32* %7     
  %87 = sdiv i32 %86, 30     ; pos/bitcount
  %88= icmp sge i32 %87, 10000     ; pos/bitcount>=10000
  br i1 %88, label %89, label %90     ; judge pos/bitcount>=10000

89:     ; if Body
  store i32 0, i32* %ret     
  br label %retBB     

90:     
  %91 = load i32*, i32** %8     
  %92 = load i32, i32* %7     
  %93 = sdiv i32 %92, 30     ; pos/bitcount
  %94= getelementptr i32,i32* %91 , i32 %93     
  %95 = load i32, i32* %94     
  %96 = load i32, i32* %7     
  %97 = sdiv i32 %96, 30     
  %98 = mul i32 %97, 30     
  %99 = sub i32 %96, %98     ; pos%bitcount
  %100= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %101= getelementptr i32,i32* %100 , i32 %99     
  %102 = load i32, i32* %101     
  %103 = sdiv i32 %95, %102     ; a[pos/bitcount]/(x[pos%bitcount])
  %104 = srem i32 %103, 2     ; a[pos/bitcount]/(x[pos%bitcount])%2
  %105 = load i32, i32* %6     
  %106= icmp ne i32 %104, %105     ; a[pos/bitcount]/(x[pos%bitcount])%2!=d
  br i1 %106, label %107, label %166     ; judge a[pos/bitcount]/(x[pos%bitcount])%2!=d

107:     ; if Body
  %108 = load i32*, i32** %8     
  %109 = load i32, i32* %7     
  %110 = sdiv i32 %109, 30     ; pos/bitcount
  %111= getelementptr i32,i32* %108 , i32 %110     
  %112 = load i32, i32* %111     
  %113 = load i32, i32* %7     
  %114 = sdiv i32 %113, 30     
  %115 = mul i32 %114, 30     
  %116 = sub i32 %113, %115     ; pos%bitcount
  %117= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %118= getelementptr i32,i32* %117 , i32 %116     
  %119 = load i32, i32* %118     
  %120 = sdiv i32 %112, %119     ; a[pos/bitcount]/(x[pos%bitcount])
  %121 = srem i32 %120, 2     ; a[pos/bitcount]/(x[pos%bitcount])%2
  %122= icmp eq i32 %121, 0     ; a[pos/bitcount]/(x[pos%bitcount])%2==0
  br i1 %122, label %123, label %135     ; judge a[pos/bitcount]/(x[pos%bitcount])%2==0

123:     ; if Body
  %124 = load i32, i32* %6     
  %125= icmp eq i32 %124, 1     ; d==1
  br i1 %125, label %126, label %134     ; judge d==1

126:     ; if Body
  %127 = load i32, i32* %7     
  %128 = sdiv i32 %127, 30     
  %129 = mul i32 %128, 30     
  %130 = sub i32 %127, %129     ; pos%bitcount
  %131= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %132= getelementptr i32,i32* %131 , i32 %130     
  %133 = load i32, i32* %132     
  store i32 %133, i32* %3     ; v=x[pos%bitcount]
  br label %134     

134:     
  br label %135     

135:     
  %136 = load i32*, i32** %8     
  %137 = load i32, i32* %7     
  %138 = sdiv i32 %137, 30     ; pos/bitcount
  %139= getelementptr i32,i32* %136 , i32 %138     
  %140 = load i32, i32* %139     
  %141 = load i32, i32* %7     
  %142 = sdiv i32 %141, 30     
  %143 = mul i32 %142, 30     
  %144 = sub i32 %141, %143     ; pos%bitcount
  %145= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %146= getelementptr i32,i32* %145 , i32 %144     
  %147 = load i32, i32* %146     
  %148 = sdiv i32 %140, %147     ; a[pos/bitcount]/x[pos%bitcount]
  %149 = srem i32 %148, 2     ; a[pos/bitcount]/x[pos%bitcount]%2
  %150= icmp eq i32 %149, 1     ; a[pos/bitcount]/x[pos%bitcount]%2==1
  br i1 %150, label %151, label %165     ; judge a[pos/bitcount]/x[pos%bitcount]%2==1

151:     ; if Body
  %152 = load i32, i32* %6     
  %153= icmp eq i32 %152, 0     ; d==0
  br i1 %153, label %154, label %164     ; judge d==0

154:     ; if Body
  %155 = load i32, i32* %3     
  %156 = load i32, i32* %7     
  %157 = sdiv i32 %156, 30     
  %158 = mul i32 %157, 30     
  %159 = sub i32 %156, %158     ; pos%bitcount
  %160= getelementptr [31 x i32],[31 x i32]* %5 , i32 0, i32 0     
  %161= getelementptr i32,i32* %160 , i32 %159     
  %162 = load i32, i32* %161     
  %163 = sub i32 %155, %162     ; v-x[pos%bitcount]
  store i32 %163, i32* %3     ; v=v-x[pos%bitcount]
  br label %164     

164:     
  br label %165     

165:     
  br label %166     

166:     
  %167 = load i32*, i32** %8     
  %168 = load i32, i32* %7     
  %169 = sdiv i32 %168, 30     ; pos/bitcount
  %170= getelementptr i32,i32* %167 , i32 %169     
  %171 = load i32*, i32** %8     
  %172 = load i32, i32* %7     
  %173 = sdiv i32 %172, 30     ; pos/bitcount
  %174= getelementptr i32,i32* %171 , i32 %173     
  %175 = load i32, i32* %174     
  %176 = load i32, i32* %3     
  %177 = add i32 %175, %176     ; a[pos/bitcount]+v
  store i32 %177, i32* %170     ; a[pos/bitcount]=a[pos/bitcount]+v
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %178 = load i32, i32* %ret     
  ret i32 %178     
}

define dso_local i32 @rand(){
entry:     
  %ret = alloca i32     
  %0 = load i32, i32* @staticvalue     
  %1= getelementptr [3 x i32],[3 x i32]* @seed , i32 0, i32 0     
  %2 = load i32, i32* %1     
  %3 = mul i32 %0, %2     ; staticvalue*seed[0]
  %4= getelementptr [3 x i32],[3 x i32]* @seed , i32 0, i32 0     
  %5= getelementptr i32,i32* %4 , i32 1     
  %6 = load i32, i32* %5     
  %7 = add i32 %3, %6     ; staticvalue*seed[0]+seed[1]
  store i32 %7, i32* @staticvalue     ; staticvalue=staticvalue*seed[0]+seed[1]
  %8 = load i32, i32* @staticvalue     
  %9= getelementptr [3 x i32],[3 x i32]* @seed , i32 0, i32 0     
  %10= getelementptr i32,i32* %9 , i32 2     
  %11 = load i32, i32* %10     
  %12 = sdiv i32 %8, %11     
  %13 = mul i32 %12, %11     
  %14 = sub i32 %8, %13     ; staticvalue%seed[2]
  store i32 %14, i32* @staticvalue     ; staticvalue=staticvalue%seed[2]
  %15 = load i32, i32* @staticvalue     
  %16= icmp slt i32 %15, 0     ; staticvalue<0
  br i1 %16, label %17, label %23     ; judge staticvalue<0

17:     ; if Body
  %18= getelementptr [3 x i32],[3 x i32]* @seed , i32 0, i32 0     
  %19= getelementptr i32,i32* %18 , i32 2     
  %20 = load i32, i32* %19     
  %21 = load i32, i32* @staticvalue     
  %22 = add i32 %20, %21     ; seed[2]+staticvalue
  store i32 %22, i32* @staticvalue     ; staticvalue=seed[2]+staticvalue
  br label %23     

23:     
  %24 = load i32, i32* @staticvalue     
  store i32 %24, i32* %ret     
  br label %retBB     

retBB:     
  %25 = load i32, i32* %ret     
  ret i32 %25     
}

define dso_local i32 @main(){
entry:     
  %0 = alloca i32     ; i32 y
  %1 = alloca i32     ; i32 x
  %2 = alloca i32     ; i32 n=getint()
  %ret = alloca i32     
  %3 = call i32 @getint()     ; call getint()
  store i32 %3, i32* %2     ; n= = call i32 @getint()
  %4 = call i32 @getint()     ; call getint()
  store i32 %4, i32* @staticvalue     ; staticvalue=getint()
  call void @_sysy_starttime(i32 0)     ; call starttime()
  br label %5     

5:     ; judge n>0
  %6 = load i32, i32* %2     
  %7= icmp sgt i32 %6, 0     ; n>0
  br i1 %7, label %8, label %21     

8:     ; while Body
  %9 = load i32, i32* %2     
  %10 = sub i32 %9, 1     ; n-1
  store i32 %10, i32* %2     ; n=n-1
  %11 = call i32 @rand()     ; call rand()
  %12 = sdiv i32 %11, 300000     
  %13 = mul i32 %12, 300000     
  %14 = sub i32 %11, %13     ; rand()%300000
  store i32 %14, i32* %1     ; x=rand()%300000
  %15 = call i32 @rand()     ; call rand()
  %16 = srem i32 %15, 2     ; rand()%2
  store i32 %16, i32* %0     ; y=rand()%2
  %17= getelementptr [10000 x i32],[10000 x i32]* @a , i32 0, i32 0     
  %18 = load i32, i32* %1     
  %19 = load i32, i32* %0     
  %20 = call i32 @set(i32* %17,i32 %18,i32 %19)     ; call set(a,x,y)
  br label %5     

21:     ; exit while
  call void @_sysy_stoptime(i32 0)     ; call stoptime()
  %22= getelementptr [10000 x i32],[10000 x i32]* @a , i32 0, i32 0     
  call void @putarray(i32 10000,i32* %22)     ; call putarray(10000,a)
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %23 = load i32, i32* %ret     
  ret i32 %23     
}

