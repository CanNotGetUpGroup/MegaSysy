@program_length = dso_local global i32 0
@program = dso_local global [65536 x i32] zeroinitializer
@tape = dso_local global [65536 x i32] zeroinitializer
@input = dso_local global [65536 x i32] zeroinitializer
@input_length = dso_local global i32 0
@output = dso_local global [65536 x i32] zeroinitializer
@output_length = dso_local global i32 0

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime(i32)
declare void @_sysy_stoptime(i32)

define dso_local i32 @get_bf_char(){
entry:     
  %0 = alloca i32     ; i32 get=getch()
  %ret = alloca i32     
  %1 = call i32 @getch()     ; call getch()
  store i32 %1, i32* %0     ; get= = call i32 @getch()
  br label %2     

2:     ; judge get!=62&&get!=60&&get!=43&&get!=45&&get!=91&&get!=93&&get!=46&&get!=44&&get!=35
  %3 = load i32, i32* %0     
  %4= icmp ne i32 %3, 62     ; get!=62
  br i1 %4, label %5, label %31     

5:     
  %6 = load i32, i32* %0     
  %7= icmp ne i32 %6, 60     ; get!=62 && get!=60
  br i1 %7, label %8, label %31     

8:     
  %9 = load i32, i32* %0     
  %10= icmp ne i32 %9, 43     ; get!=62 && get!=60 && get!=43
  br i1 %10, label %11, label %31     

11:     
  %12 = load i32, i32* %0     
  %13= icmp ne i32 %12, 45     ; get!=62 && get!=60 && get!=43 && get!=45
  br i1 %13, label %14, label %31     

14:     
  %15 = load i32, i32* %0     
  %16= icmp ne i32 %15, 91     ; get!=62 && get!=60 && get!=43 && get!=45 && get!=91
  br i1 %16, label %17, label %31     

17:     
  %18 = load i32, i32* %0     
  %19= icmp ne i32 %18, 93     ; get!=62 && get!=60 && get!=43 && get!=45 && get!=91 && get!=93
  br i1 %19, label %20, label %31     

20:     
  %21 = load i32, i32* %0     
  %22= icmp ne i32 %21, 46     ; get!=62 && get!=60 && get!=43 && get!=45 && get!=91 && get!=93 && get!=46
  br i1 %22, label %23, label %31     

23:     
  %24 = load i32, i32* %0     
  %25= icmp ne i32 %24, 44     ; get!=62 && get!=60 && get!=43 && get!=45 && get!=91 && get!=93 && get!=46 && get!=44
  br i1 %25, label %26, label %31     

26:     
  %27 = load i32, i32* %0     
  %28= icmp ne i32 %27, 35     ; get!=62 && get!=60 && get!=43 && get!=45 && get!=91 && get!=93 && get!=46 && get!=44 && get!=35
  br i1 %28, label %29, label %31     

29:     ; while Body
  %30 = call i32 @getch()     ; call getch()
  store i32 %30, i32* %0     ; get=getch()
  br label %2     

31:     ; exit while
  %32 = load i32, i32* %0     
  store i32 %32, i32* %ret     
  br label %retBB     

retBB:     
  %33 = load i32, i32* %ret     
  ret i32 %33     
}

define dso_local void @read_program(){
entry:     
  %0 = alloca i32     ; i32 i=0
  %1 = alloca i32     ; i32 verify=getch()
  %2 = alloca i32     ; i32 get=get_bf_char()
  %3 = call i32 @get_bf_char()     ; call get_bf_char()
  store i32 %3, i32* %2     ; get= = call i32 @get_bf_char()
  br label %4     

4:     ; judge get!=35
  %5 = load i32, i32* %2     
  %6= icmp ne i32 %5, 35     ; get!=35
  br i1 %6, label %7, label %15     

7:     ; while Body
  %8 = load i32, i32* @program_length     
  %9= getelementptr [65536 x i32],[65536 x i32]* @program , i32 0, i32 0     
  %10= getelementptr i32,i32* %9 , i32 %8     
  %11 = load i32, i32* %2     
  store i32 %11, i32* %10     ; program[program_length]=get
  %12 = call i32 @get_bf_char()     ; call get_bf_char()
  store i32 %12, i32* %2     ; get=get_bf_char()
  %13 = load i32, i32* @program_length     
  %14 = add i32 %13, 1     ; program_length+1
  store i32 %14, i32* @program_length     ; program_length=program_length+1
  br label %4     

15:     ; exit while
  %16 = call i32 @getch()     ; call getch()
  store i32 %16, i32* %1     ; verify= = call i32 @getch()
  %17 = load i32, i32* %1     
  %18= icmp ne i32 %17, 105     ; verify!=105
  br i1 %18, label %19, label %20     ; judge verify!=105

19:     ; if Body
  br label %retBB     

20:     
  %21 = call i32 @getint()     ; call getint()
  store i32 %21, i32* @input_length     ; input_length=getint()
  %22 = call i32 @getch()     ; call getch()
  store i32 0, i32* %0     ; i=i32 0
  br label %23     

23:     ; judge i<input_length
  %24 = load i32, i32* %0     
  %25 = load i32, i32* @input_length     
  %26= icmp slt i32 %24, %25     ; i<input_length
  br i1 %26, label %27, label %34     

27:     ; while Body
  %28 = load i32, i32* %0     
  %29= getelementptr [65536 x i32],[65536 x i32]* @input , i32 0, i32 0     
  %30= getelementptr i32,i32* %29 , i32 %28     
  %31 = call i32 @getch()     ; call getch()
  store i32 %31, i32* %30     ; input[i]=getch()
  %32 = load i32, i32* %0     
  %33 = add i32 %32, 1     ; i+1
  store i32 %33, i32* %0     ; i=i+1
  br label %23     

34:     ; exit while
  br label %retBB     

retBB:     
  ret void     
}

define dso_local void @run_program(){
entry:     
  %0 = alloca i32     ; i32 val=tape[read_head]
  %1 = alloca i32     ; i32 loop=1
  %2 = alloca i32     ; i32 val=tape[read_head]
  %3 = alloca i32     ; i32 code=program[ip]
  %4 = alloca i32     ; i32 return_address_top=0
  %5 = alloca [512 x i32]     ; i32 return_address[512]={}
  %6 = alloca i32     ; i32 input_head=0
  %7 = alloca i32     ; i32 read_head=0
  %8 = alloca i32     ; i32 ip=0
  store i32 0, i32* %8     ; ip=i32 0
  store i32 0, i32* %7     ; read_head=i32 0
  store i32 0, i32* %6     ; input_head=i32 0
  %9= getelementptr [512 x i32],[512 x i32]* %5 , i32 0, i32 0     
  call void @memset(i32* %9,i32 0,i32 2048)     ; return_address
  store i32 0, i32* %4     ; return_address_top=i32 0
  store i32 0, i32* @output_length     ; output_length=0
  br label %10     

10:     ; judge ip<program_length
  %11 = load i32, i32* %8     
  %12 = load i32, i32* @program_length     
  %13= icmp slt i32 %11, %12     ; ip<program_length
  br i1 %13, label %14, label %163     

14:     ; while Body
  %15 = load i32, i32* %8     
  %16= getelementptr [65536 x i32],[65536 x i32]* @program , i32 0, i32 0     
  %17= getelementptr i32,i32* %16 , i32 %15     
  %18 = load i32, i32* %17     
  store i32 %18, i32* %3     ; code= = load i32, i32* 
  %19 = load i32, i32* %3     
  %20= icmp eq i32 %19, 62     ; code==62
  br i1 %20, label %21, label %24     ; judge code==62

21:     ; if Body
  %22 = load i32, i32* %7     
  %23 = add i32 %22, 1     ; read_head+1
  store i32 %23, i32* %7     ; read_head=read_head+1
  br label %160     

24:     ; else Body
  %25 = load i32, i32* %3     
  %26= icmp eq i32 %25, 60     ; code==60
  br i1 %26, label %27, label %30     ; judge code==60

27:     ; if Body
  %28 = load i32, i32* %7     
  %29 = sub i32 %28, 1     ; read_head-1
  store i32 %29, i32* %7     ; read_head=read_head-1
  br label %159     

30:     ; else Body
  %31 = load i32, i32* %3     
  %32= icmp eq i32 %31, 43     ; code==43
  br i1 %32, label %33, label %42     ; judge code==43

33:     ; if Body
  %34 = load i32, i32* %7     
  %35= getelementptr [65536 x i32],[65536 x i32]* @tape , i32 0, i32 0     
  %36= getelementptr i32,i32* %35 , i32 %34     
  %37 = load i32, i32* %7     
  %38= getelementptr [65536 x i32],[65536 x i32]* @tape , i32 0, i32 0     
  %39= getelementptr i32,i32* %38 , i32 %37     
  %40 = load i32, i32* %39     
  %41 = add i32 %40, 1     ; tape[read_head]+1
  store i32 %41, i32* %36     ; tape[read_head]=tape[read_head]+1
  br label %158     

42:     ; else Body
  %43 = load i32, i32* %3     
  %44= icmp eq i32 %43, 45     ; code==45
  br i1 %44, label %45, label %54     ; judge code==45

45:     ; if Body
  %46 = load i32, i32* %7     
  %47= getelementptr [65536 x i32],[65536 x i32]* @tape , i32 0, i32 0     
  %48= getelementptr i32,i32* %47 , i32 %46     
  %49 = load i32, i32* %7     
  %50= getelementptr [65536 x i32],[65536 x i32]* @tape , i32 0, i32 0     
  %51= getelementptr i32,i32* %50 , i32 %49     
  %52 = load i32, i32* %51     
  %53 = sub i32 %52, 1     ; tape[read_head]-1
  store i32 %53, i32* %48     ; tape[read_head]=tape[read_head]-1
  br label %157     

54:     ; else Body
  %55 = load i32, i32* %3     
  %56= icmp eq i32 %55, 91     ; code==91
  br i1 %56, label %57, label %98     ; judge code==91

57:     ; if Body
  %58 = load i32, i32* %7     
  %59= getelementptr [65536 x i32],[65536 x i32]* @tape , i32 0, i32 0     
  %60= getelementptr i32,i32* %59 , i32 %58     
  %61 = load i32, i32* %60     
  store i32 %61, i32* %2     ; val= = load i32, i32* 
  %62 = load i32, i32* %2     
  %63= icmp ne i32 %62, 0     ; val!=0
  br i1 %63, label %64, label %71     ; judge val!=0

64:     ; if Body
  %65 = load i32, i32* %4     
  %66= getelementptr [512 x i32],[512 x i32]* %5 , i32 0, i32 0     
  %67= getelementptr i32,i32* %66 , i32 %65     
  %68 = load i32, i32* %8     
  store i32 %68, i32* %67     ; return_address[return_address_top]=ip
  %69 = load i32, i32* %4     
  %70 = add i32 %69, 1     ; return_address_top+1
  store i32 %70, i32* %4     ; return_address_top=return_address_top+1
  br label %97     

71:     ; else Body
  store i32 1, i32* %1     ; loop=i32 1
  br label %72     

72:     ; judge loop>0
  %73 = load i32, i32* %1     
  %74= icmp sgt i32 %73, 0     ; loop>0
  br i1 %74, label %75, label %96     

75:     ; while Body
  %76 = load i32, i32* %8     
  %77 = add i32 %76, 1     ; ip+1
  store i32 %77, i32* %8     ; ip=ip+1
  %78 = load i32, i32* %8     
  %79= getelementptr [65536 x i32],[65536 x i32]* @program , i32 0, i32 0     
  %80= getelementptr i32,i32* %79 , i32 %78     
  %81 = load i32, i32* %80     
  %82= icmp eq i32 %81, 93     ; program[ip]==93
  br i1 %82, label %83, label %86     ; judge program[ip]==93

83:     ; if Body
  %84 = load i32, i32* %1     
  %85 = sub i32 %84, 1     ; loop-1
  store i32 %85, i32* %1     ; loop=loop-1
  br label %86     

86:     
  %87 = load i32, i32* %8     
  %88= getelementptr [65536 x i32],[65536 x i32]* @program , i32 0, i32 0     
  %89= getelementptr i32,i32* %88 , i32 %87     
  %90 = load i32, i32* %89     
  %91= icmp eq i32 %90, 91     ; program[ip]==91
  br i1 %91, label %92, label %95     ; judge program[ip]==91

92:     ; if Body
  %93 = load i32, i32* %1     
  %94 = add i32 %93, 1     ; loop+1
  store i32 %94, i32* %1     ; loop=loop+1
  br label %95     

95:     
  br label %72     

96:     ; exit while
  br label %97     

97:     
  br label %156     

98:     ; else Body
  %99 = load i32, i32* %3     
  %100= icmp eq i32 %99, 93     ; code==93
  br i1 %100, label %101, label %118     ; judge code==93

101:     ; if Body
  %102 = load i32, i32* %7     
  %103= getelementptr [65536 x i32],[65536 x i32]* @tape , i32 0, i32 0     
  %104= getelementptr i32,i32* %103 , i32 %102     
  %105 = load i32, i32* %104     
  store i32 %105, i32* %0     ; val= = load i32, i32* 
  %106 = load i32, i32* %0     
  %107= icmp eq i32 %106, 0     ; val==0
  br i1 %107, label %108, label %111     ; judge val==0

108:     ; if Body
  %109 = load i32, i32* %4     
  %110 = sub i32 %109, 1     ; return_address_top-1
  store i32 %110, i32* %4     ; return_address_top=return_address_top-1
  br label %117     

111:     ; else Body
  %112 = load i32, i32* %4     
  %113 = sub i32 %112, 1     ; return_address_top-1
  %114= getelementptr [512 x i32],[512 x i32]* %5 , i32 0, i32 0     
  %115= getelementptr i32,i32* %114 , i32 %113     
  %116 = load i32, i32* %115     
  store i32 %116, i32* %8     ; ip=return_address[return_address_top-1]
  br label %117     

117:     
  br label %155     

118:     ; else Body
  %119 = load i32, i32* %3     
  %120= icmp eq i32 %119, 46     ; code==46
  br i1 %120, label %121, label %131     ; judge code==46

121:     ; if Body
  %122 = load i32, i32* @output_length     
  %123= getelementptr [65536 x i32],[65536 x i32]* @output , i32 0, i32 0     
  %124= getelementptr i32,i32* %123 , i32 %122     
  %125 = load i32, i32* %7     
  %126= getelementptr [65536 x i32],[65536 x i32]* @tape , i32 0, i32 0     
  %127= getelementptr i32,i32* %126 , i32 %125     
  %128 = load i32, i32* %127     
  store i32 %128, i32* %124     ; output[output_length]=tape[read_head]
  %129 = load i32, i32* @output_length     
  %130 = add i32 %129, 1     ; output_length+1
  store i32 %130, i32* @output_length     ; output_length=output_length+1
  br label %154     

131:     ; else Body
  %132 = load i32, i32* %3     
  %133= icmp eq i32 %132, 44     ; code==44
  br i1 %133, label %134, label %153     ; judge code==44

134:     ; if Body
  %135 = load i32, i32* %6     
  %136 = load i32, i32* @input_length     
  %137= icmp sge i32 %135, %136     ; input_head>=input_length
  br i1 %137, label %138, label %142     ; judge input_head>=input_length

138:     ; if Body
  %139 = load i32, i32* %7     
  %140= getelementptr [65536 x i32],[65536 x i32]* @tape , i32 0, i32 0     
  %141= getelementptr i32,i32* %140 , i32 %139     
  store i32 0, i32* %141     ; tape[read_head]=0
  br label %152     

142:     ; else Body
  %143 = load i32, i32* %7     
  %144= getelementptr [65536 x i32],[65536 x i32]* @tape , i32 0, i32 0     
  %145= getelementptr i32,i32* %144 , i32 %143     
  %146 = load i32, i32* %6     
  %147= getelementptr [65536 x i32],[65536 x i32]* @input , i32 0, i32 0     
  %148= getelementptr i32,i32* %147 , i32 %146     
  %149 = load i32, i32* %148     
  store i32 %149, i32* %145     ; tape[read_head]=input[input_head]
  %150 = load i32, i32* %6     
  %151 = add i32 %150, 1     ; input_head+1
  store i32 %151, i32* %6     ; input_head=input_head+1
  br label %152     

152:     
  br label %153     

153:     
  br label %154     

154:     
  br label %155     

155:     
  br label %156     

156:     
  br label %157     

157:     
  br label %158     

158:     
  br label %159     

159:     
  br label %160     

160:     
  %161 = load i32, i32* %8     
  %162 = add i32 %161, 1     ; ip+1
  store i32 %162, i32* %8     ; ip=ip+1
  br label %10     

163:     ; exit while
  br label %retBB     

retBB:     
  ret void     
}

define dso_local void @output_(){
entry:     
  %0 = alloca i32     ; i32 i=0
  store i32 0, i32* %0     ; i=i32 0
  br label %1     

1:     ; judge i<output_length
  %2 = load i32, i32* %0     
  %3 = load i32, i32* @output_length     
  %4= icmp slt i32 %2, %3     ; i<output_length
  br i1 %4, label %5, label %12     

5:     ; while Body
  %6 = load i32, i32* %0     
  %7= getelementptr [65536 x i32],[65536 x i32]* @output , i32 0, i32 0     
  %8= getelementptr i32,i32* %7 , i32 %6     
  %9 = load i32, i32* %8     
  call void @putch(i32 %9)     ; call putch(output[i])
  %10 = load i32, i32* %0     
  %11 = add i32 %10, 1     ; i+1
  store i32 %11, i32* %0     ; i=i+1
  br label %1     

12:     ; exit while
  br label %retBB     

retBB:     
  ret void     
}

define dso_local i32 @main(){
entry:     
  %ret = alloca i32     
  call void @read_program()     ; call read_program()
  call void @_sysy_starttime(i32 0)     ; call starttime()
  call void @run_program()     ; call run_program()
  call void @_sysy_stoptime(i32 0)     ; call stoptime()
  call void @output_()     ; call output_()
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %0 = load i32, i32* %ret     
  ret i32 %0     
}

