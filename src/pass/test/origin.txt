@array = dso_local global [110 x i32] zeroinitializer
@n = dso_local global i32 0

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @_sysy_starttime()
declare void @stoptime()

define dso_local void @init(i32 %0){
entry:     
  %1 = alloca i32     ; i32 i=1
  %2 = alloca i32     ; i32 n
  store i32 %0, i32* %2     
  store i32 1, i32* %1     ; i=i32 1
  br label %3     

3:     ; judge i<=n*n+1
  %4 = load i32, i32* %1     
  %5 = load i32, i32* %2     
  %6 = load i32, i32* %2     
  %7 = mul i32 %5, %6     ; n*n
  %8 = add i32 %7, 1     ; n*n+1
  %9= icmp sle i32 %4, %8     ; i<=n*n+1
  br i1 %9, label %10, label %16     

10:     ; while Body
  %11 = load i32, i32* %1     
  %12= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %11     
  store i32 -1, i32* %12     ; array[i]=-1
  %13 = load i32, i32* %1     
  %14 = add i32 %13, 1     ; i+1
  store i32 %14, i32* %1     ; i=i+1
  br label %15     

15:     ; jump to head
  br label %3     

16:     ; exit while
  br label %retBB     

retBB:     
  ret void     
}

define dso_local i32 @findfa(i32 %0){
entry:     
  %1 = alloca i32     ; i32 a
  %ret = alloca i32     
  store i32 %0, i32* %1     
  %2 = load i32, i32* %1     
  %3= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %2     
  %4 = load i32, i32* %3     
  %5 = load i32, i32* %1     
  %6= icmp eq i32 %4, %5     ; array[a]==a
  br i1 %6, label %7, label %9     ; judge array[a]==a

7:     ; if Body
  %8 = load i32, i32* %1     
  store i32 %8, i32* %ret     
  br label %retBB     

9:     ; else Body
  %10 = load i32, i32* %1     
  %11= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %10     
  %12 = load i32, i32* %1     
  %13= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %12     
  %14 = load i32, i32* %13     
  %15 = call i32 @findfa(i32 %14)     ; call findfa(array[a])
  store i32 %15, i32* %11     ; array[a]=findfa(array[a])
  %16 = load i32, i32* %1     
  %17= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %16     
  %18 = load i32, i32* %17     
  store i32 %18, i32* %ret     
  br label %retBB     

19:     
  br label %retBB     

retBB:     
  %20 = load i32, i32* %ret     
  ret i32 %20     
}

define dso_local void @mmerge(i32 %0,i32 %1){
entry:     
  %2 = alloca i32     ; i32 n=findfa(b)
  %3 = alloca i32     ; i32 m=findfa(a)
  %4 = alloca i32     ; i32 b
  %5 = alloca i32     ; i32 a
  store i32 %0, i32* %5     
  store i32 %1, i32* %4     
  %6 = load i32, i32* %5     
  %7 = call i32 @findfa(i32 %6)     ; call findfa(a)
  store i32 %7, i32* %3     ; m= = call i32 @findfa(i32 )
  %8 = load i32, i32* %4     
  %9 = call i32 @findfa(i32 %8)     ; call findfa(b)
  store i32 %9, i32* %2     ; n= = call i32 @findfa(i32 )
  %10 = load i32, i32* %3     
  %11 = load i32, i32* %2     
  %12= icmp ne i32 %10, %11     ; m!=n
  br i1 %12, label %13, label %17     ; judge m!=n

13:     ; if Body
  %14 = load i32, i32* %3     
  %15= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %14     
  %16 = load i32, i32* %2     
  store i32 %16, i32* %15     ; array[m]=n
  br label %17     

17:     
  br label %retBB     

retBB:     
  ret void     
}

define dso_local i32 @main(){
entry:     
  %0 = alloca i32     ; i32 tmp=i+1
  %1 = alloca i32     ; i32 loc=n*(a-1)+b
  %2 = alloca i32     ; i32 k=n*n+1
  %3 = alloca i32     ; i32 flag=0
  %4 = alloca i32     ; i32 i=0
  %5 = alloca i32     ; i32 b
  %6 = alloca i32     ; i32 a
  %7 = alloca i32     ; i32 m
  %8 = alloca i32     ; i32 t
  %ret = alloca i32     
  store i32 1, i32* %8     ; t=1
  br label %9     

9:     ; judge t
  %10 = load i32, i32* %8     
  %11= icmp ne i32 %10, 0     
  br i1 %11, label %12, label %141     

12:     ; while Body
  %13 = load i32, i32* %8     
  %14 = sub i32 %13, 1     ; t-1
  store i32 %14, i32* %8     ; t=t-1
  store i32 4, i32* @n     ; n=4
  store i32 10, i32* %7     ; m=10
  store i32 0, i32* %4     ; i=i32 0
  store i32 0, i32* %3     ; flag=i32 0
  %15 = load i32, i32* @n     
  call void @init(i32 %15)     ; call init(n)
  %16 = load i32, i32* @n     
  %17 = load i32, i32* @n     
  %18 = mul i32 %16, %17     ; n*n
  %19 = add i32 %18, 1     ; n*n+1
  store i32 %19, i32* %2     ; k= = add i32 , 1
  br label %20     

20:     ; judge i<m
  %21 = load i32, i32* %4     
  %22 = load i32, i32* %7     
  %23= icmp slt i32 %21, %22     ; i<m
  br i1 %23, label %24, label %135     

24:     ; while Body
  %25 = call i32 @getint()     ; call getint()
  store i32 %25, i32* %6     ; a=getint()
  %26 = call i32 @getint()     ; call getint()
  store i32 %26, i32* %5     ; b=getint()
  %27 = load i32, i32* %3     ; !flag
  %28= icmp eq i32 %27, 0     
  br i1 %28, label %29, label %131     ; judge !flag

29:     ; if Body
  %30 = load i32, i32* @n     
  %31 = load i32, i32* %6     
  %32 = sub i32 %31, 1     ; a-1
  %33 = mul i32 %30, %32     ; n*(a-1)
  %34 = load i32, i32* %5     
  %35 = add i32 %33, %34     ; n*(a-1)+b
  store i32 %35, i32* %1     ; loc= = add i32 , 
  %36 = load i32, i32* %1     
  %37= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %36     
  %38 = load i32, i32* %1     
  store i32 %38, i32* %37     ; array[loc]=loc
  %39 = load i32, i32* %6     
  %40= icmp eq i32 %39, 1     ; a==1
  br i1 %40, label %41, label %44     ; judge a==1

41:     ; if Body
  %42= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 0     
  store i32 0, i32* %42     ; array[0]=0
  %43 = load i32, i32* %1     
  call void @mmerge(i32 %43,i32 0)     ; call mmerge(loc,0)
  br label %44     

44:     
  %45 = load i32, i32* %6     
  %46 = load i32, i32* @n     
  %47= icmp eq i32 %45, %46     ; a==n
  br i1 %47, label %48, label %54     ; judge a==n

48:     ; if Body
  %49 = load i32, i32* %2     
  %50= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %49     
  %51 = load i32, i32* %2     
  store i32 %51, i32* %50     ; array[k]=k
  %52 = load i32, i32* %1     
  %53 = load i32, i32* %2     
  call void @mmerge(i32 %52,i32 %53)     ; call mmerge(loc,k)
  br label %54     

54:     
  %55 = load i32, i32* %5     
  %56 = load i32, i32* @n     
  %57= icmp slt i32 %55, %56     ; b<n
  br i1 %57, label %58, label %68     

58:     
  %59 = load i32, i32* %1     
  %60 = add i32 %59, 1     ; loc+1
  %61= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %60     
  %62 = load i32, i32* %61     
  %63= icmp ne i32 %62, -1     ; b<n && array[loc+1]!=-1
  br i1 %63, label %64, label %68     ; judge b<n&&array[loc+1]!=-1

64:     ; if Body
  %65 = load i32, i32* %1     
  %66 = load i32, i32* %1     
  %67 = add i32 %66, 1     ; loc+1
  call void @mmerge(i32 %65,i32 %67)     ; call mmerge(loc,loc+1)
  br label %68     

68:     
  %69 = load i32, i32* %5     
  %70= icmp sgt i32 %69, 1     ; b>1
  br i1 %70, label %71, label %81     

71:     
  %72 = load i32, i32* %1     
  %73 = sub i32 %72, 1     ; loc-1
  %74= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %73     
  %75 = load i32, i32* %74     
  %76= icmp ne i32 %75, -1     ; b>1 && array[loc-1]!=-1
  br i1 %76, label %77, label %81     ; judge b>1&&array[loc-1]!=-1

77:     ; if Body
  %78 = load i32, i32* %1     
  %79 = load i32, i32* %1     
  %80 = sub i32 %79, 1     ; loc-1
  call void @mmerge(i32 %78,i32 %80)     ; call mmerge(loc,loc-1)
  br label %81     

81:     
  %82 = load i32, i32* %6     
  %83 = load i32, i32* @n     
  %84= icmp slt i32 %82, %83     ; a<n
  br i1 %84, label %85, label %97     

85:     
  %86 = load i32, i32* %1     
  %87 = load i32, i32* @n     
  %88 = add i32 %86, %87     ; loc+n
  %89= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %88     
  %90 = load i32, i32* %89     
  %91= icmp ne i32 %90, -1     ; a<n && array[loc+n]!=-1
  br i1 %91, label %92, label %97     ; judge a<n&&array[loc+n]!=-1

92:     ; if Body
  %93 = load i32, i32* %1     
  %94 = load i32, i32* %1     
  %95 = load i32, i32* @n     
  %96 = add i32 %94, %95     ; loc+n
  call void @mmerge(i32 %93,i32 %96)     ; call mmerge(loc,loc+n)
  br label %97     

97:     
  %98 = load i32, i32* %6     
  %99= icmp sgt i32 %98, 1     ; a>1
  br i1 %99, label %100, label %112     

100:     
  %101 = load i32, i32* %1     
  %102 = load i32, i32* @n     
  %103 = sub i32 %101, %102     ; loc-n
  %104= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %103     
  %105 = load i32, i32* %104     
  %106= icmp ne i32 %105, -1     ; a>1 && array[loc-n]!=-1
  br i1 %106, label %107, label %112     ; judge a>1&&array[loc-n]!=-1

107:     ; if Body
  %108 = load i32, i32* %1     
  %109 = load i32, i32* %1     
  %110 = load i32, i32* @n     
  %111 = sub i32 %109, %110     ; loc-n
  call void @mmerge(i32 %108,i32 %111)     ; call mmerge(loc,loc-n)
  br label %112     

112:     
  %113= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 0     
  %114 = load i32, i32* %113     
  %115= icmp ne i32 %114, -1     ; array[0]!=-1
  br i1 %115, label %116, label %130     

116:     
  %117 = load i32, i32* %2     
  %118= getelementptr [110 x i32],[110 x i32]* @array , i32 0, i32 %117     
  %119 = load i32, i32* %118     
  %120= icmp ne i32 %119, -1     ; array[0]!=-1 && array[k]!=-1
  br i1 %120, label %121, label %130     

121:     
  %122 = call i32 @findfa(i32 0)     ; call findfa(0)
  %123 = load i32, i32* %2     
  %124 = call i32 @findfa(i32 %123)     ; call findfa(k)
  %125= icmp eq i32 %122, %124     ; array[0]!=-1 && array[k]!=-1 && findfa(0)==findfa(k)
  br i1 %125, label %126, label %130     ; judge array[0]!=-1&&array[k]!=-1&&findfa(0)==findfa(k)

126:     ; if Body
  store i32 1, i32* %3     ; flag=1
  %127 = load i32, i32* %4     
  %128 = add i32 %127, 1     ; i+1
  store i32 %128, i32* %0     ; tmp= = add i32 , 1
  %129 = load i32, i32* %0     
  call void @putint(i32 %129)     ; call putint(tmp)
  call void @putch(i32 10)     ; call putch(10)
  br label %130     

130:     
  br label %131     

131:     
  %132 = load i32, i32* %4     
  %133 = add i32 %132, 1     ; i+1
  store i32 %133, i32* %4     ; i=i+1
  br label %134     

134:     ; jump to head
  br label %20     

135:     ; exit while
  %136 = load i32, i32* %3     ; !flag
  %137= icmp eq i32 %136, 0     
  br i1 %137, label %138, label %139     ; judge !flag

138:     ; if Body
  call void @putint(i32 -1)     ; call putint(-1)
  call void @putch(i32 10)     ; call putch(10)
  br label %139     

139:     
  br label %140     

140:     ; jump to head
  br label %9     

141:     ; exit while
  store i32 0, i32* %ret     
  br label %retBB     

retBB:     
  %142 = load i32, i32* %ret     
  ret i32 %142     
}

