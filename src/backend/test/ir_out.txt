declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @starttime()
declare void @stoptime()

define dso_local i32 @add(i32 %0,i32 %1,i32 %2,i32 %3,i32 %4,i32 %5){
  %7 = alloca i32     ; get f
  %8 = alloca i32     ; get e
  %9 = alloca i32     ; get d
  %10 = alloca i32     ; get c
  %11 = alloca i32     ; get b
  %12 = alloca i32     ; get a
  store i32 %0, i32* %12     
  store i32 %1, i32* %11     
  store i32 %2, i32* %10     
  store i32 %3, i32* %9     
  store i32 %4, i32* %8     
  store i32 %5, i32* %7     
  %13 = load i32, i32* %8     
  %14 = load i32, i32* %12     
  %15 = add i32 %13, %14     ; e+a
  %16 = load i32, i32* %11     
  %17 = add i32 %15, %16     ; e+a+b
  %18 = load i32, i32* %10     
  %19 = add i32 %17, %18     ; e+a+b+c
  %20 = load i32, i32* %9     
  %21 = add i32 %19, %20     ; e+a+b+c+d
  %22 = load i32, i32* %7     
  %23 = add i32 %21, %22     ; e+a+b+c+d+f
  ret i32 %23     
}

define dso_local i32 @main(){
  %1 = call i32 @add(i32 1,i32 2,i32 4,i32 8,i32 16,i32 32)     ; call add(1,2,4,8,16,32)
  ret i32 %1     
}

