@a = dso_local global [5 x [3 x i32]] [[3 x i32] [i32 10,i32 9,i32 8],[3 x i32] [i32 7,i32 6,i32 5],[3 x i32] [i32 4,i32 3,i32 2],[3 x i32] [i32 1,i32 0,i32 0],[3 x i32] zeroinitializer]
@b = dso_local global i32 4

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @starttime()
declare void @stoptime()

define dso_local i32 @add(i32 %0,[3 x i32]* %1){
entry:     
  %2 = alloca [3 x i32]*     ; [3 x i32]* a
  %3 = alloca i32     ; i32 b
  store i32 %0, i32* %3     
  store [3 x i32]* %1, [3 x i32]** %2     
  %4 = load [3 x i32]*, [3 x i32]** %2     
  %5= getelementptr [3 x i32],[3 x i32]* %4 , i32 1     
  %6= getelementptr [3 x i32],[3 x i32]* %5 , i32 0, i32 2     
  %7 = load i32, i32* %6     
  %8 = load i32, i32* %3     
  %9 = add i32 %7, %8     ; a[1][2]+b
  ret i32 %9     
}

define dso_local i32 @main(){
entry:     
  %0 = load i32, i32* @b     
  %1= getelementptr [5 x [3 x i32]],[5 x [3 x i32]]* @a , i32 0, i32 0     
  %2 = call i32 @add(i32 %0,[3 x i32]* %1)     ; call add(b,a)
  call void @putint(i32 %2)     ; call putint(add(b,a))
  ret i32 0     
}

