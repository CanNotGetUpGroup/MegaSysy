@a = dso_local global i32 1
@b = dso_local global i32 0
@c = dso_local global i32 1
@d = dso_local global i32 2
@e = dso_local global i32 4

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @starttime()
declare void @stoptime()

define dso_local i32 @main(){
  %1 = alloca i32     ; get flag
  store i32 0, i32* %1     ; flag=i32 0
  %2 = load i32, i32* @a     
  %3 = load i32, i32* @b     
  %4 = mul i32 %2, %3     ; a*b
  %5 = load i32, i32* @c     
  %6 = sdiv i32 %4, %5     ; a*b/c
  call void @putint(i32 %6)     ; call putint(a*b/c)
  %7 = load i32, i32* @e     
  %8 = load i32, i32* @d     
  %9 = add i32 %7, %8     ; e+d
  call void @putint(i32 %9)     ; call putint(e+d)
  %10 = load i32, i32* @a     
  %11 = load i32, i32* @a     
  %12 = load i32, i32* @b     
  %13 = add i32 %11, %12     ; a+b
  %14 = mul i32 %10, %13     ; a*(a+b)
  %15 = load i32, i32* @c     
  %16 = add i32 %14, %15     ; a*(a+b)+c
  call void @putint(i32 %16)     ; call putint(a*(a+b)+c)
  %17 = load i32, i32* @d     
  %18 = load i32, i32* @e     
  %19 = add i32 %17, %18     ; d+e
  call void @putint(i32 %19)     ; call putint(d+e)
  %20 = load i32, i32* @a     
  %21 = load i32, i32* @b     
  %22 = load i32, i32* @c     
  %23 = mul i32 %21, %22     ; b*c
  %24 = sub i32 %20, %23     ; a-(b*c)
  call void @putint(i32 %24)     ; call putint(a-(b*c))
  %25 = load i32, i32* @d     
  %26 = load i32, i32* @a     
  %27 = load i32, i32* @c     
  %28 = sdiv i32 %26, %27     ; a/c
  %29 = sub i32 %25, %28     ; d-a/c
  call void @putint(i32 %29)     ; call putint(d-a/c)
  %30 = load i32, i32* @a     
  %31 = load i32, i32* @b     
  %32 = mul i32 %30, %31     ; a*b
  %33 = load i32, i32* @c     
  %34 = sdiv i32 %32, %33     ; a*b/c
  %35 = load i32, i32* @e     
  %36 = load i32, i32* @d     
  %37 = add i32 %35, %36     ; e+d
  %38= icmp eq i32 %34, %37     ; a*b/c==e+d
  br i1 %38, label %39, label %64     

39:     
  %40 = load i32, i32* @a     
  %41 = load i32, i32* @a     
  %42 = load i32, i32* @b     
  %43 = add i32 %41, %42     ; a+b
  %44 = mul i32 %40, %43     ; a*(a+b)
  %45 = load i32, i32* @c     
  %46 = add i32 %44, %45     ; a*(a+b)+c
  %47 = load i32, i32* @d     
  %48 = load i32, i32* @e     
  %49 = add i32 %47, %48     ; d+e
  %50= icmp sle i32 %46, %49     ; a*b/c==e+d && a*(a+b)+c<=d+e
  br i1 %50, label %63, label %51     

51:     
  %52 = load i32, i32* @a     
  %53 = load i32, i32* @b     
  %54 = load i32, i32* @c     
  %55 = mul i32 %53, %54     ; b*c
  %56 = sub i32 %52, %55     ; a-(b*c)
  %57 = load i32, i32* @d     
  %58 = load i32, i32* @a     
  %59 = load i32, i32* @c     
  %60 = sdiv i32 %58, %59     ; a/c
  %61 = sub i32 %57, %60     ; d-a/c
  %62= icmp eq i32 %56, %61     ; a*b/c==e+d&&a*(a+b)+c<=d+e || a-(b*c)==d-a/c
  br i1 %62, label %63, label %64     ; judge a*b/c==e+d&&a*(a+b)+c<=d+e||a-(b*c)==d-a/c

63:     ; if Stmt
  store i32 1, i32* %1     ; flag=1
  br label %64     

64:     
  %65 = load i32, i32* %1     
  call void @putint(i32 %65)     ; call putint(flag)
  %66 = load i32, i32* %1     
  ret i32 %66     
}

