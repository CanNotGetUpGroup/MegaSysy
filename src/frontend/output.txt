@sheet1 = dso_local global [500 x [500 x i32]] zeroinitializer
@sheet2 = dso_local global [500 x [500 x i32]] zeroinitializer
@active = dso_local global i32 1
@width = dso_local global i32 0
@height = dso_local global i32 0
@steps = dso_local global i32 0

declare i32 @getint()
declare float @getfloat()
declare i32 @getarray(i32*)
declare i32 @getfarray(float*)
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
declare void @putfloat(float)
declare void @putarray(i32,i32*)
declare void @putfarray(i32,float*)
declare void @memset(i32*,i32,i32)
declare void @starttime()
declare void @stoptime()

define dso_local void @read_map(){
entry:     
  %0 = alloca i32     ; i32 get=getch()
  %1 = alloca i32     ; i32 j=1
  %2 = alloca i32     ; i32 i=1
  %3 = call i32 @getint()     ; call getint()
  store i32 %3, i32* @width     ; width=getint()
  %4 = call i32 @getint()     ; call getint()
  store i32 %4, i32* @height     ; height=getint()
  %5 = call i32 @getint()     ; call getint()
  store i32 %5, i32* @steps     ; steps=getint()
  %6 = call i32 @getch()     ; call getch()
  store i32 1, i32* %2     ; i=i32 1
  store i32 1, i32* %1     ; j=i32 1
  br label %7     

7:     ; judge j<=height
  %8 = load i32, i32* %1     
  %9 = load i32, i32* @height     
  %10= icmp sle i32 %8, %9     ; j<=height
  br i1 %10, label %11, label %37     

11:     ; while Stmt
  store i32 1, i32* %2     ; i=1
  br label %12     

12:     ; judge i<=width
  %13 = load i32, i32* %2     
  %14 = load i32, i32* @width     
  %15= icmp sle i32 %13, %14     ; i<=width
  br i1 %15, label %16, label %33     

16:     ; while Stmt
  %17 = call i32 @getch()     ; call getch()
  store i32 %17, i32* %0     ; get= = call i32 @getch()
  %18 = load i32, i32* %0     
  %19= icmp eq i32 %18, 35     ; get==35
  br i1 %19, label %20, label %25     ; judge get==35

20:     ; if Stmt
  %21 = load i32, i32* %1     
  %22= getelementptr [500 x [500 x i32]],[500 x [500 x i32]]* @sheet1 , i32 0, i32 %21     
  %23 = load i32, i32* %2     
  %24= getelementptr [500 x i32],[500 x i32]* %22 , i32 0, i32 %23     
  store i32 1, i32* %24     ; sheet1[j][i]=1
  br label %30     

25:     ; else Stmt
  %26 = load i32, i32* %1     
  %27= getelementptr [500 x [500 x i32]],[500 x [500 x i32]]* @sheet1 , i32 0, i32 %26     
  %28 = load i32, i32* %2     
  %29= getelementptr [500 x i32],[500 x i32]* %27 , i32 0, i32 %28     
  store i32 0, i32* %29     ; sheet1[j][i]=0
  br label %30     

30:     
  %31 = load i32, i32* %2     
  %32 = add i32 %31, 1     ; i+1
  store i32 %32, i32* %2     ; i=i+1
  br label %12     

33:     ; exit while
  %34 = call i32 @getch()     ; call getch()
  %35 = load i32, i32* %1     
  %36 = add i32 %35, 1     ; j+1
  store i32 %36, i32* %1     ; j=j+1
  br label %7     

37:     ; exit while
  ret void     
}

define dso_local void @put_map(){
entry:     
  %0 = alloca i32     ; i32 j=1
  %1 = alloca i32     ; i32 i=1
  store i32 1, i32* %1     ; i=i32 1
  store i32 1, i32* %0     ; j=i32 1
  br label %2     

2:     ; judge j<=height
  %3 = load i32, i32* %0     
  %4 = load i32, i32* @height     
  %5= icmp sle i32 %3, %4     ; j<=height
  br i1 %5, label %6, label %26     

6:     ; while Stmt
  store i32 1, i32* %1     ; i=1
  br label %7     

7:     ; judge i<=width
  %8 = load i32, i32* %1     
  %9 = load i32, i32* @width     
  %10= icmp sle i32 %8, %9     ; i<=width
  br i1 %10, label %11, label %23     

11:     ; while Stmt
  %12 = load i32, i32* %0     
  %13= getelementptr [500 x [500 x i32]],[500 x [500 x i32]]* @sheet1 , i32 0, i32 %12     
  %14 = load i32, i32* %1     
  %15= getelementptr [500 x i32],[500 x i32]* %13 , i32 0, i32 %14     
  %16 = load i32, i32* %15     
  %17= icmp eq i32 %16, 1     ; sheet1[j][i]==1
  br i1 %17, label %18, label %19     ; judge sheet1[j][i]==1

18:     ; if Stmt
  call void @putch(i32 35)     ; call putch(35)
  br label %20     

19:     ; else Stmt
  call void @putch(i32 46)     ; call putch(46)
  br label %20     

20:     
  %21 = load i32, i32* %1     
  %22 = add i32 %21, 1     ; i+1
  store i32 %22, i32* %1     ; i=i+1
  br label %7     

23:     ; exit while
  call void @putch(i32 10)     ; call putch(10)
  %24 = load i32, i32* %0     
  %25 = add i32 %24, 1     ; j+1
  store i32 %25, i32* %0     ; j=j+1
  br label %2     

26:     ; exit while
  ret void     
}

define dso_local void @swap12(){
entry:     
  %0 = alloca i32     ; i32 j=1
  %1 = alloca i32     ; i32 i=1
  store i32 1, i32* %1     ; i=i32 1
  store i32 1, i32* %0     ; j=i32 1
  br label %2     

2:     ; judge j<=height
  %3 = load i32, i32* %0     
  %4 = load i32, i32* @height     
  %5= icmp sle i32 %3, %4     ; j<=height
  br i1 %5, label %6, label %26     

6:     ; while Stmt
  store i32 1, i32* %1     ; i=1
  br label %7     

7:     ; judge i<=width
  %8 = load i32, i32* %1     
  %9 = load i32, i32* @width     
  %10= icmp sle i32 %8, %9     ; i<=width
  br i1 %10, label %11, label %23     

11:     ; while Stmt
  %12 = load i32, i32* %0     
  %13= getelementptr [500 x [500 x i32]],[500 x [500 x i32]]* @sheet1 , i32 0, i32 %12     
  %14 = load i32, i32* %1     
  %15= getelementptr [500 x i32],[500 x i32]* %13 , i32 0, i32 %14     
  %16 = load i32, i32* %0     
  %17= getelementptr [500 x [500 x i32]],[500 x [500 x i32]]* @sheet2 , i32 0, i32 %16     
  %18 = load i32, i32* %1     
  %19= getelementptr [500 x i32],[500 x i32]* %17 , i32 0, i32 %18     
  %20 = load i32, i32* %19     
  store i32 %20, i32* %15     ; sheet1[j][i]=sheet2[j][i]
  %21 = load i32, i32* %1     
  %22 = add i32 %21, 1     ; i+1
  store i32 %22, i32* %1     ; i=i+1
  br label %7     

23:     ; exit while
  %24 = load i32, i32* %0     
  %25 = add i32 %24, 1     ; j+1
  store i32 %25, i32* %0     ; j=j+1
  br label %2     

26:     ; exit while
  ret void     
}

define dso_local void @step([500 x i32]* %0,[500 x i32]* %1){
entry:     
  %2 = alloca i32     ; i32 alive_count=source[j-1][i-1]+source[j-1][i]+source[j-1][i+1]+source[j][i-1]+source[j][i+1]+source[j+1][i-1]+source[j+1][i]+source[j+1][i+1]
  %3 = alloca i32     ; i32 j=1
  %4 = alloca i32     ; i32 i=1
  %5 = alloca [500 x i32]*     ; [500 x i32]* target
  %6 = alloca [500 x i32]*     ; [500 x i32]* source
  store [500 x i32]* %0, [500 x i32]** %6     
  store [500 x i32]* %1, [500 x i32]** %5     
  store i32 1, i32* %4     ; i=i32 1
  store i32 1, i32* %3     ; j=i32 1
  br label %7     

7:     ; judge j<=height
  %8 = load i32, i32* %3     
  %9 = load i32, i32* @height     
  %10= icmp sle i32 %8, %9     ; j<=height
  br i1 %10, label %11, label %122     

11:     ; while Stmt
  store i32 1, i32* %4     ; i=1
  br label %12     

12:     ; judge i<=width
  %13 = load i32, i32* %4     
  %14 = load i32, i32* @width     
  %15= icmp sle i32 %13, %14     ; i<=width
  br i1 %15, label %16, label %119     

16:     ; while Stmt
  %17 = load [500 x i32]*, [500 x i32]** %6     
  %18 = load i32, i32* %3     
  %19 = sub i32 %18, 1     ; j-1
  %20= getelementptr [500 x i32],[500 x i32]* %17 , i32 %19     
  %21 = load i32, i32* %4     
  %22 = sub i32 %21, 1     ; i-1
  %23= getelementptr [500 x i32],[500 x i32]* %20 , i32 0, i32 %22     
  %24 = load i32, i32* %23     
  %25 = load [500 x i32]*, [500 x i32]** %6     
  %26 = load i32, i32* %3     
  %27 = sub i32 %26, 1     ; j-1
  %28= getelementptr [500 x i32],[500 x i32]* %25 , i32 %27     
  %29 = load i32, i32* %4     
  %30= getelementptr [500 x i32],[500 x i32]* %28 , i32 0, i32 %29     
  %31 = load i32, i32* %30     
  %32 = add i32 %24, %31     ; source[j-1][i-1]+source[j-1][i]
  %33 = load [500 x i32]*, [500 x i32]** %6     
  %34 = load i32, i32* %3     
  %35 = sub i32 %34, 1     ; j-1
  %36= getelementptr [500 x i32],[500 x i32]* %33 , i32 %35     
  %37 = load i32, i32* %4     
  %38 = add i32 %37, 1     ; i+1
  %39= getelementptr [500 x i32],[500 x i32]* %36 , i32 0, i32 %38     
  %40 = load i32, i32* %39     
  %41 = add i32 %32, %40     ; source[j-1][i-1]+source[j-1][i]+source[j-1][i+1]
  %42 = load [500 x i32]*, [500 x i32]** %6     
  %43 = load i32, i32* %3     
  %44= getelementptr [500 x i32],[500 x i32]* %42 , i32 %43     
  %45 = load i32, i32* %4     
  %46 = sub i32 %45, 1     ; i-1
  %47= getelementptr [500 x i32],[500 x i32]* %44 , i32 0, i32 %46     
  %48 = load i32, i32* %47     
  %49 = add i32 %41, %48     ; source[j-1][i-1]+source[j-1][i]+source[j-1][i+1]+source[j][i-1]
  %50 = load [500 x i32]*, [500 x i32]** %6     
  %51 = load i32, i32* %3     
  %52= getelementptr [500 x i32],[500 x i32]* %50 , i32 %51     
  %53 = load i32, i32* %4     
  %54 = add i32 %53, 1     ; i+1
  %55= getelementptr [500 x i32],[500 x i32]* %52 , i32 0, i32 %54     
  %56 = load i32, i32* %55     
  %57 = add i32 %49, %56     ; source[j-1][i-1]+source[j-1][i]+source[j-1][i+1]+source[j][i-1]+source[j][i+1]
  %58 = load [500 x i32]*, [500 x i32]** %6     
  %59 = load i32, i32* %3     
  %60 = add i32 %59, 1     ; j+1
  %61= getelementptr [500 x i32],[500 x i32]* %58 , i32 %60     
  %62 = load i32, i32* %4     
  %63 = sub i32 %62, 1     ; i-1
  %64= getelementptr [500 x i32],[500 x i32]* %61 , i32 0, i32 %63     
  %65 = load i32, i32* %64     
  %66 = add i32 %57, %65     ; source[j-1][i-1]+source[j-1][i]+source[j-1][i+1]+source[j][i-1]+source[j][i+1]+source[j+1][i-1]
  %67 = load [500 x i32]*, [500 x i32]** %6     
  %68 = load i32, i32* %3     
  %69 = add i32 %68, 1     ; j+1
  %70= getelementptr [500 x i32],[500 x i32]* %67 , i32 %69     
  %71 = load i32, i32* %4     
  %72= getelementptr [500 x i32],[500 x i32]* %70 , i32 0, i32 %71     
  %73 = load i32, i32* %72     
  %74 = add i32 %66, %73     ; source[j-1][i-1]+source[j-1][i]+source[j-1][i+1]+source[j][i-1]+source[j][i+1]+source[j+1][i-1]+source[j+1][i]
  %75 = load [500 x i32]*, [500 x i32]** %6     
  %76 = load i32, i32* %3     
  %77 = add i32 %76, 1     ; j+1
  %78= getelementptr [500 x i32],[500 x i32]* %75 , i32 %77     
  %79 = load i32, i32* %4     
  %80 = add i32 %79, 1     ; i+1
  %81= getelementptr [500 x i32],[500 x i32]* %78 , i32 0, i32 %80     
  %82 = load i32, i32* %81     
  %83 = add i32 %74, %82     ; source[j-1][i-1]+source[j-1][i]+source[j-1][i+1]+source[j][i-1]+source[j][i+1]+source[j+1][i-1]+source[j+1][i]+source[j+1][i+1]
  store i32 %83, i32* %2     ; alive_count= = add i32 , 
  %84 = load [500 x i32]*, [500 x i32]** %6     
  %85 = load i32, i32* %3     
  %86= getelementptr [500 x i32],[500 x i32]* %84 , i32 %85     
  %87 = load i32, i32* %4     
  %88= getelementptr [500 x i32],[500 x i32]* %86 , i32 0, i32 %87     
  %89 = load i32, i32* %88     
  %90= icmp eq i32 %89, 1     ; source[j][i]==1
  br i1 %90, label %91, label %100     

91:     
  %92 = load i32, i32* %2     
  %93= icmp eq i32 %92, 2     ; source[j][i]==1 && alive_count==2
  br i1 %93, label %94, label %100     ; judge source[j][i]==1&&alive_count==2

94:     ; if Stmt
  %95 = load [500 x i32]*, [500 x i32]** %5     
  %96 = load i32, i32* %3     
  %97= getelementptr [500 x i32],[500 x i32]* %95 , i32 %96     
  %98 = load i32, i32* %4     
  %99= getelementptr [500 x i32],[500 x i32]* %97 , i32 0, i32 %98     
  store i32 1, i32* %99     ; target[j][i]=1
  br label %116     

100:     ; else Stmt
  %101 = load i32, i32* %2     
  %102= icmp eq i32 %101, 3     ; alive_count==3
  br i1 %102, label %103, label %109     ; judge alive_count==3

103:     ; if Stmt
  %104 = load [500 x i32]*, [500 x i32]** %5     
  %105 = load i32, i32* %3     
  %106= getelementptr [500 x i32],[500 x i32]* %104 , i32 %105     
  %107 = load i32, i32* %4     
  %108= getelementptr [500 x i32],[500 x i32]* %106 , i32 0, i32 %107     
  store i32 1, i32* %108     ; target[j][i]=1
  br label %115     

109:     ; else Stmt
  %110 = load [500 x i32]*, [500 x i32]** %5     
  %111 = load i32, i32* %3     
  %112= getelementptr [500 x i32],[500 x i32]* %110 , i32 %111     
  %113 = load i32, i32* %4     
  %114= getelementptr [500 x i32],[500 x i32]* %112 , i32 0, i32 %113     
  store i32 0, i32* %114     ; target[j][i]=0
  br label %115     

115:     
  br label %116     

116:     
  %117 = load i32, i32* %4     
  %118 = add i32 %117, 1     ; i+1
  store i32 %118, i32* %4     ; i=i+1
  br label %12     

119:     ; exit while
  %120 = load i32, i32* %3     
  %121 = add i32 %120, 1     ; j+1
  store i32 %121, i32* %3     ; j=j+1
  br label %7     

122:     ; exit while
  ret void     
}

define dso_local i32 @main(){
entry:     
  call void @read_map()     ; call read_map()
  call void @starttime()     ; call starttime()
  br label %0     

0:     ; judge steps>0
  %1 = load i32, i32* @steps     
  %2= icmp sgt i32 %1, 0     ; steps>0
  br i1 %2, label %3, label %15     

3:     ; while Stmt
  %4 = load i32, i32* @active     
  %5= icmp eq i32 %4, 1     ; active==1
  br i1 %5, label %6, label %9     ; judge active==1

6:     ; if Stmt
  %7= getelementptr [500 x [500 x i32]],[500 x [500 x i32]]* @sheet1 , i32 0, i32 0     
  %8= getelementptr [500 x [500 x i32]],[500 x [500 x i32]]* @sheet2 , i32 0, i32 0     
  call void @step([500 x i32]* %7,[500 x i32]* %8)     ; call step(sheet1,sheet2)
  store i32 2, i32* @active     ; active=2
  br label %12     

9:     ; else Stmt
  %10= getelementptr [500 x [500 x i32]],[500 x [500 x i32]]* @sheet2 , i32 0, i32 0     
  %11= getelementptr [500 x [500 x i32]],[500 x [500 x i32]]* @sheet1 , i32 0, i32 0     
  call void @step([500 x i32]* %10,[500 x i32]* %11)     ; call step(sheet2,sheet1)
  store i32 1, i32* @active     ; active=1
  br label %12     

12:     
  %13 = load i32, i32* @steps     
  %14 = sub i32 %13, 1     ; steps-1
  store i32 %14, i32* @steps     ; steps=steps-1
  br label %0     

15:     ; exit while
  call void @stoptime()     ; call stoptime()
  %16 = load i32, i32* @active     
  %17= icmp eq i32 %16, 2     ; active==2
  br i1 %17, label %18, label %19     ; judge active==2

18:     ; if Stmt
  call void @swap12()     ; call swap12()
  br label %19     

19:     
  call void @put_map()     ; call put_map()
  ret i32 0     
}

